
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bcc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cfc  08000cfc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cfc  08000cfc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000cfc  08000cfc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cfc  08000cfc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cfc  08000cfc  00010cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d00  08000d00  00010d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000d08  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000d08  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d5b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000616  00000000  00000000  00020dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  000213e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012e  00000000  00000000  00021590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001716  00000000  00000000  000216be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001069  00000000  00000000  00022dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000050a8  00000000  00000000  00023e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000054c  00000000  00000000  00028ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00029434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ce4 	.word	0x08000ce4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000ce4 	.word	0x08000ce4

08000170 <DIO_voidSetPortnDirection>:
			break;
	}

}
void	DIO_voidSetPortnDirection(u8 port, u8 Direction)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	switch (port)
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	2b02      	cmp	r3, #2
 8000184:	f000 8086 	beq.w	8000294 <DIO_voidSetPortnDirection+0x124>
 8000188:	2b02      	cmp	r3, #2
 800018a:	f300 80c2 	bgt.w	8000312 <DIO_voidSetPortnDirection+0x1a2>
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <DIO_voidSetPortnDirection+0x28>
 8000192:	2b01      	cmp	r3, #1
 8000194:	d03f      	beq.n	8000216 <DIO_voidSetPortnDirection+0xa6>
				GPIOC_CRH &= MASK_32BIT;
				GPIOC_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
				break;
		}
}
 8000196:	e0bc      	b.n	8000312 <DIO_voidSetPortnDirection+0x1a2>
				GPIOA_CRL &= MASK_32BIT;
 8000198:	4b60      	ldr	r3, [pc, #384]	; (800031c <DIO_voidSetPortnDirection+0x1ac>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
				GPIOA_CRL ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800019e:	4b5f      	ldr	r3, [pc, #380]	; (800031c <DIO_voidSetPortnDirection+0x1ac>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	79b9      	ldrb	r1, [r7, #6]
 80001a4:	79ba      	ldrb	r2, [r7, #6]
 80001a6:	0112      	lsls	r2, r2, #4
 80001a8:	4311      	orrs	r1, r2
 80001aa:	79ba      	ldrb	r2, [r7, #6]
 80001ac:	0212      	lsls	r2, r2, #8
 80001ae:	4311      	orrs	r1, r2
 80001b0:	79ba      	ldrb	r2, [r7, #6]
 80001b2:	0312      	lsls	r2, r2, #12
 80001b4:	4311      	orrs	r1, r2
 80001b6:	79ba      	ldrb	r2, [r7, #6]
 80001b8:	0412      	lsls	r2, r2, #16
 80001ba:	4311      	orrs	r1, r2
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
 80001bc:	79ba      	ldrb	r2, [r7, #6]
 80001be:	0512      	lsls	r2, r2, #20
 80001c0:	4311      	orrs	r1, r2
 80001c2:	79ba      	ldrb	r2, [r7, #6]
 80001c4:	0612      	lsls	r2, r2, #24
 80001c6:	4311      	orrs	r1, r2
 80001c8:	79ba      	ldrb	r2, [r7, #6]
 80001ca:	0712      	lsls	r2, r2, #28
 80001cc:	430a      	orrs	r2, r1
 80001ce:	4611      	mov	r1, r2
				GPIOA_CRL ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 80001d0:	4a52      	ldr	r2, [pc, #328]	; (800031c <DIO_voidSetPortnDirection+0x1ac>)
 80001d2:	404b      	eors	r3, r1
 80001d4:	6013      	str	r3, [r2, #0]
				GPIOA_CRH &= MASK_32BIT;
 80001d6:	4b52      	ldr	r3, [pc, #328]	; (8000320 <DIO_voidSetPortnDirection+0x1b0>)
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
				GPIOA_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 80001dc:	4b50      	ldr	r3, [pc, #320]	; (8000320 <DIO_voidSetPortnDirection+0x1b0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	79b9      	ldrb	r1, [r7, #6]
 80001e2:	79ba      	ldrb	r2, [r7, #6]
 80001e4:	0112      	lsls	r2, r2, #4
 80001e6:	4311      	orrs	r1, r2
 80001e8:	79ba      	ldrb	r2, [r7, #6]
 80001ea:	0212      	lsls	r2, r2, #8
 80001ec:	4311      	orrs	r1, r2
 80001ee:	79ba      	ldrb	r2, [r7, #6]
 80001f0:	0312      	lsls	r2, r2, #12
 80001f2:	4311      	orrs	r1, r2
 80001f4:	79ba      	ldrb	r2, [r7, #6]
 80001f6:	0412      	lsls	r2, r2, #16
 80001f8:	4311      	orrs	r1, r2
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
 80001fa:	79ba      	ldrb	r2, [r7, #6]
 80001fc:	0512      	lsls	r2, r2, #20
 80001fe:	4311      	orrs	r1, r2
 8000200:	79ba      	ldrb	r2, [r7, #6]
 8000202:	0612      	lsls	r2, r2, #24
 8000204:	4311      	orrs	r1, r2
 8000206:	79ba      	ldrb	r2, [r7, #6]
 8000208:	0712      	lsls	r2, r2, #28
 800020a:	430a      	orrs	r2, r1
 800020c:	4611      	mov	r1, r2
				GPIOA_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800020e:	4a44      	ldr	r2, [pc, #272]	; (8000320 <DIO_voidSetPortnDirection+0x1b0>)
 8000210:	404b      	eors	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
				break;
 8000214:	e07d      	b.n	8000312 <DIO_voidSetPortnDirection+0x1a2>
				GPIOB_CRL &= MASK_32BIT;
 8000216:	4b43      	ldr	r3, [pc, #268]	; (8000324 <DIO_voidSetPortnDirection+0x1b4>)
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
				GPIOB_CRL ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800021c:	4b41      	ldr	r3, [pc, #260]	; (8000324 <DIO_voidSetPortnDirection+0x1b4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	79b9      	ldrb	r1, [r7, #6]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0112      	lsls	r2, r2, #4
 8000226:	4311      	orrs	r1, r2
 8000228:	79ba      	ldrb	r2, [r7, #6]
 800022a:	0212      	lsls	r2, r2, #8
 800022c:	4311      	orrs	r1, r2
 800022e:	79ba      	ldrb	r2, [r7, #6]
 8000230:	0312      	lsls	r2, r2, #12
 8000232:	4311      	orrs	r1, r2
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0412      	lsls	r2, r2, #16
 8000238:	4311      	orrs	r1, r2
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0512      	lsls	r2, r2, #20
 800023e:	4311      	orrs	r1, r2
 8000240:	79ba      	ldrb	r2, [r7, #6]
 8000242:	0612      	lsls	r2, r2, #24
 8000244:	4311      	orrs	r1, r2
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0712      	lsls	r2, r2, #28
 800024a:	430a      	orrs	r2, r1
 800024c:	4611      	mov	r1, r2
				GPIOB_CRL ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800024e:	4a35      	ldr	r2, [pc, #212]	; (8000324 <DIO_voidSetPortnDirection+0x1b4>)
 8000250:	404b      	eors	r3, r1
 8000252:	6013      	str	r3, [r2, #0]
				GPIOB_CRH &= MASK_32BIT;
 8000254:	4b34      	ldr	r3, [pc, #208]	; (8000328 <DIO_voidSetPortnDirection+0x1b8>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
				GPIOB_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800025a:	4b33      	ldr	r3, [pc, #204]	; (8000328 <DIO_voidSetPortnDirection+0x1b8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	79b9      	ldrb	r1, [r7, #6]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	4311      	orrs	r1, r2
 8000266:	79ba      	ldrb	r2, [r7, #6]
 8000268:	0212      	lsls	r2, r2, #8
 800026a:	4311      	orrs	r1, r2
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0312      	lsls	r2, r2, #12
 8000270:	4311      	orrs	r1, r2
 8000272:	79ba      	ldrb	r2, [r7, #6]
 8000274:	0412      	lsls	r2, r2, #16
 8000276:	4311      	orrs	r1, r2
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
 8000278:	79ba      	ldrb	r2, [r7, #6]
 800027a:	0512      	lsls	r2, r2, #20
 800027c:	4311      	orrs	r1, r2
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	0612      	lsls	r2, r2, #24
 8000282:	4311      	orrs	r1, r2
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0712      	lsls	r2, r2, #28
 8000288:	430a      	orrs	r2, r1
 800028a:	4611      	mov	r1, r2
				GPIOB_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800028c:	4a26      	ldr	r2, [pc, #152]	; (8000328 <DIO_voidSetPortnDirection+0x1b8>)
 800028e:	404b      	eors	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
				break;
 8000292:	e03e      	b.n	8000312 <DIO_voidSetPortnDirection+0x1a2>
				GPIOC_CRL &= MASK_32BIT;
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <DIO_voidSetPortnDirection+0x1bc>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
				GPIOC_CRL ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <DIO_voidSetPortnDirection+0x1bc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79b9      	ldrb	r1, [r7, #6]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	4311      	orrs	r1, r2
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	0212      	lsls	r2, r2, #8
 80002aa:	4311      	orrs	r1, r2
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	0312      	lsls	r2, r2, #12
 80002b0:	4311      	orrs	r1, r2
 80002b2:	79ba      	ldrb	r2, [r7, #6]
 80002b4:	0412      	lsls	r2, r2, #16
 80002b6:	4311      	orrs	r1, r2
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
 80002b8:	79ba      	ldrb	r2, [r7, #6]
 80002ba:	0512      	lsls	r2, r2, #20
 80002bc:	4311      	orrs	r1, r2
 80002be:	79ba      	ldrb	r2, [r7, #6]
 80002c0:	0612      	lsls	r2, r2, #24
 80002c2:	4311      	orrs	r1, r2
 80002c4:	79ba      	ldrb	r2, [r7, #6]
 80002c6:	0712      	lsls	r2, r2, #28
 80002c8:	430a      	orrs	r2, r1
 80002ca:	4611      	mov	r1, r2
				GPIOC_CRL ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 80002cc:	4a17      	ldr	r2, [pc, #92]	; (800032c <DIO_voidSetPortnDirection+0x1bc>)
 80002ce:	404b      	eors	r3, r1
 80002d0:	6013      	str	r3, [r2, #0]
				GPIOC_CRH &= MASK_32BIT;
 80002d2:	4b17      	ldr	r3, [pc, #92]	; (8000330 <DIO_voidSetPortnDirection+0x1c0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
				GPIOC_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <DIO_voidSetPortnDirection+0x1c0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	79b9      	ldrb	r1, [r7, #6]
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	0112      	lsls	r2, r2, #4
 80002e2:	4311      	orrs	r1, r2
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	0212      	lsls	r2, r2, #8
 80002e8:	4311      	orrs	r1, r2
 80002ea:	79ba      	ldrb	r2, [r7, #6]
 80002ec:	0312      	lsls	r2, r2, #12
 80002ee:	4311      	orrs	r1, r2
 80002f0:	79ba      	ldrb	r2, [r7, #6]
 80002f2:	0412      	lsls	r2, r2, #16
 80002f4:	4311      	orrs	r1, r2
						   | (Direction<<5*4) | (Direction<<6*4) | (Direction<<7*4));
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0512      	lsls	r2, r2, #20
 80002fa:	4311      	orrs	r1, r2
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	0612      	lsls	r2, r2, #24
 8000300:	4311      	orrs	r1, r2
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0712      	lsls	r2, r2, #28
 8000306:	430a      	orrs	r2, r1
 8000308:	4611      	mov	r1, r2
				GPIOC_CRH ^= ((Direction<<0) | (Direction<<1*4) | (Direction<<2*4) | (Direction<<3*4) | (Direction<<4*4)
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <DIO_voidSetPortnDirection+0x1c0>)
 800030c:	404b      	eors	r3, r1
 800030e:	6013      	str	r3, [r2, #0]
				break;
 8000310:	bf00      	nop
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40010800 	.word	0x40010800
 8000320:	40010804 	.word	0x40010804
 8000324:	40010c00 	.word	0x40010c00
 8000328:	40010c04 	.word	0x40010c04
 800032c:	40011000 	.word	0x40011000
 8000330:	40011004 	.word	0x40011004

08000334 <DIO_voidTogglePin>:
	}
	return -1;
}

void DIO_voidTogglePin(u8 port, u8 pin)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	460a      	mov	r2, r1
 800033e:	71fb      	strb	r3, [r7, #7]
 8000340:	4613      	mov	r3, r2
 8000342:	71bb      	strb	r3, [r7, #6]
	switch(port)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d01c      	beq.n	8000384 <DIO_voidTogglePin+0x50>
 800034a:	2b02      	cmp	r3, #2
 800034c:	dc25      	bgt.n	800039a <DIO_voidTogglePin+0x66>
 800034e:	2b00      	cmp	r3, #0
 8000350:	d002      	beq.n	8000358 <DIO_voidTogglePin+0x24>
 8000352:	2b01      	cmp	r3, #1
 8000354:	d00b      	beq.n	800036e <DIO_voidTogglePin+0x3a>
				break;
			case PORTC:
				TOGBIT(GPIOC_ODR, pin);
				break;
		}
}
 8000356:	e020      	b.n	800039a <DIO_voidTogglePin+0x66>
				TOGBIT(GPIOA_ODR, pin);
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <DIO_voidTogglePin+0x70>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	79ba      	ldrb	r2, [r7, #6]
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <DIO_voidTogglePin+0x70>)
 8000368:	404b      	eors	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
				break;
 800036c:	e015      	b.n	800039a <DIO_voidTogglePin+0x66>
				TOGBIT(GPIOB_ODR, pin);
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <DIO_voidTogglePin+0x74>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	79ba      	ldrb	r2, [r7, #6]
 8000374:	2101      	movs	r1, #1
 8000376:	fa01 f202 	lsl.w	r2, r1, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <DIO_voidTogglePin+0x74>)
 800037e:	404b      	eors	r3, r1
 8000380:	6013      	str	r3, [r2, #0]
				break;
 8000382:	e00a      	b.n	800039a <DIO_voidTogglePin+0x66>
				TOGBIT(GPIOC_ODR, pin);
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <DIO_voidTogglePin+0x78>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	4611      	mov	r1, r2
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <DIO_voidTogglePin+0x78>)
 8000394:	404b      	eors	r3, r1
 8000396:	6013      	str	r3, [r2, #0]
				break;
 8000398:	bf00      	nop
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	4001080c 	.word	0x4001080c
 80003a8:	40010c0c 	.word	0x40010c0c
 80003ac:	4001100c 	.word	0x4001100c

080003b0 <LCD_init>:
* Function Name: LCD_init
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void
* Return value : void
*****************************************************************************/
void LCD_init(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
	u8 i = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
	MRCC_enumSetPeripheralClock(APB2 , IOPAEN_ID, RCC_ENABLE );
 80003ba:	2201      	movs	r2, #1
 80003bc:	2102      	movs	r1, #2
 80003be:	2003      	movs	r0, #3
 80003c0:	f000 fb26 	bl	8000a10 <MRCC_enumSetPeripheralClock>
	DIO_voidSetPortnDirection(PORTA, GPIO_OUTPUT_2MHZ_PP);
 80003c4:	2102      	movs	r1, #2
 80003c6:	2000      	movs	r0, #0
 80003c8:	f7ff fed2 	bl	8000170 <DIO_voidSetPortnDirection>
	LCD_write_command(0x3);
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 f829 	bl	8000424 <LCD_write_command>
	while(i >=500000000)
 80003d2:	bf00      	nop
	{
		i++;
	}
	i=0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	71fb      	strb	r3, [r7, #7]
	LCD_write_command(0x3);
 80003d8:	2003      	movs	r0, #3
 80003da:	f000 f823 	bl	8000424 <LCD_write_command>
	while(i >=500000000)
 80003de:	bf00      	nop
		{
			i++;
		}
		i=0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	71fb      	strb	r3, [r7, #7]
	LCD_write_command(0x3);
 80003e4:	2003      	movs	r0, #3
 80003e6:	f000 f81d 	bl	8000424 <LCD_write_command>
	while(i >=500000000)
 80003ea:	bf00      	nop
		{
			i++;
		}
		i=0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	71fb      	strb	r3, [r7, #7]

	LCD_write_command(0x2);
 80003f0:	2002      	movs	r0, #2
 80003f2:	f000 f817 	bl	8000424 <LCD_write_command>
	LCD_write_command(0x28);
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f000 f814 	bl	8000424 <LCD_write_command>
	LCD_write_command(0x08);
 80003fc:	2008      	movs	r0, #8
 80003fe:	f000 f811 	bl	8000424 <LCD_write_command>
	LCD_write_command(0x1);
 8000402:	2001      	movs	r0, #1
 8000404:	f000 f80e 	bl	8000424 <LCD_write_command>
	LCD_write_command(0x6);
 8000408:	2006      	movs	r0, #6
 800040a:	f000 f80b 	bl	8000424 <LCD_write_command>
	LCD_write_command(0xc);
 800040e:	200c      	movs	r0, #12
 8000410:	f000 f808 	bl	8000424 <LCD_write_command>
	while(i >=500000000)
 8000414:	bf00      	nop
		{
			i++;
		}
		i=0;
 8000416:	2300      	movs	r3, #0
 8000418:	71fb      	strb	r3, [r7, #7]

}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <LCD_write_command>:
* Function Name: LCD_write_command
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands
* Return value : void
*****************************************************************************/
void LCD_write_command(u8 data){ // 0x53
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
	u8 i = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
	RS(0);
 8000432:	4b66      	ldr	r3, [pc, #408]	; (80005cc <LCD_write_command+0x1a8>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a65      	ldr	r2, [pc, #404]	; (80005cc <LCD_write_command+0x1a8>)
 8000438:	f023 0308 	bic.w	r3, r3, #8
 800043c:	6013      	str	r3, [r2, #0]
	D7(GET_BIT(data,7)); // Data bit7  = D7
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	09db      	lsrs	r3, r3, #7
 8000442:	b2db      	uxtb	r3, r3
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d006      	beq.n	800045a <LCD_write_command+0x36>
 800044c:	4b5f      	ldr	r3, [pc, #380]	; (80005cc <LCD_write_command+0x1a8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a5e      	ldr	r2, [pc, #376]	; (80005cc <LCD_write_command+0x1a8>)
 8000452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000456:	6013      	str	r3, [r2, #0]
 8000458:	e005      	b.n	8000466 <LCD_write_command+0x42>
 800045a:	4b5c      	ldr	r3, [pc, #368]	; (80005cc <LCD_write_command+0x1a8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a5b      	ldr	r2, [pc, #364]	; (80005cc <LCD_write_command+0x1a8>)
 8000460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000464:	6013      	str	r3, [r2, #0]
	D6(GET_BIT(data,6)); // Data bit6  = D6
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	099b      	lsrs	r3, r3, #6
 800046a:	b2db      	uxtb	r3, r3
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	2b00      	cmp	r3, #0
 8000472:	d006      	beq.n	8000482 <LCD_write_command+0x5e>
 8000474:	4b55      	ldr	r3, [pc, #340]	; (80005cc <LCD_write_command+0x1a8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a54      	ldr	r2, [pc, #336]	; (80005cc <LCD_write_command+0x1a8>)
 800047a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047e:	6013      	str	r3, [r2, #0]
 8000480:	e005      	b.n	800048e <LCD_write_command+0x6a>
 8000482:	4b52      	ldr	r3, [pc, #328]	; (80005cc <LCD_write_command+0x1a8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a51      	ldr	r2, [pc, #324]	; (80005cc <LCD_write_command+0x1a8>)
 8000488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800048c:	6013      	str	r3, [r2, #0]
	D5(GET_BIT(data,5)); // Data bit5  = D5
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	095b      	lsrs	r3, r3, #5
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	2b00      	cmp	r3, #0
 800049a:	d006      	beq.n	80004aa <LCD_write_command+0x86>
 800049c:	4b4b      	ldr	r3, [pc, #300]	; (80005cc <LCD_write_command+0x1a8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a4a      	ldr	r2, [pc, #296]	; (80005cc <LCD_write_command+0x1a8>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6013      	str	r3, [r2, #0]
 80004a8:	e005      	b.n	80004b6 <LCD_write_command+0x92>
 80004aa:	4b48      	ldr	r3, [pc, #288]	; (80005cc <LCD_write_command+0x1a8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a47      	ldr	r2, [pc, #284]	; (80005cc <LCD_write_command+0x1a8>)
 80004b0:	f023 0320 	bic.w	r3, r3, #32
 80004b4:	6013      	str	r3, [r2, #0]
	D4(GET_BIT(data,4)); // Data bit4  = D4
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	091b      	lsrs	r3, r3, #4
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d006      	beq.n	80004d2 <LCD_write_command+0xae>
 80004c4:	4b41      	ldr	r3, [pc, #260]	; (80005cc <LCD_write_command+0x1a8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a40      	ldr	r2, [pc, #256]	; (80005cc <LCD_write_command+0x1a8>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	e005      	b.n	80004de <LCD_write_command+0xba>
 80004d2:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <LCD_write_command+0x1a8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a3d      	ldr	r2, [pc, #244]	; (80005cc <LCD_write_command+0x1a8>)
 80004d8:	f023 0310 	bic.w	r3, r3, #16
 80004dc:	6013      	str	r3, [r2, #0]
	EN(1);
 80004de:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <LCD_write_command+0x1a8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a3a      	ldr	r2, [pc, #232]	; (80005cc <LCD_write_command+0x1a8>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 80004ea:	bf00      	nop
		{
			i++;
		}
		i=0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
	EN(0);
 80004f0:	4b36      	ldr	r3, [pc, #216]	; (80005cc <LCD_write_command+0x1a8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a35      	ldr	r2, [pc, #212]	; (80005cc <LCD_write_command+0x1a8>)
 80004f6:	f023 0304 	bic.w	r3, r3, #4
 80004fa:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 80004fc:	bf00      	nop
		{
			i++;
		}
		i=0;
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]
	D7(GET_BIT(data,3)); // Data bit3  = D7
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	08db      	lsrs	r3, r3, #3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d006      	beq.n	800051e <LCD_write_command+0xfa>
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <LCD_write_command+0x1a8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a2d      	ldr	r2, [pc, #180]	; (80005cc <LCD_write_command+0x1a8>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	e005      	b.n	800052a <LCD_write_command+0x106>
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <LCD_write_command+0x1a8>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <LCD_write_command+0x1a8>)
 8000524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000528:	6013      	str	r3, [r2, #0]
	D6(GET_BIT(data,2)); // Data bit2  = D6
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	089b      	lsrs	r3, r3, #2
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <LCD_write_command+0x122>
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <LCD_write_command+0x1a8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a23      	ldr	r2, [pc, #140]	; (80005cc <LCD_write_command+0x1a8>)
 800053e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e005      	b.n	8000552 <LCD_write_command+0x12e>
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <LCD_write_command+0x1a8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <LCD_write_command+0x1a8>)
 800054c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000550:	6013      	str	r3, [r2, #0]
	D5(GET_BIT(data,1)); // Data bit1  = D5
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	085b      	lsrs	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	2b00      	cmp	r3, #0
 800055e:	d006      	beq.n	800056e <LCD_write_command+0x14a>
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <LCD_write_command+0x1a8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <LCD_write_command+0x1a8>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	e005      	b.n	800057a <LCD_write_command+0x156>
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <LCD_write_command+0x1a8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <LCD_write_command+0x1a8>)
 8000574:	f023 0320 	bic.w	r3, r3, #32
 8000578:	6013      	str	r3, [r2, #0]
	D4(GET_BIT(data,0)); // Data bit0  = D4
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <LCD_write_command+0x16e>
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <LCD_write_command+0x1a8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <LCD_write_command+0x1a8>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e005      	b.n	800059e <LCD_write_command+0x17a>
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <LCD_write_command+0x1a8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LCD_write_command+0x1a8>)
 8000598:	f023 0310 	bic.w	r3, r3, #16
 800059c:	6013      	str	r3, [r2, #0]
	EN(1);
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <LCD_write_command+0x1a8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LCD_write_command+0x1a8>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 80005aa:	bf00      	nop
		{
			i++;
		}
		i=0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
	EN(0);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <LCD_write_command+0x1a8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <LCD_write_command+0x1a8>)
 80005b6:	f023 0304 	bic.w	r3, r3, #4
 80005ba:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 80005bc:	bf00      	nop
		{
			i++;
		}
		i=0;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	4001080c 	.word	0x4001080c

080005d0 <LCD_write_data>:
* Function Name: LCD_write_data
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(u8 data){ // 0x53
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	u8 i = 0 ;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
	RS(1);
 80005de:	4b66      	ldr	r3, [pc, #408]	; (8000778 <LCD_write_data+0x1a8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <LCD_write_data+0x1a8>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6013      	str	r3, [r2, #0]
	D7(GET_BIT(data,7)); // Data bit7  = D7
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	09db      	lsrs	r3, r3, #7
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <LCD_write_data+0x36>
 80005f8:	4b5f      	ldr	r3, [pc, #380]	; (8000778 <LCD_write_data+0x1a8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a5e      	ldr	r2, [pc, #376]	; (8000778 <LCD_write_data+0x1a8>)
 80005fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	e005      	b.n	8000612 <LCD_write_data+0x42>
 8000606:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <LCD_write_data+0x1a8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a5b      	ldr	r2, [pc, #364]	; (8000778 <LCD_write_data+0x1a8>)
 800060c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000610:	6013      	str	r3, [r2, #0]
	D6(GET_BIT(data,6)); // Data bit6  = D6
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	099b      	lsrs	r3, r3, #6
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <LCD_write_data+0x5e>
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <LCD_write_data+0x1a8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a54      	ldr	r2, [pc, #336]	; (8000778 <LCD_write_data+0x1a8>)
 8000626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	e005      	b.n	800063a <LCD_write_data+0x6a>
 800062e:	4b52      	ldr	r3, [pc, #328]	; (8000778 <LCD_write_data+0x1a8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a51      	ldr	r2, [pc, #324]	; (8000778 <LCD_write_data+0x1a8>)
 8000634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000638:	6013      	str	r3, [r2, #0]
	D5(GET_BIT(data,5)); // Data bit5  = D5
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d006      	beq.n	8000656 <LCD_write_data+0x86>
 8000648:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <LCD_write_data+0x1a8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a4a      	ldr	r2, [pc, #296]	; (8000778 <LCD_write_data+0x1a8>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	e005      	b.n	8000662 <LCD_write_data+0x92>
 8000656:	4b48      	ldr	r3, [pc, #288]	; (8000778 <LCD_write_data+0x1a8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a47      	ldr	r2, [pc, #284]	; (8000778 <LCD_write_data+0x1a8>)
 800065c:	f023 0320 	bic.w	r3, r3, #32
 8000660:	6013      	str	r3, [r2, #0]
	D4(GET_BIT(data,4)); // Data bit4  = D4
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <LCD_write_data+0xae>
 8000670:	4b41      	ldr	r3, [pc, #260]	; (8000778 <LCD_write_data+0x1a8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a40      	ldr	r2, [pc, #256]	; (8000778 <LCD_write_data+0x1a8>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	e005      	b.n	800068a <LCD_write_data+0xba>
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <LCD_write_data+0x1a8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a3d      	ldr	r2, [pc, #244]	; (8000778 <LCD_write_data+0x1a8>)
 8000684:	f023 0310 	bic.w	r3, r3, #16
 8000688:	6013      	str	r3, [r2, #0]
	EN(1);
 800068a:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <LCD_write_data+0x1a8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a3a      	ldr	r2, [pc, #232]	; (8000778 <LCD_write_data+0x1a8>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 8000696:	bf00      	nop
		{
			i++;
		}
		i=0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
	EN(0);
 800069c:	4b36      	ldr	r3, [pc, #216]	; (8000778 <LCD_write_data+0x1a8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a35      	ldr	r2, [pc, #212]	; (8000778 <LCD_write_data+0x1a8>)
 80006a2:	f023 0304 	bic.w	r3, r3, #4
 80006a6:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 80006a8:	bf00      	nop
		{
			i++;
		}
		i=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]

	D7(GET_BIT(data,3)); // Data bit3  = D7
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d006      	beq.n	80006ca <LCD_write_data+0xfa>
 80006bc:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <LCD_write_data+0x1a8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	; (8000778 <LCD_write_data+0x1a8>)
 80006c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	e005      	b.n	80006d6 <LCD_write_data+0x106>
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <LCD_write_data+0x1a8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <LCD_write_data+0x1a8>)
 80006d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006d4:	6013      	str	r3, [r2, #0]
	D6(GET_BIT(data,2)); // Data bit2  = D6
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <LCD_write_data+0x122>
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <LCD_write_data+0x1a8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a23      	ldr	r2, [pc, #140]	; (8000778 <LCD_write_data+0x1a8>)
 80006ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e005      	b.n	80006fe <LCD_write_data+0x12e>
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <LCD_write_data+0x1a8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <LCD_write_data+0x1a8>)
 80006f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006fc:	6013      	str	r3, [r2, #0]
	D5(GET_BIT(data,1)); // Data bit1  = D5
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	085b      	lsrs	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <LCD_write_data+0x14a>
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <LCD_write_data+0x1a8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <LCD_write_data+0x1a8>)
 8000712:	f043 0320 	orr.w	r3, r3, #32
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e005      	b.n	8000726 <LCD_write_data+0x156>
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <LCD_write_data+0x1a8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <LCD_write_data+0x1a8>)
 8000720:	f023 0320 	bic.w	r3, r3, #32
 8000724:	6013      	str	r3, [r2, #0]
	D4(GET_BIT(data,0)); // Data bit0  = D4
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d006      	beq.n	800073e <LCD_write_data+0x16e>
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <LCD_write_data+0x1a8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <LCD_write_data+0x1a8>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	e005      	b.n	800074a <LCD_write_data+0x17a>
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <LCD_write_data+0x1a8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LCD_write_data+0x1a8>)
 8000744:	f023 0310 	bic.w	r3, r3, #16
 8000748:	6013      	str	r3, [r2, #0]
	EN(1);
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LCD_write_data+0x1a8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LCD_write_data+0x1a8>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 8000756:	bf00      	nop
		{
			i++;
		}
		i=0;
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]
	EN(0);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LCD_write_data+0x1a8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <LCD_write_data+0x1a8>)
 8000762:	f023 0304 	bic.w	r3, r3, #4
 8000766:	6013      	str	r3, [r2, #0]
	while(i >=500000000)
 8000768:	bf00      	nop
		{
			i++;
		}
		i=0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	4001080c 	.word	0x4001080c

0800077c <LCD_write_num>:
* Function Name: LCD_write_num
* Purpose      : write a number on lCD
* Parameters   : num: number to be written
* Return value : void
*****************************************************************************/
void LCD_write_num(u32 num){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	int8 i = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	75fb      	strb	r3, [r7, #23]
	u8 num_arr[10];

	if(num == 0) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d103      	bne.n	8000796 <LCD_write_num+0x1a>
		LCD_write_data('0');
 800078e:	2030      	movs	r0, #48	; 0x30
 8000790:	f7ff ff1e 	bl	80005d0 <LCD_write_data>
 8000794:	e03e      	b.n	8000814 <LCD_write_num+0x98>
		return;
	}

	for(i = 0; num != 0 ;i++){
 8000796:	2300      	movs	r3, #0
 8000798:	75fb      	strb	r3, [r7, #23]
 800079a:	e01e      	b.n	80007da <LCD_write_num+0x5e>
		num_arr[i] = num % 10 + 48;
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <LCD_write_num+0xa0>)
 80007a0:	fba3 2301 	umull	r2, r3, r3, r1
 80007a4:	08da      	lsrs	r2, r3, #3
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	1aca      	subs	r2, r1, r3
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007b6:	3230      	adds	r2, #48	; 0x30
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	3318      	adds	r3, #24
 80007bc:	443b      	add	r3, r7
 80007be:	f803 2c0c 	strb.w	r2, [r3, #-12]
		num /= 10;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a15      	ldr	r2, [pc, #84]	; (800081c <LCD_write_num+0xa0>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	08db      	lsrs	r3, r3, #3
 80007cc:	607b      	str	r3, [r7, #4]
	for(i = 0; num != 0 ;i++){
 80007ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	75fb      	strb	r3, [r7, #23]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1dd      	bne.n	800079c <LCD_write_num+0x20>
	}
	i--;
 80007e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3b01      	subs	r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	75fb      	strb	r3, [r7, #23]
	while (i >= 0){
 80007ec:	e00e      	b.n	800080c <LCD_write_num+0x90>
		LCD_write_data(num_arr[i]);
 80007ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007f2:	3318      	adds	r3, #24
 80007f4:	443b      	add	r3, r7
 80007f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee8 	bl	80005d0 <LCD_write_data>
		i--;
 8000800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3b01      	subs	r3, #1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	75fb      	strb	r3, [r7, #23]
	while (i >= 0){
 800080c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000810:	2b00      	cmp	r3, #0
 8000812:	daec      	bge.n	80007ee <LCD_write_num+0x72>
	}
}
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	cccccccd 	.word	0xcccccccd

08000820 <DNVIC_EnableIRQ>:
}NVIC_t;

NVIC_t* NV = NVIC_BASE_ADDRESS;

u8 DNVIC_EnableIRQ(u8 IRQn)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	//or	NV->ISER[IRQn/32] |= 1<<IRQn%32; //better method
	u8 Local_u8ErrorState = ES_OK;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
	if(IRQn<32)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b1f      	cmp	r3, #31
 8000832:	d80c      	bhi.n	800084e <DNVIC_EnableIRQ+0x2e>
	{

		NV->ISER[0] |= (1<<IRQn);
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <DNVIC_EnableIRQ+0x90>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2101      	movs	r1, #1
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	4619      	mov	r1, r3
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <DNVIC_EnableIRQ+0x90>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	430a      	orrs	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	e029      	b.n	80008a2 <DNVIC_EnableIRQ+0x82>
	}else if((31<IRQn)&&(IRQn<64))
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b1f      	cmp	r3, #31
 8000852:	d910      	bls.n	8000876 <DNVIC_EnableIRQ+0x56>
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b3f      	cmp	r3, #63	; 0x3f
 8000858:	d80d      	bhi.n	8000876 <DNVIC_EnableIRQ+0x56>
	{
		NV->ISER[1] |= (1<<(IRQn-32));
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <DNVIC_EnableIRQ+0x90>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	3b20      	subs	r3, #32
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	4619      	mov	r1, r3
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <DNVIC_EnableIRQ+0x90>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	430a      	orrs	r2, r1
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	e015      	b.n	80008a2 <DNVIC_EnableIRQ+0x82>
	}else if((IRQn>64)&&(IRQn<67))
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d910      	bls.n	800089e <DNVIC_EnableIRQ+0x7e>
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b42      	cmp	r3, #66	; 0x42
 8000880:	d80d      	bhi.n	800089e <DNVIC_EnableIRQ+0x7e>
	{
		NV->ISER[2] |= (1<<(IRQn-64));
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <DNVIC_EnableIRQ+0x90>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	3b40      	subs	r3, #64	; 0x40
 800088c:	2101      	movs	r1, #1
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	4619      	mov	r1, r3
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <DNVIC_EnableIRQ+0x90>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	e001      	b.n	80008a2 <DNVIC_EnableIRQ+0x82>
	}else
	{
		Local_u8ErrorState = ES_NOK;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
	}

  return Local_u8ErrorState;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000000 	.word	0x20000000

080008b4 <DNVIC_SetPendingIRQ>:

  return Local_u8ErrorState;
}

u8 DNVIC_SetPendingIRQ (u8 IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState = ES_OK;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
	if(IRQn<32)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b1f      	cmp	r3, #31
 80008c6:	d80e      	bhi.n	80008e6 <DNVIC_SetPendingIRQ+0x32>
	{
		NV->ISPR[0] |= (1<<IRQn);
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <DNVIC_SetPendingIRQ+0x9c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <DNVIC_SetPendingIRQ+0x9c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	430a      	orrs	r2, r1
 80008e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80008e4:	e02d      	b.n	8000942 <DNVIC_SetPendingIRQ+0x8e>
	}else if((31<IRQn)&&(IRQn<64))
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d912      	bls.n	8000912 <DNVIC_SetPendingIRQ+0x5e>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b3f      	cmp	r3, #63	; 0x3f
 80008f0:	d80f      	bhi.n	8000912 <DNVIC_SetPendingIRQ+0x5e>
	{
		NV->ISPR[1] |= (1<<(IRQn-32));
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <DNVIC_SetPendingIRQ+0x9c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	3b20      	subs	r3, #32
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4619      	mov	r1, r3
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <DNVIC_SetPendingIRQ+0x9c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000910:	e017      	b.n	8000942 <DNVIC_SetPendingIRQ+0x8e>
	}else if((IRQn>64)&&(IRQn<67))
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b40      	cmp	r3, #64	; 0x40
 8000916:	d912      	bls.n	800093e <DNVIC_SetPendingIRQ+0x8a>
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b42      	cmp	r3, #66	; 0x42
 800091c:	d80f      	bhi.n	800093e <DNVIC_SetPendingIRQ+0x8a>
	{
		NV->ISPR[2] |= (1<<(IRQn-64));
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <DNVIC_SetPendingIRQ+0x9c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	3b40      	subs	r3, #64	; 0x40
 800092a:	2101      	movs	r1, #1
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	4619      	mov	r1, r3
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <DNVIC_SetPendingIRQ+0x9c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	430a      	orrs	r2, r1
 8000938:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800093c:	e001      	b.n	8000942 <DNVIC_SetPendingIRQ+0x8e>
	}else
	{
		Local_u8ErrorState = ES_NOK;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
	}

  return Local_u8ErrorState;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000

08000954 <DNVIC_SetPriorityGrouping>:

  return Local_u8ErrorState;
}

u8 DNVIC_SetPriorityGrouping(u32 priority_grouping)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	SCB_AIRCR = PASSWORD_MASK;     //To enable writing to this register
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <DNVIC_SetPriorityGrouping+0x28>)
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <DNVIC_SetPriorityGrouping+0x2c>)
 8000960:	601a      	str	r2, [r3, #0]
	SCB_AIRCR |= (priority_grouping);   //To write the no that indicates how many groups and subgroups we will have
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <DNVIC_SetPriorityGrouping+0x28>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4905      	ldr	r1, [pc, #20]	; (800097c <DNVIC_SetPriorityGrouping+0x28>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4313      	orrs	r3, r2
 800096c:	600b      	str	r3, [r1, #0]
    return ES_OK;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed0c 	.word	0xe000ed0c
 8000980:	05fa0000 	.word	0x05fa0000

08000984 <DNVIC_SetPriority>:

u8 DNVIC_SetPriority (u8 IRQn, u8 group, u8 subgroup)   //changed param for ease of use
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	460b      	mov	r3, r1
 8000990:	71bb      	strb	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	717b      	strb	r3, [r7, #5]
	 NV->IPR[IRQn] = GET_IRQ_PRIORITY(group,subgroup);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	b25a      	sxtb	r2, r3
 800099c:	797b      	ldrb	r3, [r7, #5]
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b259      	sxtb	r1, r3
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <DNVIC_SetPriority+0x44>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	b2c9      	uxtb	r1, r1
 80009b4:	4413      	add	r3, r2
 80009b6:	460a      	mov	r2, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	 return ES_OK;
 80009bc:	2301      	movs	r3, #1
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000000 	.word	0x20000000

080009cc <MRCC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void MRCC_voidInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	
		
		#if 	CLOCK_TYPE == HSI
		               /* internal 8 MHZ RC oscillator  */
	 	 	 	SET_BIT(MRCC->CR,CR_HSION );          /*	HSI clock enable	*/
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MRCC_voidInit+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <MRCC_voidInit+0x40>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]
				
				while(GET_BIT(MRCC->CR,CR_HSIRDY)==0);/*	HSI Ready Flag		        */
 80009dc:	bf00      	nop
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MRCC_voidInit+0x40>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f9      	beq.n	80009de <MRCC_voidInit+0x12>

				CLEAR_BIT(MRCC->CFGR,0);              /*HSI selected as system clock ---sw */
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MRCC_voidInit+0x40>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <MRCC_voidInit+0x40>)
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
				CLEAR_BIT(MRCC->CFGR,1);
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <MRCC_voidInit+0x40>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <MRCC_voidInit+0x40>)
 80009fc:	f023 0302 	bic.w	r3, r3, #2
 8000a00:	6053      	str	r3, [r2, #4]
				
		#else
				#warning	"Wrong clock security system configuration choice!"
		#endif
		
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <MRCC_enumSetPeripheralClock>:

ErrorStatus MRCC_enumSetPeripheralClock(u8 Copy_u8PeripheralBus , u8 Copy_u8PeripheralName , u8 Copy_u8PeripheralState )
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	717b      	strb	r3, [r7, #5]
	ErrorStatus	LOC_enumstate = ES_OK ;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
	switch( Copy_u8PeripheralState )
 8000a26:	797b      	ldrb	r3, [r7, #5]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d063      	beq.n	8000af4 <MRCC_enumSetPeripheralClock+0xe4>
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	dc7e      	bgt.n	8000b2e <MRCC_enumSetPeripheralClock+0x11e>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d002      	beq.n	8000a3a <MRCC_enumSetPeripheralClock+0x2a>
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d02d      	beq.n	8000a94 <MRCC_enumSetPeripheralClock+0x84>
 8000a38:	e079      	b.n	8000b2e <MRCC_enumSetPeripheralClock+0x11e>
	{
		case	RCC_ENABLE 	:
							switch( Copy_u8PeripheralBus )
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d01c      	beq.n	8000a7a <MRCC_enumSetPeripheralClock+0x6a>
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	dc25      	bgt.n	8000a90 <MRCC_enumSetPeripheralClock+0x80>
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d002      	beq.n	8000a4e <MRCC_enumSetPeripheralClock+0x3e>
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d00b      	beq.n	8000a64 <MRCC_enumSetPeripheralClock+0x54>
							{	
								case AHB  :	SET_BIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
								case APB1 :	SET_BIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
								case APB2 : SET_BIT(MRCC->APB2ENR  , Copy_u8PeripheralName  );break;
								default	  :	break;
 8000a4c:	e020      	b.n	8000a90 <MRCC_enumSetPeripheralClock+0x80>
								case AHB  :	SET_BIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	79ba      	ldrb	r2, [r7, #6]
 8000a54:	2101      	movs	r1, #1
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	e016      	b.n	8000a92 <MRCC_enumSetPeripheralClock+0x82>
								case APB1 :	SET_BIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
 8000a64:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	79ba      	ldrb	r2, [r7, #6]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a32      	ldr	r2, [pc, #200]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000a74:	430b      	orrs	r3, r1
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	e00b      	b.n	8000a92 <MRCC_enumSetPeripheralClock+0x82>
								case APB2 : SET_BIT(MRCC->APB2ENR  , Copy_u8PeripheralName  );break;
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4611      	mov	r1, r2
 8000a88:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	e000      	b.n	8000a92 <MRCC_enumSetPeripheralClock+0x82>
								default	  :	break;
 8000a90:	bf00      	nop
							}
							break;
 8000a92:	e04c      	b.n	8000b2e <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_DISABLE :	
							switch( Copy_u8PeripheralBus )
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d01e      	beq.n	8000ad8 <MRCC_enumSetPeripheralClock+0xc8>
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dc28      	bgt.n	8000af0 <MRCC_enumSetPeripheralClock+0xe0>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d002      	beq.n	8000aa8 <MRCC_enumSetPeripheralClock+0x98>
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d00c      	beq.n	8000ac0 <MRCC_enumSetPeripheralClock+0xb0>
								case APB1 :	CLEAR_BIT(  MRCC->APB1ENR , Copy_u8PeripheralName );
								break;
								case APB2 : CLEAR_BIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
								break;
								default	  :	
								break;
 8000aa6:	e023      	b.n	8000af0 <MRCC_enumSetPeripheralClock+0xe0>
								case AHB  :	CLEAR_BIT( MRCC->AHBENR  , Copy_u8PeripheralName   );
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	6153      	str	r3, [r2, #20]
								break;
 8000abe:	e018      	b.n	8000af2 <MRCC_enumSetPeripheralClock+0xe2>
								case APB1 :	CLEAR_BIT(  MRCC->APB1ENR , Copy_u8PeripheralName );
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	79ba      	ldrb	r2, [r7, #6]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	61d3      	str	r3, [r2, #28]
								break;
 8000ad6:	e00c      	b.n	8000af2 <MRCC_enumSetPeripheralClock+0xe2>
								case APB2 : CLEAR_BIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000aea:	400b      	ands	r3, r1
 8000aec:	6193      	str	r3, [r2, #24]
								break;
 8000aee:	e000      	b.n	8000af2 <MRCC_enumSetPeripheralClock+0xe2>
								break;
 8000af0:	bf00      	nop
							}
							break;
 8000af2:	e01c      	b.n	8000b2e <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_RESET	:	
							switch( Copy_u8PeripheralBus )
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d002      	beq.n	8000b00 <MRCC_enumSetPeripheralClock+0xf0>
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d00b      	beq.n	8000b16 <MRCC_enumSetPeripheralClock+0x106>
							{	
								case APB1 :	SET_BIT( MRCC->APB1RSTR , Copy_u8PeripheralName   );break;
								case APB2 : SET_BIT( MRCC->APB2RSTR , Copy_u8PeripheralName );break;
								default	  :	break;
 8000afe:	e015      	b.n	8000b2c <MRCC_enumSetPeripheralClock+0x11c>
								case APB1 :	SET_BIT( MRCC->APB1RSTR , Copy_u8PeripheralName   );break;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000b10:	430b      	orrs	r3, r1
 8000b12:	6113      	str	r3, [r2, #16]
 8000b14:	e00a      	b.n	8000b2c <MRCC_enumSetPeripheralClock+0x11c>
								case APB2 : SET_BIT( MRCC->APB2RSTR , Copy_u8PeripheralName );break;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	79ba      	ldrb	r2, [r7, #6]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	4611      	mov	r1, r2
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <MRCC_enumSetPeripheralClock+0x12c>)
 8000b26:	430b      	orrs	r3, r1
 8000b28:	60d3      	str	r3, [r2, #12]
 8000b2a:	bf00      	nop
							}
							break;
 8000b2c:	bf00      	nop
	}

	return LOC_enumstate;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	u8 i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
	MRCC_voidInit();
 8000b4a:	f7ff ff3f 	bl	80009cc <MRCC_voidInit>
	MRCC_enumSetPeripheralClock(APB2 , IOPBEN_ID, RCC_ENABLE );
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2103      	movs	r1, #3
 8000b52:	2003      	movs	r0, #3
 8000b54:	f7ff ff5c 	bl	8000a10 <MRCC_enumSetPeripheralClock>
	DIO_voidSetPortnDirection(PORTB, GPIO_OUTPUT_2MHZ_PP);
 8000b58:	2102      	movs	r1, #2
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fb08 	bl	8000170 <DIO_voidSetPortnDirection>
	LCD_init();
 8000b60:	f7ff fc26 	bl	80003b0 <LCD_init>
	while(i >=5000)
 8000b64:	bf00      	nop
	{
		i++;
	}
	i=0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
	LCD_write_command(0x0C); // display on, cursor off
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f7ff fc5a 	bl	8000424 <LCD_write_command>
	LCD_write_command(0x01);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff fc57 	bl	8000424 <LCD_write_command>
	while(i >=500)
 8000b76:	bf00      	nop
	{
		i++;
	}
	i=0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	71fb      	strb	r3, [r7, #7]
	LCD_write_num(100);
 8000b7c:	2064      	movs	r0, #100	; 0x64
 8000b7e:	f7ff fdfd 	bl	800077c <LCD_write_num>
	DNVIC_EnableIRQ(ADC1_2);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f7ff fe4c 	bl	8000820 <DNVIC_EnableIRQ>
	DNVIC_EnableIRQ(USART1);
 8000b88:	2025      	movs	r0, #37	; 0x25
 8000b8a:	f7ff fe49 	bl	8000820 <DNVIC_EnableIRQ>
	DNVIC_EnableIRQ(WWDG); //18 adc 37 usart 0wdt
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fe46 	bl	8000820 <DNVIC_EnableIRQ>
	DNVIC_SetPriorityGrouping(TWO_PREEMPTION_TWO_SUBGROUP);
 8000b94:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000b98:	f7ff fedc 	bl	8000954 <DNVIC_SetPriorityGrouping>
	DNVIC_SetPriority(ADC1_2, 0x00, 0x00);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2012      	movs	r0, #18
 8000ba2:	f7ff feef 	bl	8000984 <DNVIC_SetPriority>
	DNVIC_SetPriority(USART1, 0x02, 0x03);
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	2102      	movs	r1, #2
 8000baa:	2025      	movs	r0, #37	; 0x25
 8000bac:	f7ff feea 	bl	8000984 <DNVIC_SetPriority>
	DNVIC_SetPriority(WWDG, 0x01, 0x02);
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fee5 	bl	8000984 <DNVIC_SetPriority>


    /* Loop forever */
	for(;;)
	{
		DIO_voidTogglePin(PORTB, 5);
 8000bba:	2105      	movs	r1, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fbb9 	bl	8000334 <DIO_voidTogglePin>
		DNVIC_SetPendingIRQ (ADC1_2);
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f7ff fe76 	bl	80008b4 <DNVIC_SetPendingIRQ>
		DIO_voidTogglePin(PORTB, 5);
 8000bc8:	2105      	movs	r1, #5
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fbb2 	bl	8000334 <DIO_voidTogglePin>
		DNVIC_SetPendingIRQ (USART1);
 8000bd0:	2025      	movs	r0, #37	; 0x25
 8000bd2:	f7ff fe6f 	bl	80008b4 <DNVIC_SetPendingIRQ>
		DIO_voidTogglePin(PORTB, 5);
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fbab 	bl	8000334 <DIO_voidTogglePin>
		DNVIC_SetPendingIRQ (WWDG);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fe68 	bl	80008b4 <DNVIC_SetPendingIRQ>
		DIO_voidTogglePin(PORTB, 5);
 8000be4:	e7e9      	b.n	8000bba <main+0x7a>

08000be6 <ADC1_2_IRQHandler>:
	}
}
void  ADC1_2_IRQHandler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
	u8 i = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
	DIO_voidTogglePin(PORTB, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fb9e 	bl	8000334 <DIO_voidTogglePin>
	while(i >=5000)
 8000bf8:	bf00      	nop
	{
		i++;
	}
	i=0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
	u8 i = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71fb      	strb	r3, [r7, #7]
	DIO_voidTogglePin(PORTB, 1);
 8000c10:	2101      	movs	r1, #1
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff fb8e 	bl	8000334 <DIO_voidTogglePin>
	while(i >=5000)
 8000c18:	bf00      	nop
	{
		i++;
	}
	i=0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <WWDG_IRQHandler>:
void WWDG_IRQHandler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
	u8 i = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71fb      	strb	r3, [r7, #7]
	DIO_voidTogglePin(PORTB, 2);
 8000c30:	2102      	movs	r1, #2
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fb7e 	bl	8000334 <DIO_voidTogglePin>
	while(i >=5000)
 8000c38:	bf00      	nop
	{
		i++;
	}
	i=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71fb      	strb	r3, [r7, #7]
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f000 f811 	bl	8000c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7a:	f7ff ff61 	bl	8000b40 <main>

08000c7e <LoopForever>:

LoopForever:
  b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c8c:	08000d04 	.word	0x08000d04
  ldr r2, =_sbss
 8000c90:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c94:	20000020 	.word	0x20000020

08000c98 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC3_IRQHandler>
	...

08000c9c <__libc_init_array>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4d0c      	ldr	r5, [pc, #48]	; (8000cd4 <__libc_init_array+0x38>)
 8000ca2:	4c0d      	ldr	r4, [pc, #52]	; (8000cd8 <__libc_init_array+0x3c>)
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	42a6      	cmp	r6, r4
 8000caa:	d109      	bne.n	8000cc0 <__libc_init_array+0x24>
 8000cac:	f000 f81a 	bl	8000ce4 <_init>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	4d0a      	ldr	r5, [pc, #40]	; (8000cdc <__libc_init_array+0x40>)
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ce0 <__libc_init_array+0x44>)
 8000cb6:	1b64      	subs	r4, r4, r5
 8000cb8:	10a4      	asrs	r4, r4, #2
 8000cba:	42a6      	cmp	r6, r4
 8000cbc:	d105      	bne.n	8000cca <__libc_init_array+0x2e>
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc4:	4798      	blx	r3
 8000cc6:	3601      	adds	r6, #1
 8000cc8:	e7ee      	b.n	8000ca8 <__libc_init_array+0xc>
 8000cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cce:	4798      	blx	r3
 8000cd0:	3601      	adds	r6, #1
 8000cd2:	e7f2      	b.n	8000cba <__libc_init_array+0x1e>
 8000cd4:	08000cfc 	.word	0x08000cfc
 8000cd8:	08000cfc 	.word	0x08000cfc
 8000cdc:	08000cfc 	.word	0x08000cfc
 8000ce0:	08000d00 	.word	0x08000d00

08000ce4 <_init>:
 8000ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce6:	bf00      	nop
 8000ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cea:	bc08      	pop	{r3}
 8000cec:	469e      	mov	lr, r3
 8000cee:	4770      	bx	lr

08000cf0 <_fini>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	bf00      	nop
 8000cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf6:	bc08      	pop	{r3}
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	4770      	bx	lr
