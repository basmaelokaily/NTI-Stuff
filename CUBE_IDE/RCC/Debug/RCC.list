
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000371  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a9  00000000  00000000  00010791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000000cc  00000000  00000000  0001093a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000070  00000000  00000000  00010a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000048  00000000  00000000  00010a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000121d  00000000  00000000  00010ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000005c3  00000000  00000000  00011cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000040e3  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000b0  00000000  00000000  00016384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000394 	.word	0x08000394

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000394 	.word	0x08000394

08000170 <MRCC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void MRCC_voidInit(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
		
		#if 	CLOCK_TYPE == HSI
		               /* internal 8 MHZ RC oscillator  */
	 	 	 	SET_BIT(MRCC->CR,CR_HSION );          /*	HSI clock enable	*/
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <MRCC_voidInit+0x40>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <MRCC_voidInit+0x40>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
				
				while(GET_BIT(MRCC->CR,CR_HSIRDY)==0);/*	HSI Ready Flag		        */
 8000180:	bf00      	nop
 8000182:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <MRCC_voidInit+0x40>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f003 0302 	and.w	r3, r3, #2
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <MRCC_voidInit+0x12>

				CLEAR_BIT(MRCC->CFGR,0);              /*HSI selected as system clock ---sw */
 800018e:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <MRCC_voidInit+0x40>)
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <MRCC_voidInit+0x40>)
 8000194:	f023 0301 	bic.w	r3, r3, #1
 8000198:	6053      	str	r3, [r2, #4]
				CLEAR_BIT(MRCC->CFGR,1);
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <MRCC_voidInit+0x40>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <MRCC_voidInit+0x40>)
 80001a0:	f023 0302 	bic.w	r3, r3, #2
 80001a4:	6053      	str	r3, [r2, #4]
				
		#else
				#warning	"Wrong clock security system configuration choice!"
		#endif
		
}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	40021000 	.word	0x40021000

080001b4 <MRCC_enumSetPeripheralClock>:

ErrorStatus MRCC_enumSetPeripheralClock(uint8 Copy_u8PeripheralBus , uint8 Copy_u8PeripheralName , uint8 Copy_u8PeripheralState )
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
 80001be:	460b      	mov	r3, r1
 80001c0:	71bb      	strb	r3, [r7, #6]
 80001c2:	4613      	mov	r3, r2
 80001c4:	717b      	strb	r3, [r7, #5]
	ErrorStatus	LOC_enumstate = ES_OK ;
 80001c6:	2301      	movs	r3, #1
 80001c8:	73fb      	strb	r3, [r7, #15]
	switch( Copy_u8PeripheralState )
 80001ca:	797b      	ldrb	r3, [r7, #5]
 80001cc:	2b03      	cmp	r3, #3
 80001ce:	d063      	beq.n	8000298 <MRCC_enumSetPeripheralClock+0xe4>
 80001d0:	2b03      	cmp	r3, #3
 80001d2:	dc7e      	bgt.n	80002d2 <MRCC_enumSetPeripheralClock+0x11e>
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d002      	beq.n	80001de <MRCC_enumSetPeripheralClock+0x2a>
 80001d8:	2b02      	cmp	r3, #2
 80001da:	d02d      	beq.n	8000238 <MRCC_enumSetPeripheralClock+0x84>
 80001dc:	e079      	b.n	80002d2 <MRCC_enumSetPeripheralClock+0x11e>
	{
		case	RCC_ENABLE 	:
							switch( Copy_u8PeripheralBus )
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b03      	cmp	r3, #3
 80001e2:	d01c      	beq.n	800021e <MRCC_enumSetPeripheralClock+0x6a>
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	dc25      	bgt.n	8000234 <MRCC_enumSetPeripheralClock+0x80>
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d002      	beq.n	80001f2 <MRCC_enumSetPeripheralClock+0x3e>
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d00b      	beq.n	8000208 <MRCC_enumSetPeripheralClock+0x54>
							{	
								case AHB  :	SET_BIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
								case APB1 :	SET_BIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
								case APB2 : SET_BIT(MRCC->APB2ENR  , Copy_u8PeripheralName  );break;
								default	  :	break;
 80001f0:	e020      	b.n	8000234 <MRCC_enumSetPeripheralClock+0x80>
								case AHB  :	SET_BIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
 80001f2:	4b3b      	ldr	r3, [pc, #236]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	79ba      	ldrb	r2, [r7, #6]
 80001f8:	2101      	movs	r1, #1
 80001fa:	fa01 f202 	lsl.w	r2, r1, r2
 80001fe:	4611      	mov	r1, r2
 8000200:	4a37      	ldr	r2, [pc, #220]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 8000202:	430b      	orrs	r3, r1
 8000204:	6153      	str	r3, [r2, #20]
 8000206:	e016      	b.n	8000236 <MRCC_enumSetPeripheralClock+0x82>
								case APB1 :	SET_BIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
 8000208:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 800020a:	69db      	ldr	r3, [r3, #28]
 800020c:	79ba      	ldrb	r2, [r7, #6]
 800020e:	2101      	movs	r1, #1
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a32      	ldr	r2, [pc, #200]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 8000218:	430b      	orrs	r3, r1
 800021a:	61d3      	str	r3, [r2, #28]
 800021c:	e00b      	b.n	8000236 <MRCC_enumSetPeripheralClock+0x82>
								case APB2 : SET_BIT(MRCC->APB2ENR  , Copy_u8PeripheralName  );break;
 800021e:	4b30      	ldr	r3, [pc, #192]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	2101      	movs	r1, #1
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	4611      	mov	r1, r2
 800022c:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 800022e:	430b      	orrs	r3, r1
 8000230:	6193      	str	r3, [r2, #24]
 8000232:	e000      	b.n	8000236 <MRCC_enumSetPeripheralClock+0x82>
								default	  :	break;
 8000234:	bf00      	nop
							}
							break;
 8000236:	e04c      	b.n	80002d2 <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_DISABLE :	
							switch( Copy_u8PeripheralBus )
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d01e      	beq.n	800027c <MRCC_enumSetPeripheralClock+0xc8>
 800023e:	2b03      	cmp	r3, #3
 8000240:	dc28      	bgt.n	8000294 <MRCC_enumSetPeripheralClock+0xe0>
 8000242:	2b01      	cmp	r3, #1
 8000244:	d002      	beq.n	800024c <MRCC_enumSetPeripheralClock+0x98>
 8000246:	2b02      	cmp	r3, #2
 8000248:	d00c      	beq.n	8000264 <MRCC_enumSetPeripheralClock+0xb0>
								case APB1 :	CLEAR_BIT(  MRCC->APB1ENR , Copy_u8PeripheralName );
								break;
								case APB2 : CLEAR_BIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
								break;
								default	  :	
								break;
 800024a:	e023      	b.n	8000294 <MRCC_enumSetPeripheralClock+0xe0>
								case AHB  :	CLEAR_BIT( MRCC->AHBENR  , Copy_u8PeripheralName   );
 800024c:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	79ba      	ldrb	r2, [r7, #6]
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	43d2      	mvns	r2, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a20      	ldr	r2, [pc, #128]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 800025e:	400b      	ands	r3, r1
 8000260:	6153      	str	r3, [r2, #20]
								break;
 8000262:	e018      	b.n	8000296 <MRCC_enumSetPeripheralClock+0xe2>
								case APB1 :	CLEAR_BIT(  MRCC->APB1ENR , Copy_u8PeripheralName );
 8000264:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 8000266:	69db      	ldr	r3, [r3, #28]
 8000268:	79ba      	ldrb	r2, [r7, #6]
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	43d2      	mvns	r2, r2
 8000272:	4611      	mov	r1, r2
 8000274:	4a1a      	ldr	r2, [pc, #104]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 8000276:	400b      	ands	r3, r1
 8000278:	61d3      	str	r3, [r2, #28]
								break;
 800027a:	e00c      	b.n	8000296 <MRCC_enumSetPeripheralClock+0xe2>
								case APB2 : CLEAR_BIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	79ba      	ldrb	r2, [r7, #6]
 8000282:	2101      	movs	r1, #1
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 800028e:	400b      	ands	r3, r1
 8000290:	6193      	str	r3, [r2, #24]
								break;
 8000292:	e000      	b.n	8000296 <MRCC_enumSetPeripheralClock+0xe2>
								break;
 8000294:	bf00      	nop
							}
							break;
 8000296:	e01c      	b.n	80002d2 <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_RESET	:	
							switch( Copy_u8PeripheralBus )
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d002      	beq.n	80002a4 <MRCC_enumSetPeripheralClock+0xf0>
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d00b      	beq.n	80002ba <MRCC_enumSetPeripheralClock+0x106>
							{	
								case APB1 :	SET_BIT( MRCC->APB1RSTR , Copy_u8PeripheralName   );break;
								case APB2 : SET_BIT( MRCC->APB2RSTR , Copy_u8PeripheralName );break;
								default	  :	break;
 80002a2:	e015      	b.n	80002d0 <MRCC_enumSetPeripheralClock+0x11c>
								case APB1 :	SET_BIT( MRCC->APB1RSTR , Copy_u8PeripheralName   );break;
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	79ba      	ldrb	r2, [r7, #6]
 80002aa:	2101      	movs	r1, #1
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	4611      	mov	r1, r2
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 80002b4:	430b      	orrs	r3, r1
 80002b6:	6113      	str	r3, [r2, #16]
 80002b8:	e00a      	b.n	80002d0 <MRCC_enumSetPeripheralClock+0x11c>
								case APB2 : SET_BIT( MRCC->APB2RSTR , Copy_u8PeripheralName );break;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	79ba      	ldrb	r2, [r7, #6]
 80002c0:	2101      	movs	r1, #1
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	4611      	mov	r1, r2
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <MRCC_enumSetPeripheralClock+0x12c>)
 80002ca:	430b      	orrs	r3, r1
 80002cc:	60d3      	str	r3, [r2, #12]
 80002ce:	bf00      	nop
							}
							break;
 80002d0:	bf00      	nop
	}

	return LOC_enumstate;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
    /* Loop forever */
	MRCC_voidInit();
 80002e8:	f7ff ff42 	bl	8000170 <MRCC_voidInit>
	MRCC_enumSetPeripheralClock(APB2 , IOPAEN_ID, RCC_ENABLE );//////////////IOPAEN_ID not yet implemented
 80002ec:	2201      	movs	r2, #1
 80002ee:	2102      	movs	r1, #2
 80002f0:	2003      	movs	r0, #3
 80002f2:	f7ff ff5f 	bl	80001b4 <MRCC_enumSetPeripheralClock>
	for(;;);
 80002f6:	e7fe      	b.n	80002f6 <main+0x12>

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ffdb 	bl	80002e4 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC1_2_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	2600      	movs	r6, #0
 8000350:	4d0c      	ldr	r5, [pc, #48]	; (8000384 <__libc_init_array+0x38>)
 8000352:	4c0d      	ldr	r4, [pc, #52]	; (8000388 <__libc_init_array+0x3c>)
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	f000 f81a 	bl	8000394 <_init>
 8000360:	2600      	movs	r6, #0
 8000362:	4d0a      	ldr	r5, [pc, #40]	; (800038c <__libc_init_array+0x40>)
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <__libc_init_array+0x44>)
 8000366:	1b64      	subs	r4, r4, r5
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
