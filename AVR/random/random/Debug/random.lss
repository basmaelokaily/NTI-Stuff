
random.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000686  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c5  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000307  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "TIMER0.h"

int main(void)
{
    /* Replace with your application code */
	TIMER0_CTCMOD_INIT(249);
  6c:	89 ef       	ldi	r24, 0xF9	; 249
  6e:	0e 94 3c 00 	call	0x78	; 0x78 <TIMER0_CTCMOD_INIT>
	TIMER_START();
  72:	0e 94 4d 00 	call	0x9a	; 0x9a <TIMER_START>
  76:	ff cf       	rjmp	.-2      	; 0x76 <main+0xa>

00000078 <TIMER0_CTCMOD_INIT>:
parameters: void
return_type: void
************************************/
void TIMER0_CTCMOD_INIT(uint8_t ocr)
{
	PORTD0_output;
  78:	91 b3       	in	r25, 0x11	; 17
  7a:	91 60       	ori	r25, 0x01	; 1
  7c:	91 bb       	out	0x11, r25	; 17
	//SETBIT(TCCR0, CS00);
	SETBIT(TCCR0, CS02);
  7e:	93 b7       	in	r25, 0x33	; 51
  80:	94 60       	ori	r25, 0x04	; 4
  82:	93 bf       	out	0x33, r25	; 51
	SETBIT(TCCR0, FOC0);
  84:	93 b7       	in	r25, 0x33	; 51
  86:	90 68       	ori	r25, 0x80	; 128
  88:	93 bf       	out	0x33, r25	; 51
	SETBIT(TCCR0, WGM01);
  8a:	93 b7       	in	r25, 0x33	; 51
  8c:	98 60       	ori	r25, 0x08	; 8
  8e:	93 bf       	out	0x33, r25	; 51
	SETBIT(TCCR0, COM00);
  90:	93 b7       	in	r25, 0x33	; 51
  92:	90 61       	ori	r25, 0x10	; 16
  94:	93 bf       	out	0x33, r25	; 51
	OCR0 = ocr;
  96:	8c bf       	out	0x3c, r24	; 60
  98:	08 95       	ret

0000009a <TIMER_START>:
	//SETBIT(SREG, 7);
}
void TIMER_START()
{
	//256 pre-scaler
	SETBIT(TCCR0, CS02);
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  a0:	12 be       	out	0x32, r1	; 50
  a2:	08 95       	ret

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
