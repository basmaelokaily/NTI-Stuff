
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000648  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f4  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002c  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	TIMER1_PWM_OC1A_INIT();
  6c:	0e 94 42 00 	call	0x84	; 0x84 <TIMER1_PWM_OC1A_INIT>
	TCNT1=0;
  70:	1d bc       	out	0x2d, r1	; 45
  72:	1c bc       	out	0x2c, r1	; 44
	DDRB|=(1<<DDB1);
  74:	87 b3       	in	r24, 0x17	; 23
  76:	82 60       	ori	r24, 0x02	; 2
  78:	87 bb       	out	0x17, r24	; 23
	
    /* Replace with your application code */
    while (1) 
    {
		OCR1A = 16000;
  7a:	80 e8       	ldi	r24, 0x80	; 128
  7c:	9e e3       	ldi	r25, 0x3E	; 62
  7e:	9b bd       	out	0x2b, r25	; 43
  80:	8a bd       	out	0x2a, r24	; 42
  82:	fb cf       	rjmp	.-10     	; 0x7a <main+0xe>

00000084 <TIMER1_PWM_OC1A_INIT>:
return_type: void
************************************/

void TIMER1_PWM_OC1A_INIT(void)
{
	SETBIT(DDRD, 5);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 62       	ori	r24, 0x20	; 32
  88:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, 4);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 61       	ori	r24, 0x10	; 16
  8e:	81 bb       	out	0x11, r24	; 17
	SETBIT(TCCR1A, COM1A1);
  90:	8f b5       	in	r24, 0x2f	; 47
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1A, COM1B1);
  96:	8f b5       	in	r24, 0x2f	; 47
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1A, WGM11);	
  9c:	8f b5       	in	r24, 0x2f	; 47
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1A, WGM12);
  a2:	8f b5       	in	r24, 0x2f	; 47
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1B, WGM13);
  a8:	8e b5       	in	r24, 0x2e	; 46
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TCCR1B, CS11);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	97 bd       	out	0x27, r25	; 39
  ba:	86 bd       	out	0x26, r24	; 38
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
