
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000731  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000363  00000000  00000000  0000101d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include "uart_int.h"

int main(void)
{
	USART_Init();
  82:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	USART_STRING_SYNC("PROJECT IS BUILT");
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_STRING_SYNC>
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0xc>

00000090 <USART_Init>:
/****************************************************************/
uint8_t USART_Receive_SYNC(void)
{
	while(READBIT(UCSRA, RXC) == 0);
	return UDR;
}
  90:	80 b5       	in	r24, 0x20	; 32
  92:	80 68       	ori	r24, 0x80	; 128
  94:	80 bd       	out	0x20, r24	; 32
  96:	80 b5       	in	r24, 0x20	; 32
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	80 bd       	out	0x20, r24	; 32
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	80 b5       	in	r24, 0x20	; 32
  a4:	8f 7e       	andi	r24, 0xEF	; 239
  a6:	80 bd       	out	0x20, r24	; 32
  a8:	80 b5       	in	r24, 0x20	; 32
  aa:	8f 7d       	andi	r24, 0xDF	; 223
  ac:	80 bd       	out	0x20, r24	; 32
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	80 b5       	in	r24, 0x20	; 32
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	80 b5       	in	r24, 0x20	; 32
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	80 bd       	out	0x20, r24	; 32
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	80 b5       	in	r24, 0x20	; 32
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	80 bd       	out	0x20, r24	; 32
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 bd       	out	0x20, r24	; 32
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	80 bd       	out	0x20, r24	; 32
  d8:	80 b5       	in	r24, 0x20	; 32
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	80 bd       	out	0x20, r24	; 32
  de:	80 b5       	in	r24, 0x20	; 32
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	80 bd       	out	0x20, r24	; 32
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	89 b9       	out	0x09, r24	; 9
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	8a b9       	out	0x0a, r24	; 10
  f4:	08 95       	ret

000000f6 <USART_Transmit_SYNC>:
  f6:	8c b9       	out	0x0c, r24	; 12
  f8:	5e 9b       	sbis	0x0b, 6	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <USART_Transmit_SYNC+0x2>
  fc:	08 95       	ret

000000fe <USART_STRING_SYNC>:

void USART_STRING_SYNC( uint8_t* data )
{	
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	8c 01       	movw	r16, r24
	uint8_t i;
	i=0;
 106:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] !=  '\0' )
 108:	0c c0       	rjmp	.+24     	; 0x122 <USART_STRING_SYNC+0x24>
	{
		USART_Transmit_SYNC(data[i]);
 10a:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_Transmit_SYNC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <USART_STRING_SYNC+0x16>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <USART_STRING_SYNC+0x20>
 11e:	00 00       	nop
		_delay_ms(100);
	    /*UDR=data[i];
		while(READBIT(UCSRA, TXC) == 0);*/
		i++;	
 120:	cf 5f       	subi	r28, 0xFF	; 255

void USART_STRING_SYNC( uint8_t* data )
{	
	uint8_t i;
	i=0;
	while(data[i] !=  '\0' )
 122:	f8 01       	movw	r30, r16
 124:	ec 0f       	add	r30, r28
 126:	f1 1d       	adc	r31, r1
 128:	80 81       	ld	r24, Z
 12a:	81 11       	cpse	r24, r1
 12c:	ee cf       	rjmp	.-36     	; 0x10a <USART_STRING_SYNC+0xc>
		while(READBIT(UCSRA, TXC) == 0);*/
		i++;	
	}
	
	
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
