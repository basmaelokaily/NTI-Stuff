
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800060  00800060  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af0  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078b  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c2  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 37       	cpi	r26, 0x78	; 120
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  74:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GI_voidEnable>:
#include "GI_interface.h"
#include "GI_register.h"

void GI_voidEnable (void)
{
	SETBIT(SREG,I);
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63
  82:	08 95       	ret

00000084 <rled>:
    }
}

void rled(void)
{
	TOGBIT(PORTB, 7);
  84:	88 b3       	in	r24, 0x18	; 24
  86:	80 58       	subi	r24, 0x80	; 128
  88:	88 bb       	out	0x18, r24	; 24
  8a:	08 95       	ret

0000008c <gled>:
}
void gled(void)
{
	TOGBIT(PORTA, 4);
  8c:	9b b3       	in	r25, 0x1b	; 27
  8e:	80 e1       	ldi	r24, 0x10	; 16
  90:	89 27       	eor	r24, r25
  92:	8b bb       	out	0x1b, r24	; 27
  94:	08 95       	ret

00000096 <bled>:
}
void bled(void)
{
	TOGBIT(PORTA, 5);
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	89 27       	eor	r24, r25
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret

000000a0 <main>:



int main(void)
{
	SETBIT(DDRC, 0);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRB, 7);
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	87 bb       	out	0x17, r24	; 23
	SETBIT(DDRA, 4);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8a bb       	out	0x1a, r24	; 26
	SETBIT(DDRA, 5);
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	8a bb       	out	0x1a, r24	; 26
	RTOS_KERNEL_voidCreateTask(0, 1000, rled);
  b8:	42 e4       	ldi	r20, 0x42	; 66
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	68 ee       	ldi	r22, 0xE8	; 232
  be:	73 e0       	ldi	r23, 0x03	; 3
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 ba 00 	call	0x174	; 0x174 <RTOS_KERNEL_voidCreateTask>
	RTOS_KERNEL_voidCreateTask(1, 2000, gled);
  c6:	46 e4       	ldi	r20, 0x46	; 70
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	60 ed       	ldi	r22, 0xD0	; 208
  cc:	77 e0       	ldi	r23, 0x07	; 7
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 ba 00 	call	0x174	; 0x174 <RTOS_KERNEL_voidCreateTask>
	RTOS_KERNEL_voidCreateTask(2, 3000, bled);
  d4:	4b e4       	ldi	r20, 0x4B	; 75
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	68 eb       	ldi	r22, 0xB8	; 184
  da:	7b e0       	ldi	r23, 0x0B	; 11
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 ba 00 	call	0x174	; 0x174 <RTOS_KERNEL_voidCreateTask>
	RTOS_KERNEL_startScheduling();
  e2:	0e 94 ab 00 	call	0x156	; 0x156 <RTOS_KERNEL_startScheduling>
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x46>

000000e8 <private_void_scheduler>:
		return fail;
	}
}

static void private_void_scheduler(void)
{
  e8:	cf 93       	push	r28
	static u16 Local_TickCount = 0;
	Local_TickCount ++;
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	u8 Local_taskcount;
	for(Local_taskcount = 0; Local_taskcount < RTOS_KERNEL_TASK_NUM; Local_taskcount++)
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	27 c0       	rjmp	.+78     	; 0x14e <private_void_scheduler+0x66>
	{
		if(Local_TickCount % (private_arroftasks[Local_taskcount].periodcity == 0) && (private_arroftasks[Local_taskcount].ptr_to_task_func != nullptr_t))
 100:	2c 2f       	mov	r18, r28
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 59       	subi	r30, 0x9E	; 158
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	89 2b       	or	r24, r25
 11c:	11 f0       	breq	.+4      	; 0x122 <private_void_scheduler+0x3a>
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12a:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodhi4>
 12e:	89 2b       	or	r24, r25
 130:	69 f0       	breq	.+26     	; 0x14c <private_void_scheduler+0x64>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	f9 01       	movw	r30, r18
 13c:	ee 59       	subi	r30, 0x9E	; 158
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	02 80       	ldd	r0, Z+2	; 0x02
 142:	f3 81       	ldd	r31, Z+3	; 0x03
 144:	e0 2d       	mov	r30, r0
 146:	30 97       	sbiw	r30, 0x00	; 0
 148:	09 f0       	breq	.+2      	; 0x14c <private_void_scheduler+0x64>
		{
			private_arroftasks[Local_taskcount].ptr_to_task_func();
 14a:	09 95       	icall
static void private_void_scheduler(void)
{
	static u16 Local_TickCount = 0;
	Local_TickCount ++;
	u8 Local_taskcount;
	for(Local_taskcount = 0; Local_taskcount < RTOS_KERNEL_TASK_NUM; Local_taskcount++)
 14c:	cf 5f       	subi	r28, 0xFF	; 255
 14e:	c5 30       	cpi	r28, 0x05	; 5
 150:	b8 f2       	brcs	.-82     	; 0x100 <private_void_scheduler+0x18>
		{
			
		}
	}
	
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <RTOS_KERNEL_startScheduling>:
static Task_t private_arroftasks[RTOS_KERNEL_TASK_NUM];

void RTOS_KERNEL_startScheduling(void)
{
	
	RTOS_TMR_voidInit();
 156:	0e 94 d7 00 	call	0x1ae	; 0x1ae <RTOS_TMR_voidInit>
	RTOS_TMR_voidSetCompareMatchValue(249);
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <RTOS_TMR_voidSetCompareMatchValue>
	RTOS_TMR_voidSetCallBackCTC(private_void_scheduler);
 162:	84 e7       	ldi	r24, 0x74	; 116
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <RTOS_TMR_voidSetCallBackCTC>
	GI_voidEnable();
 16a:	0e 94 3e 00 	call	0x7c	; 0x7c <GI_voidEnable>
	RTOS_TMR_voidStart();	
 16e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <RTOS_TMR_voidStart>
 172:	08 95       	ret

00000174 <RTOS_KERNEL_voidCreateTask>:
}
void RTOS_KERNEL_voidCreateTask(u8 taskpriority, u16 copy_task_periodcity, void(*ptr_to_func)(void))
{
	if((taskpriority < RTOS_KERNEL_TASK_NUM) && (ptr_to_func != nullptr_t) && (private_arroftasks[taskpriority].ptr_to_task_func == nullptr_t))
 174:	85 30       	cpi	r24, 0x05	; 5
 176:	d0 f4       	brcc	.+52     	; 0x1ac <RTOS_KERNEL_voidCreateTask+0x38>
 178:	41 15       	cp	r20, r1
 17a:	51 05       	cpc	r21, r1
 17c:	b9 f0       	breq	.+46     	; 0x1ac <RTOS_KERNEL_voidCreateTask+0x38>
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 59       	subi	r30, 0x9E	; 158
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	33 81       	ldd	r19, Z+3	; 0x03
 192:	23 2b       	or	r18, r19
 194:	59 f4       	brne	.+22     	; 0x1ac <RTOS_KERNEL_voidCreateTask+0x38>
	{
		private_arroftasks[taskpriority].periodcity = copy_task_periodcity;
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	fc 01       	movw	r30, r24
 1a0:	ee 59       	subi	r30, 0x9E	; 158
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	71 83       	std	Z+1, r23	; 0x01
 1a6:	60 83       	st	Z, r22
		private_arroftasks[taskpriority].ptr_to_task_func = ptr_to_func;
 1a8:	53 83       	std	Z+3, r21	; 0x03
 1aa:	42 83       	std	Z+2, r20	; 0x02
 1ac:	08 95       	ret

000001ae <RTOS_TMR_voidInit>:

void RTOS_TMR_voidStop(void)
{
	CLRBIT(TCCR2,CS20);
	CLRBIT(TCCR2,CS21);
	CLRBIT(TCCR2,CS22);
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	8f 7b       	andi	r24, 0xBF	; 191
 1b2:	85 bd       	out	0x25, r24	; 37
 1b4:	85 b5       	in	r24, 0x25	; 37
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	85 bd       	out	0x25, r24	; 37
 1ba:	89 b7       	in	r24, 0x39	; 57
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	89 bf       	out	0x39, r24	; 57
 1c0:	08 95       	ret

000001c2 <RTOS_TMR_voidStart>:
 1c2:	85 b5       	in	r24, 0x25	; 37
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	85 bd       	out	0x25, r24	; 37
 1c8:	85 b5       	in	r24, 0x25	; 37
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
 1cc:	85 bd       	out	0x25, r24	; 37
 1ce:	85 b5       	in	r24, 0x25	; 37
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	85 bd       	out	0x25, r24	; 37
 1d4:	08 95       	ret

000001d6 <RTOS_TMR_voidSetCallBackCTC>:
}


void RTOS_TMR_voidSetCallBackCTC(void(*ptrToFun)(void))
{
	if(ptrToFun!=nullptr_t)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	21 f0       	breq	.+8      	; 0x1e2 <RTOS_TMR_voidSetCallBackCTC+0xc>
	{
		private_pCallBackCTC = ptrToFun;
 1da:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <private_pCallBackCTC+0x1>
 1de:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <private_pCallBackCTC>
 1e2:	08 95       	ret

000001e4 <RTOS_TMR_voidSetCompareMatchValue>:
}


void RTOS_TMR_voidSetCompareMatchValue(u8 copy_u8CompareValue)
{
	OCR2 = copy_u8CompareValue;
 1e4:	83 bd       	out	0x23, r24	; 35
 1e6:	08 95       	ret

000001e8 <__vector_4>:
}

void __vector_4(void) __attribute__ ((signal));
void __vector_4(void)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
	if(private_pCallBackCTC != nullptr_t)
 20a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <private_pCallBackCTC>
 20e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <private_pCallBackCTC+0x1>
 212:	30 97       	sbiw	r30, 0x00	; 0
 214:	09 f0       	breq	.+2      	; 0x218 <__vector_4+0x30>
	{
		private_pCallBackCTC();
 216:	09 95       	icall
	}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
