
Traffic_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000219e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000219e  00002232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045d  0080007e  0080007e  00002250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052ed  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c9  00000000  00000000  000079c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003333  00000000  00000000  00008a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cac  00000000  00000000  0000bdc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001757  00000000  00000000  0000ca74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000535f  00000000  00000000  0000e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0001352a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	06 10       	cpse	r0, r6
      56:	13 10       	cpse	r1, r3
      58:	20 10       	cpse	r2, r0
      5a:	2d 10       	cpse	r2, r13
      5c:	3a 10       	cpse	r3, r10
      5e:	47 10       	cpse	r4, r7
      60:	54 10       	cpse	r5, r4
      62:	61 10       	cpse	r6, r1
      64:	6e 10       	cpse	r6, r14
      66:	7b 10       	cpse	r7, r11

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ee e9       	ldi	r30, 0x9E	; 158
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 37       	cpi	r26, 0x7E	; 126
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ae e7       	ldi	r26, 0x7E	; 126
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3d       	cpi	r26, 0xDB	; 219
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <main>
      9e:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      ac:	0e 94 7c 07 	call	0xef8	; 0xef8 <vTaskSuspendAll>
	{
		/* Check_Password there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      b0:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <__data_end>
      b4:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <__data_end+0x1>
      b8:	c9 01       	movw	r24, r18
      ba:	8c 0f       	add	r24, r28
      bc:	9d 1f       	adc	r25, r29
      be:	88 3e       	cpi	r24, 0xE8	; 232
      c0:	43 e0       	ldi	r20, 0x03	; 3
      c2:	94 07       	cpc	r25, r20
      c4:	58 f4       	brcc	.+22     	; 0xdc <pvPortMalloc+0x36>
      c6:	28 17       	cp	r18, r24
      c8:	39 07       	cpc	r19, r25
      ca:	58 f4       	brcc	.+22     	; 0xe2 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check_Password for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      cc:	e9 01       	movw	r28, r18
      ce:	c0 58       	subi	r28, 0x80	; 128
      d0:	df 4f       	sbci	r29, 0xFF	; 255
			xNextFreeByte += xWantedSize;			
      d2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
      d6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
      da:	05 c0       	rjmp	.+10     	; 0xe6 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      dc:	c0 e0       	ldi	r28, 0x00	; 0
      de:	d0 e0       	ldi	r29, 0x00	; 0
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <pvPortMalloc+0x40>
      e2:	c0 e0       	ldi	r28, 0x00	; 0
      e4:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
      e6:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
      ea:	ce 01       	movw	r24, r28
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
      f2:	08 95       	ret

000000f4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      f4:	fc 01       	movw	r30, r24
      f6:	03 96       	adiw	r24, 0x03	; 3
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	81 83       	std	Z+1, r24	; 0x01
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3f ef       	ldi	r19, 0xFF	; 255
     100:	34 83       	std	Z+4, r19	; 0x04
     102:	23 83       	std	Z+3, r18	; 0x03
     104:	96 83       	std	Z+6, r25	; 0x06
     106:	85 83       	std	Z+5, r24	; 0x05
     108:	90 87       	std	Z+8, r25	; 0x08
     10a:	87 83       	std	Z+7, r24	; 0x07
     10c:	10 82       	st	Z, r1
     10e:	08 95       	ret

00000110 <vListInitialiseItem>:
     110:	fc 01       	movw	r30, r24
     112:	11 86       	std	Z+9, r1	; 0x09
     114:	10 86       	std	Z+8, r1	; 0x08
     116:	08 95       	ret

00000118 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     11e:	48 81       	ld	r20, Y
     120:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     122:	4f 3f       	cpi	r20, 0xFF	; 255
     124:	2f ef       	ldi	r18, 0xFF	; 255
     126:	52 07       	cpc	r21, r18
     128:	21 f4       	brne	.+8      	; 0x132 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     12a:	fc 01       	movw	r30, r24
     12c:	a7 81       	ldd	r26, Z+7	; 0x07
     12e:	b0 85       	ldd	r27, Z+8	; 0x08
     130:	0d c0       	rjmp	.+26     	; 0x14c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     132:	dc 01       	movw	r26, r24
     134:	13 96       	adiw	r26, 0x03	; 3
     136:	01 c0       	rjmp	.+2      	; 0x13a <vListInsert+0x22>
     138:	df 01       	movw	r26, r30
     13a:	12 96       	adiw	r26, 0x02	; 2
     13c:	ed 91       	ld	r30, X+
     13e:	fc 91       	ld	r31, X
     140:	13 97       	sbiw	r26, 0x03	; 3
     142:	20 81       	ld	r18, Z
     144:	31 81       	ldd	r19, Z+1	; 0x01
     146:	42 17       	cp	r20, r18
     148:	53 07       	cpc	r21, r19
     14a:	b0 f7       	brcc	.-20     	; 0x138 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	ed 91       	ld	r30, X+
     150:	fc 91       	ld	r31, X
     152:	13 97       	sbiw	r26, 0x03	; 3
     154:	fb 83       	std	Y+3, r31	; 0x03
     156:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     158:	d5 83       	std	Z+5, r29	; 0x05
     15a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     15c:	bd 83       	std	Y+5, r27	; 0x05
     15e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     160:	13 96       	adiw	r26, 0x03	; 3
     162:	dc 93       	st	X, r29
     164:	ce 93       	st	-X, r28
     166:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     168:	99 87       	std	Y+9, r25	; 0x09
     16a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     16c:	fc 01       	movw	r30, r24
     16e:	20 81       	ld	r18, Z
     170:	2f 5f       	subi	r18, 0xFF	; 255
     172:	20 83       	st	Z, r18
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     180:	a0 85       	ldd	r26, Z+8	; 0x08
     182:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     184:	c2 81       	ldd	r28, Z+2	; 0x02
     186:	d3 81       	ldd	r29, Z+3	; 0x03
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
     18c:	9d 83       	std	Y+5, r25	; 0x05
     18e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     190:	c4 81       	ldd	r28, Z+4	; 0x04
     192:	d5 81       	ldd	r29, Z+5	; 0x05
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	9b 83       	std	Y+3, r25	; 0x03
     19a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     19c:	11 96       	adiw	r26, 0x01	; 1
     19e:	8d 91       	ld	r24, X+
     1a0:	9c 91       	ld	r25, X
     1a2:	12 97       	sbiw	r26, 0x02	; 2
     1a4:	e8 17       	cp	r30, r24
     1a6:	f9 07       	cpc	r31, r25
     1a8:	31 f4       	brne	.+12     	; 0x1b6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     1aa:	84 81       	ldd	r24, Z+4	; 0x04
     1ac:	95 81       	ldd	r25, Z+5	; 0x05
     1ae:	12 96       	adiw	r26, 0x02	; 2
     1b0:	9c 93       	st	X, r25
     1b2:	8e 93       	st	-X, r24
     1b4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1b6:	11 86       	std	Z+9, r1	; 0x09
     1b8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1ba:	8c 91       	ld	r24, X
     1bc:	81 50       	subi	r24, 0x01	; 1
     1be:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1c0:	8c 91       	ld	r24, X
}
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     1c8:	1b bc       	out	0x2b, r1	; 43
     1ca:	89 ef       	ldi	r24, 0xF9	; 249
     1cc:	8a bd       	out	0x2a, r24	; 42
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	8e bd       	out	0x2e, r24	; 46
     1d2:	89 b7       	in	r24, 0x39	; 57
     1d4:	80 61       	ori	r24, 0x10	; 16
     1d6:	89 bf       	out	0x39, r24	; 57
     1d8:	08 95       	ret

000001da <pxPortInitialiseStack>:
     1da:	31 e1       	ldi	r19, 0x11	; 17
     1dc:	fc 01       	movw	r30, r24
     1de:	30 83       	st	Z, r19
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	22 e2       	ldi	r18, 0x22	; 34
     1e4:	20 83       	st	Z, r18
     1e6:	31 97       	sbiw	r30, 0x01	; 1
     1e8:	a3 e3       	ldi	r26, 0x33	; 51
     1ea:	a0 83       	st	Z, r26
     1ec:	31 97       	sbiw	r30, 0x01	; 1
     1ee:	60 83       	st	Z, r22
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	70 83       	st	Z, r23
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	10 82       	st	Z, r1
     1f8:	31 97       	sbiw	r30, 0x01	; 1
     1fa:	60 e8       	ldi	r22, 0x80	; 128
     1fc:	60 83       	st	Z, r22
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	10 82       	st	Z, r1
     202:	31 97       	sbiw	r30, 0x01	; 1
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	60 83       	st	Z, r22
     208:	31 97       	sbiw	r30, 0x01	; 1
     20a:	63 e0       	ldi	r22, 0x03	; 3
     20c:	60 83       	st	Z, r22
     20e:	31 97       	sbiw	r30, 0x01	; 1
     210:	64 e0       	ldi	r22, 0x04	; 4
     212:	60 83       	st	Z, r22
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	65 e0       	ldi	r22, 0x05	; 5
     218:	60 83       	st	Z, r22
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	66 e0       	ldi	r22, 0x06	; 6
     21e:	60 83       	st	Z, r22
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	67 e0       	ldi	r22, 0x07	; 7
     224:	60 83       	st	Z, r22
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	68 e0       	ldi	r22, 0x08	; 8
     22a:	60 83       	st	Z, r22
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	69 e0       	ldi	r22, 0x09	; 9
     230:	60 83       	st	Z, r22
     232:	31 97       	sbiw	r30, 0x01	; 1
     234:	60 e1       	ldi	r22, 0x10	; 16
     236:	60 83       	st	Z, r22
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	30 83       	st	Z, r19
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	32 e1       	ldi	r19, 0x12	; 18
     240:	30 83       	st	Z, r19
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	33 e1       	ldi	r19, 0x13	; 19
     246:	30 83       	st	Z, r19
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	34 e1       	ldi	r19, 0x14	; 20
     24c:	30 83       	st	Z, r19
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	35 e1       	ldi	r19, 0x15	; 21
     252:	30 83       	st	Z, r19
     254:	31 97       	sbiw	r30, 0x01	; 1
     256:	36 e1       	ldi	r19, 0x16	; 22
     258:	30 83       	st	Z, r19
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	37 e1       	ldi	r19, 0x17	; 23
     25e:	30 83       	st	Z, r19
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	38 e1       	ldi	r19, 0x18	; 24
     264:	30 83       	st	Z, r19
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	39 e1       	ldi	r19, 0x19	; 25
     26a:	30 83       	st	Z, r19
     26c:	31 97       	sbiw	r30, 0x01	; 1
     26e:	30 e2       	ldi	r19, 0x20	; 32
     270:	30 83       	st	Z, r19
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	31 e2       	ldi	r19, 0x21	; 33
     276:	30 83       	st	Z, r19
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	23 e2       	ldi	r18, 0x23	; 35
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	40 83       	st	Z, r20
     286:	31 97       	sbiw	r30, 0x01	; 1
     288:	50 83       	st	Z, r21
     28a:	31 97       	sbiw	r30, 0x01	; 1
     28c:	26 e2       	ldi	r18, 0x26	; 38
     28e:	20 83       	st	Z, r18
     290:	31 97       	sbiw	r30, 0x01	; 1
     292:	27 e2       	ldi	r18, 0x27	; 39
     294:	20 83       	st	Z, r18
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	28 e2       	ldi	r18, 0x28	; 40
     29a:	20 83       	st	Z, r18
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	29 e2       	ldi	r18, 0x29	; 41
     2a0:	20 83       	st	Z, r18
     2a2:	31 97       	sbiw	r30, 0x01	; 1
     2a4:	20 e3       	ldi	r18, 0x30	; 48
     2a6:	20 83       	st	Z, r18
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	21 e3       	ldi	r18, 0x31	; 49
     2ac:	20 83       	st	Z, r18
     2ae:	86 97       	sbiw	r24, 0x26	; 38
     2b0:	08 95       	ret

000002b2 <xPortStartScheduler>:
     2b2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <prvSetupTimerInterrupt>
     2b6:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     2ba:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     2be:	cd 91       	ld	r28, X+
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	dd 91       	ld	r29, X+
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	ff 91       	pop	r31
     2c8:	ef 91       	pop	r30
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	7f 91       	pop	r23
     2d8:	6f 91       	pop	r22
     2da:	5f 91       	pop	r21
     2dc:	4f 91       	pop	r20
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	bf 90       	pop	r11
     2f0:	af 90       	pop	r10
     2f2:	9f 90       	pop	r9
     2f4:	8f 90       	pop	r8
     2f6:	7f 90       	pop	r7
     2f8:	6f 90       	pop	r6
     2fa:	5f 90       	pop	r5
     2fc:	4f 90       	pop	r4
     2fe:	3f 90       	pop	r3
     300:	2f 90       	pop	r2
     302:	1f 90       	pop	r1
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	08 95       	ret
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	08 95       	ret

00000310 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	0f 92       	push	r0
     318:	1f 92       	push	r1
     31a:	11 24       	eor	r1, r1
     31c:	2f 92       	push	r2
     31e:	3f 92       	push	r3
     320:	4f 92       	push	r4
     322:	5f 92       	push	r5
     324:	6f 92       	push	r6
     326:	7f 92       	push	r7
     328:	8f 92       	push	r8
     32a:	9f 92       	push	r9
     32c:	af 92       	push	r10
     32e:	bf 92       	push	r11
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	2f 93       	push	r18
     33e:	3f 93       	push	r19
     340:	4f 93       	push	r20
     342:	5f 93       	push	r21
     344:	6f 93       	push	r22
     346:	7f 93       	push	r23
     348:	8f 93       	push	r24
     34a:	9f 93       	push	r25
     34c:	af 93       	push	r26
     34e:	bf 93       	push	r27
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	ef 93       	push	r30
     356:	ff 93       	push	r31
     358:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     35c:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     360:	0d b6       	in	r0, 0x3d	; 61
     362:	0d 92       	st	X+, r0
     364:	0e b6       	in	r0, 0x3e	; 62
     366:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     368:	0e 94 87 09 	call	0x130e	; 0x130e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     36c:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     370:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     374:	cd 91       	ld	r28, X+
     376:	cd bf       	out	0x3d, r28	; 61
     378:	dd 91       	ld	r29, X+
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	6f 90       	pop	r6
     3b0:	5f 90       	pop	r5
     3b2:	4f 90       	pop	r4
     3b4:	3f 90       	pop	r3
     3b6:	2f 90       	pop	r2
     3b8:	1f 90       	pop	r1
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0

	asm volatile ( "ret" );
     3c0:	08 95       	ret

000003c2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	0f 92       	push	r0
     3ca:	1f 92       	push	r1
     3cc:	11 24       	eor	r1, r1
     3ce:	2f 92       	push	r2
     3d0:	3f 92       	push	r3
     3d2:	4f 92       	push	r4
     3d4:	5f 92       	push	r5
     3d6:	6f 92       	push	r6
     3d8:	7f 92       	push	r7
     3da:	8f 92       	push	r8
     3dc:	9f 92       	push	r9
     3de:	af 92       	push	r10
     3e0:	bf 92       	push	r11
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	2f 93       	push	r18
     3f0:	3f 93       	push	r19
     3f2:	4f 93       	push	r20
     3f4:	5f 93       	push	r21
     3f6:	6f 93       	push	r22
     3f8:	7f 93       	push	r23
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
     40a:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     40e:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     412:	0d b6       	in	r0, 0x3d	; 61
     414:	0d 92       	st	X+, r0
     416:	0e b6       	in	r0, 0x3e	; 62
     418:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     41a:	0e 94 82 07 	call	0xf04	; 0xf04 <xTaskIncrementTick>
     41e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     420:	0e 94 87 09 	call	0x130e	; 0x130e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     424:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     428:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     42c:	cd 91       	ld	r28, X+
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	dd 91       	ld	r29, X+
     432:	de bf       	out	0x3e, r29	; 62
     434:	ff 91       	pop	r31
     436:	ef 91       	pop	r30
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	7f 91       	pop	r23
     446:	6f 91       	pop	r22
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	9f 90       	pop	r9
     462:	8f 90       	pop	r8
     464:	7f 90       	pop	r7
     466:	6f 90       	pop	r6
     468:	5f 90       	pop	r5
     46a:	4f 90       	pop	r4
     46c:	3f 90       	pop	r3
     46e:	2f 90       	pop	r2
     470:	1f 90       	pop	r1
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0

	asm volatile ( "ret" );
     478:	08 95       	ret

0000047a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     47a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <vPortYieldFromTick>
		asm volatile ( "reti" );
     47e:	18 95       	reti

00000480 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     480:	dc 01       	movw	r26, r24
     482:	51 96       	adiw	r26, 0x11	; 17
     484:	2c 91       	ld	r18, X
     486:	51 97       	sbiw	r26, 0x11	; 17
     488:	22 23       	and	r18, r18
     48a:	41 f0       	breq	.+16     	; 0x49c <prvGetDisinheritPriorityAfterTimeout+0x1c>
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	ed 91       	ld	r30, X+
     490:	fc 91       	ld	r31, X
     492:	57 97       	sbiw	r26, 0x17	; 23
     494:	90 81       	ld	r25, Z
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	89 1b       	sub	r24, r25
     49a:	08 95       	ret
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret

000004a0 <prvIsQueueEmpty>:
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	0f 92       	push	r0
     4a6:	fc 01       	movw	r30, r24
     4a8:	82 8d       	ldd	r24, Z+26	; 0x1a
     4aa:	81 11       	cpse	r24, r1
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <prvIsQueueEmpty+0x12>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <prvIsQueueEmpty+0x14>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	08 95       	ret

000004ba <prvIsQueueFull>:
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	0f 92       	push	r0
     4c0:	fc 01       	movw	r30, r24
     4c2:	22 8d       	ldd	r18, Z+26	; 0x1a
     4c4:	83 8d       	ldd	r24, Z+27	; 0x1b
     4c6:	28 13       	cpse	r18, r24
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <prvIsQueueFull+0x14>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <prvIsQueueFull+0x16>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	08 95       	ret

000004d6 <prvCopyDataToQueue>:
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
     4e0:	04 2f       	mov	r16, r20
     4e2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     4e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4e6:	41 11       	cpse	r20, r1
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <prvCopyDataToQueue+0x2c>
     4ea:	88 81       	ld	r24, Y
     4ec:	99 81       	ldd	r25, Y+1	; 0x01
     4ee:	89 2b       	or	r24, r25
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <prvCopyDataToQueue+0x1e>
     4f2:	42 c0       	rjmp	.+132    	; 0x578 <prvCopyDataToQueue+0xa2>
     4f4:	8c 81       	ldd	r24, Y+4	; 0x04
     4f6:	9d 81       	ldd	r25, Y+5	; 0x05
     4f8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xTaskPriorityDisinherit>
     4fc:	1d 82       	std	Y+5, r1	; 0x05
     4fe:	1c 82       	std	Y+4, r1	; 0x04
     500:	42 c0       	rjmp	.+132    	; 0x586 <prvCopyDataToQueue+0xb0>
     502:	01 11       	cpse	r16, r1
     504:	17 c0       	rjmp	.+46     	; 0x534 <prvCopyDataToQueue+0x5e>
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	9b 81       	ldd	r25, Y+3	; 0x03
     50c:	0e 94 c4 10 	call	0x2188	; 0x2188 <memcpy>
     510:	2c 8d       	ldd	r18, Y+28	; 0x1c
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	9b 81       	ldd	r25, Y+3	; 0x03
     516:	82 0f       	add	r24, r18
     518:	91 1d       	adc	r25, r1
     51a:	9b 83       	std	Y+3, r25	; 0x03
     51c:	8a 83       	std	Y+2, r24	; 0x02
     51e:	2c 81       	ldd	r18, Y+4	; 0x04
     520:	3d 81       	ldd	r19, Y+5	; 0x05
     522:	82 17       	cp	r24, r18
     524:	93 07       	cpc	r25, r19
     526:	50 f1       	brcs	.+84     	; 0x57c <prvCopyDataToQueue+0xa6>
     528:	88 81       	ld	r24, Y
     52a:	99 81       	ldd	r25, Y+1	; 0x01
     52c:	9b 83       	std	Y+3, r25	; 0x03
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	29 c0       	rjmp	.+82     	; 0x586 <prvCopyDataToQueue+0xb0>
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	8e 81       	ldd	r24, Y+6	; 0x06
     538:	9f 81       	ldd	r25, Y+7	; 0x07
     53a:	0e 94 c4 10 	call	0x2188	; 0x2188 <memcpy>
     53e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	91 95       	neg	r25
     544:	81 95       	neg	r24
     546:	91 09       	sbc	r25, r1
     548:	2e 81       	ldd	r18, Y+6	; 0x06
     54a:	3f 81       	ldd	r19, Y+7	; 0x07
     54c:	28 0f       	add	r18, r24
     54e:	39 1f       	adc	r19, r25
     550:	3f 83       	std	Y+7, r19	; 0x07
     552:	2e 83       	std	Y+6, r18	; 0x06
     554:	48 81       	ld	r20, Y
     556:	59 81       	ldd	r21, Y+1	; 0x01
     558:	24 17       	cp	r18, r20
     55a:	35 07       	cpc	r19, r21
     55c:	30 f4       	brcc	.+12     	; 0x56a <prvCopyDataToQueue+0x94>
     55e:	2c 81       	ldd	r18, Y+4	; 0x04
     560:	3d 81       	ldd	r19, Y+5	; 0x05
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	9f 83       	std	Y+7, r25	; 0x07
     568:	8e 83       	std	Y+6, r24	; 0x06
     56a:	02 30       	cpi	r16, 0x02	; 2
     56c:	49 f4       	brne	.+18     	; 0x580 <prvCopyDataToQueue+0xaa>
     56e:	11 23       	and	r17, r17
     570:	49 f0       	breq	.+18     	; 0x584 <prvCopyDataToQueue+0xae>
     572:	11 50       	subi	r17, 0x01	; 1
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	07 c0       	rjmp	.+14     	; 0x586 <prvCopyDataToQueue+0xb0>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	05 c0       	rjmp	.+10     	; 0x586 <prvCopyDataToQueue+0xb0>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	03 c0       	rjmp	.+6      	; 0x586 <prvCopyDataToQueue+0xb0>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	01 c0       	rjmp	.+2      	; 0x586 <prvCopyDataToQueue+0xb0>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	1f 5f       	subi	r17, 0xFF	; 255
     588:	1a 8f       	std	Y+26, r17	; 0x1a
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <prvUnlockQueue>:
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	0f 92       	push	r0
     5a2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     5a4:	0b c0       	rjmp	.+22     	; 0x5bc <prvUnlockQueue+0x28>
     5a6:	89 89       	ldd	r24, Y+17	; 0x11
     5a8:	88 23       	and	r24, r24
     5aa:	51 f0       	breq	.+20     	; 0x5c0 <prvUnlockQueue+0x2c>
     5ac:	ce 01       	movw	r24, r28
     5ae:	41 96       	adiw	r24, 0x11	; 17
     5b0:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskRemoveFromEventList>
     5b4:	81 11       	cpse	r24, r1
     5b6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <vTaskMissedYield>
     5ba:	11 50       	subi	r17, 0x01	; 1
     5bc:	11 16       	cp	r1, r17
     5be:	9c f3       	brlt	.-26     	; 0x5a6 <prvUnlockQueue+0x12>
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	8e 8f       	std	Y+30, r24	; 0x1e
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	0f 92       	push	r0
     5ce:	1d 8d       	ldd	r17, Y+29	; 0x1d
     5d0:	0b c0       	rjmp	.+22     	; 0x5e8 <prvUnlockQueue+0x54>
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	88 23       	and	r24, r24
     5d6:	51 f0       	breq	.+20     	; 0x5ec <prvUnlockQueue+0x58>
     5d8:	ce 01       	movw	r24, r28
     5da:	08 96       	adiw	r24, 0x08	; 8
     5dc:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskRemoveFromEventList>
     5e0:	81 11       	cpse	r24, r1
     5e2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <vTaskMissedYield>
     5e6:	11 50       	subi	r17, 0x01	; 1
     5e8:	11 16       	cp	r1, r17
     5ea:	9c f3       	brlt	.-26     	; 0x5d2 <prvUnlockQueue+0x3e>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	8d 8f       	std	Y+29, r24	; 0x1d
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret

000005fc <xQueueGenericReset>:
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	fc 01       	movw	r30, r24
     606:	36 2f       	mov	r19, r22
     608:	89 2b       	or	r24, r25
     60a:	09 f4       	brne	.+2      	; 0x60e <xQueueGenericReset+0x12>
     60c:	4d c0       	rjmp	.+154    	; 0x6a8 <xQueueGenericReset+0xac>
     60e:	23 8d       	ldd	r18, Z+27	; 0x1b
     610:	22 23       	and	r18, r18
     612:	09 f4       	brne	.+2      	; 0x616 <xQueueGenericReset+0x1a>
     614:	4b c0       	rjmp	.+150    	; 0x6ac <xQueueGenericReset+0xb0>
     616:	02 2f       	mov	r16, r18
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	b8 01       	movw	r22, r16
     620:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodhi4>
     624:	44 8d       	ldd	r20, Z+28	; 0x1c
     626:	84 2f       	mov	r24, r20
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	68 17       	cp	r22, r24
     62c:	79 07       	cpc	r23, r25
     62e:	08 f4       	brcc	.+2      	; 0x632 <xQueueGenericReset+0x36>
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <xQueueGenericReset+0xb4>
     632:	ef 01       	movw	r28, r30
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	0f 92       	push	r0
     63a:	60 81       	ld	r22, Z
     63c:	71 81       	ldd	r23, Z+1	; 0x01
     63e:	fb 01       	movw	r30, r22
     640:	24 9f       	mul	r18, r20
     642:	e0 0d       	add	r30, r0
     644:	f1 1d       	adc	r31, r1
     646:	11 24       	eor	r1, r1
     648:	fd 83       	std	Y+5, r31	; 0x05
     64a:	ec 83       	std	Y+4, r30	; 0x04
     64c:	1a 8e       	std	Y+26, r1	; 0x1a
     64e:	7b 83       	std	Y+3, r23	; 0x03
     650:	6a 83       	std	Y+2, r22	; 0x02
     652:	01 50       	subi	r16, 0x01	; 1
     654:	11 09       	sbc	r17, r1
     656:	80 9f       	mul	r24, r16
     658:	a0 01       	movw	r20, r0
     65a:	81 9f       	mul	r24, r17
     65c:	50 0d       	add	r21, r0
     65e:	90 9f       	mul	r25, r16
     660:	50 0d       	add	r21, r0
     662:	11 24       	eor	r1, r1
     664:	cb 01       	movw	r24, r22
     666:	84 0f       	add	r24, r20
     668:	95 1f       	adc	r25, r21
     66a:	9f 83       	std	Y+7, r25	; 0x07
     66c:	8e 83       	std	Y+6, r24	; 0x06
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	8d 8f       	std	Y+29, r24	; 0x1d
     672:	8e 8f       	std	Y+30, r24	; 0x1e
     674:	31 11       	cpse	r19, r1
     676:	0c c0       	rjmp	.+24     	; 0x690 <xQueueGenericReset+0x94>
     678:	88 85       	ldd	r24, Y+8	; 0x08
     67a:	88 23       	and	r24, r24
     67c:	89 f0       	breq	.+34     	; 0x6a0 <xQueueGenericReset+0xa4>
     67e:	ce 01       	movw	r24, r28
     680:	08 96       	adiw	r24, 0x08	; 8
     682:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskRemoveFromEventList>
     686:	88 23       	and	r24, r24
     688:	59 f0       	breq	.+22     	; 0x6a0 <xQueueGenericReset+0xa4>
     68a:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <xQueueGenericReset+0xa4>
     690:	ce 01       	movw	r24, r28
     692:	08 96       	adiw	r24, 0x08	; 8
     694:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     698:	ce 01       	movw	r24, r28
     69a:	41 96       	adiw	r24, 0x11	; 17
     69c:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <xQueueGenericReset+0xb6>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <xQueueGenericReset+0xb6>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <xQueueGenericReset+0xb6>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <prvInitialiseNewQueue>:
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	f8 01       	movw	r30, r16
     6c2:	61 11       	cpse	r22, r1
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <prvInitialiseNewQueue+0x10>
     6c6:	11 83       	std	Z+1, r17	; 0x01
     6c8:	00 83       	st	Z, r16
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <prvInitialiseNewQueue+0x14>
     6cc:	51 83       	std	Z+1, r21	; 0x01
     6ce:	40 83       	st	Z, r20
     6d0:	83 8f       	std	Z+27, r24	; 0x1b
     6d2:	64 8f       	std	Z+28, r22	; 0x1c
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	cf 01       	movw	r24, r30
     6d8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <xQueueGenericReset>
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <xQueueGenericCreate>:
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	38 2f       	mov	r19, r24
     6f2:	e6 2f       	mov	r30, r22
     6f4:	88 23       	and	r24, r24
     6f6:	29 f1       	breq	.+74     	; 0x742 <xQueueGenericCreate+0x60>
     6f8:	68 2f       	mov	r22, r24
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	9f ef       	ldi	r25, 0xFF	; 255
     700:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodhi4>
     704:	8e 2f       	mov	r24, r30
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	68 17       	cp	r22, r24
     70a:	79 07       	cpc	r23, r25
     70c:	e8 f0       	brcs	.+58     	; 0x748 <xQueueGenericCreate+0x66>
     70e:	3e 9f       	mul	r19, r30
     710:	c0 01       	movw	r24, r0
     712:	11 24       	eor	r1, r1
     714:	81 3e       	cpi	r24, 0xE1	; 225
     716:	2f ef       	ldi	r18, 0xFF	; 255
     718:	92 07       	cpc	r25, r18
     71a:	c8 f4       	brcc	.+50     	; 0x74e <xQueueGenericCreate+0x6c>
     71c:	d4 2e       	mov	r13, r20
     71e:	de 2f       	mov	r29, r30
     720:	c3 2f       	mov	r28, r19
     722:	4f 96       	adiw	r24, 0x1f	; 31
     724:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
     728:	7c 01       	movw	r14, r24
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	91 f0       	breq	.+36     	; 0x752 <xQueueGenericCreate+0x70>
     72e:	8c 01       	movw	r16, r24
     730:	2d 2d       	mov	r18, r13
     732:	ac 01       	movw	r20, r24
     734:	41 5e       	subi	r20, 0xE1	; 225
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	6d 2f       	mov	r22, r29
     73a:	8c 2f       	mov	r24, r28
     73c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvInitialiseNewQueue>
     740:	08 c0       	rjmp	.+16     	; 0x752 <xQueueGenericCreate+0x70>
     742:	e1 2c       	mov	r14, r1
     744:	f1 2c       	mov	r15, r1
     746:	05 c0       	rjmp	.+10     	; 0x752 <xQueueGenericCreate+0x70>
     748:	e1 2c       	mov	r14, r1
     74a:	f1 2c       	mov	r15, r1
     74c:	02 c0       	rjmp	.+4      	; 0x752 <xQueueGenericCreate+0x70>
     74e:	e1 2c       	mov	r14, r1
     750:	f1 2c       	mov	r15, r1
     752:	c7 01       	movw	r24, r14
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	08 95       	ret

00000764 <xQueueGenericSend>:
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	00 d0       	rcall	.+0      	; 0x776 <xQueueGenericSend+0x12>
     776:	00 d0       	rcall	.+0      	; 0x778 <xQueueGenericSend+0x14>
     778:	1f 92       	push	r1
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	8c 01       	movw	r16, r24
     780:	7b 01       	movw	r14, r22
     782:	5d 83       	std	Y+5, r21	; 0x05
     784:	4c 83       	std	Y+4, r20	; 0x04
     786:	c2 2e       	mov	r12, r18
     788:	d1 2c       	mov	r13, r1
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	0f 92       	push	r0
     790:	f8 01       	movw	r30, r16
     792:	92 8d       	ldd	r25, Z+26	; 0x1a
     794:	83 8d       	ldd	r24, Z+27	; 0x1b
     796:	98 17       	cp	r25, r24
     798:	18 f0       	brcs	.+6      	; 0x7a0 <xQueueGenericSend+0x3c>
     79a:	f2 e0       	ldi	r31, 0x02	; 2
     79c:	cf 12       	cpse	r12, r31
     79e:	19 c0       	rjmp	.+50     	; 0x7d2 <xQueueGenericSend+0x6e>
     7a0:	4c 2d       	mov	r20, r12
     7a2:	b7 01       	movw	r22, r14
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <prvCopyDataToQueue>
     7aa:	f8 01       	movw	r30, r16
     7ac:	91 89       	ldd	r25, Z+17	; 0x11
     7ae:	99 23       	and	r25, r25
     7b0:	49 f0       	breq	.+18     	; 0x7c4 <xQueueGenericSend+0x60>
     7b2:	c8 01       	movw	r24, r16
     7b4:	41 96       	adiw	r24, 0x11	; 17
     7b6:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskRemoveFromEventList>
     7ba:	88 23       	and	r24, r24
     7bc:	31 f0       	breq	.+12     	; 0x7ca <xQueueGenericSend+0x66>
     7be:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <xQueueGenericSend+0x66>
     7c4:	81 11       	cpse	r24, r1
     7c6:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	4d c0       	rjmp	.+154    	; 0x86c <__stack+0xd>
     7d2:	8c 81       	ldd	r24, Y+4	; 0x04
     7d4:	9d 81       	ldd	r25, Y+5	; 0x05
     7d6:	89 2b       	or	r24, r25
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <xQueueGenericSend+0x7e>
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	45 c0       	rjmp	.+138    	; 0x86c <__stack+0xd>
     7e2:	d1 10       	cpse	r13, r1
     7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <xQueueGenericSend+0x8e>
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	0e 94 aa 0a 	call	0x1554	; 0x1554 <vTaskInternalSetTimeOutState>
     7ee:	dd 24       	eor	r13, r13
     7f0:	d3 94       	inc	r13
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0e 94 7c 07 	call	0xef8	; 0xef8 <vTaskSuspendAll>
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	0f 92       	push	r0
     800:	f8 01       	movw	r30, r16
     802:	85 8d       	ldd	r24, Z+29	; 0x1d
     804:	8f 3f       	cpi	r24, 0xFF	; 255
     806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	15 8e       	std	Z+29, r1	; 0x1d
     80a:	f8 01       	movw	r30, r16
     80c:	86 8d       	ldd	r24, Z+30	; 0x1e
     80e:	8f 3f       	cpi	r24, 0xFF	; 255
     810:	09 f4       	brne	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	16 8e       	std	Z+30, r1	; 0x1e
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	be 01       	movw	r22, r28
     81a:	6c 5f       	subi	r22, 0xFC	; 252
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	ce 01       	movw	r24, r28
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	0e 94 b5 0a 	call	0x156a	; 0x156a <xTaskCheckForTimeOut>
     826:	81 11       	cpse	r24, r1
     828:	1b c0       	rjmp	.+54     	; 0x860 <__stack+0x1>
     82a:	c8 01       	movw	r24, r16
     82c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <prvIsQueueFull>
     830:	88 23       	and	r24, r24
     832:	81 f0       	breq	.+32     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     834:	6c 81       	ldd	r22, Y+4	; 0x04
     836:	7d 81       	ldd	r23, Y+5	; 0x05
     838:	c8 01       	movw	r24, r16
     83a:	08 96       	adiw	r24, 0x08	; 8
     83c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vTaskPlaceOnEventList>
     840:	c8 01       	movw	r24, r16
     842:	0e 94 ca 02 	call	0x594	; 0x594 <prvUnlockQueue>
     846:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
     84a:	81 11       	cpse	r24, r1
     84c:	9e cf       	rjmp	.-196    	; 0x78a <xQueueGenericSend+0x26>
     84e:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
     852:	9b cf       	rjmp	.-202    	; 0x78a <xQueueGenericSend+0x26>
     854:	c8 01       	movw	r24, r16
     856:	0e 94 ca 02 	call	0x594	; 0x594 <prvUnlockQueue>
     85a:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
     85e:	95 cf       	rjmp	.-214    	; 0x78a <xQueueGenericSend+0x26>
     860:	c8 01       	movw	r24, r16
     862:	0e 94 ca 02 	call	0x594	; 0x594 <prvUnlockQueue>
     866:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	08 95       	ret

00000888 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	00 d0       	rcall	.+0      	; 0x896 <xQueueSemaphoreTake+0xe>
     896:	00 d0       	rcall	.+0      	; 0x898 <xQueueSemaphoreTake+0x10>
     898:	1f 92       	push	r1
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	8c 01       	movw	r16, r24
     8a0:	7d 83       	std	Y+5, r23	; 0x05
     8a2:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     8a4:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     8a6:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     8ae:	f8 01       	movw	r30, r16
     8b0:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     8b2:	88 23       	and	r24, r24
     8b4:	d1 f0       	breq	.+52     	; 0x8ea <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     8b6:	81 50       	subi	r24, 0x01	; 1
     8b8:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	89 2b       	or	r24, r25
     8c0:	29 f4       	brne	.+10     	; 0x8cc <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     8c2:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <pvTaskIncrementMutexHeldCount>
     8c6:	f8 01       	movw	r30, r16
     8c8:	95 83       	std	Z+5, r25	; 0x05
     8ca:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check_Password to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8cc:	f8 01       	movw	r30, r16
     8ce:	80 85       	ldd	r24, Z+8	; 0x08
     8d0:	88 23       	and	r24, r24
     8d2:	39 f0       	breq	.+14     	; 0x8e2 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     8d4:	c8 01       	movw	r24, r16
     8d6:	08 96       	adiw	r24, 0x08	; 8
     8d8:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskRemoveFromEventList>
     8dc:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     8de:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	74 c0       	rjmp	.+232    	; 0x9d2 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     8ea:	8c 81       	ldd	r24, Y+4	; 0x04
     8ec:	9d 81       	ldd	r25, Y+5	; 0x05
     8ee:	89 2b       	or	r24, r25
     8f0:	21 f4       	brne	.+8      	; 0x8fa <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	6c c0       	rjmp	.+216    	; 0x9d2 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     8fa:	f1 10       	cpse	r15, r1
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	0e 94 aa 0a 	call	0x1554	; 0x1554 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     906:	ff 24       	eor	r15, r15
     908:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     90e:	0e 94 7c 07 	call	0xef8	; 0xef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	0f 92       	push	r0
     918:	f8 01       	movw	r30, r16
     91a:	85 8d       	ldd	r24, Z+29	; 0x1d
     91c:	8f 3f       	cpi	r24, 0xFF	; 255
     91e:	09 f4       	brne	.+2      	; 0x922 <xQueueSemaphoreTake+0x9a>
     920:	15 8e       	std	Z+29, r1	; 0x1d
     922:	f8 01       	movw	r30, r16
     924:	86 8d       	ldd	r24, Z+30	; 0x1e
     926:	8f 3f       	cpi	r24, 0xFF	; 255
     928:	09 f4       	brne	.+2      	; 0x92c <xQueueSemaphoreTake+0xa4>
     92a:	16 8e       	std	Z+30, r1	; 0x1e
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     930:	be 01       	movw	r22, r28
     932:	6c 5f       	subi	r22, 0xFC	; 252
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	0e 94 b5 0a 	call	0x156a	; 0x156a <xTaskCheckForTimeOut>
     93e:	81 11       	cpse	r24, r1
     940:	2a c0       	rjmp	.+84     	; 0x996 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     942:	c8 01       	movw	r24, r16
     944:	0e 94 50 02 	call	0x4a0	; 0x4a0 <prvIsQueueEmpty>
     948:	88 23       	and	r24, r24
     94a:	f9 f0       	breq	.+62     	; 0x98a <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     94c:	f8 01       	movw	r30, r16
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	89 2b       	or	r24, r25
     954:	51 f4       	brne	.+20     	; 0x96a <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	95 81       	ldd	r25, Z+5	; 0x05
     960:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <xTaskPriorityInherit>
     964:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     96a:	6c 81       	ldd	r22, Y+4	; 0x04
     96c:	7d 81       	ldd	r23, Y+5	; 0x05
     96e:	c8 01       	movw	r24, r16
     970:	41 96       	adiw	r24, 0x11	; 17
     972:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     976:	c8 01       	movw	r24, r16
     978:	0e 94 ca 02 	call	0x594	; 0x594 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     97c:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
     980:	81 11       	cpse	r24, r1
     982:	92 cf       	rjmp	.-220    	; 0x8a8 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     984:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
     988:	8f cf       	rjmp	.-226    	; 0x8a8 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     98a:	c8 01       	movw	r24, r16
     98c:	0e 94 ca 02 	call	0x594	; 0x594 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     990:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
     994:	89 cf       	rjmp	.-238    	; 0x8a8 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     996:	c8 01       	movw	r24, r16
     998:	0e 94 ca 02 	call	0x594	; 0x594 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     99c:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <prvIsQueueEmpty>
     9a6:	88 23       	and	r24, r24
     9a8:	09 f4       	brne	.+2      	; 0x9ac <xQueueSemaphoreTake+0x124>
     9aa:	7e cf       	rjmp	.-260    	; 0x8a8 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to Check_Password it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     9ac:	ee 20       	and	r14, r14
     9ae:	81 f0       	breq	.+32     	; 0x9d0 <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     9b6:	c8 01       	movw	r24, r16
     9b8:	0e 94 40 02 	call	0x480	; 0x480 <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     9bc:	68 2f       	mov	r22, r24
     9be:	f8 01       	movw	r30, r16
     9c0:	84 81       	ldd	r24, Z+4	; 0x04
     9c2:	95 81       	ldd	r25, Z+5	; 0x05
     9c4:	0e 94 ef 0b 	call	0x17de	; 0x17de <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <xQueueSemaphoreTake+0x14a>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     9ea:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     9ee:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     9f2:	80 81       	ld	r24, Z
     9f4:	81 11       	cpse	r24, r1
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <prvResetNextTaskUnblockTime+0x1c>
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	9f ef       	ldi	r25, 0xFF	; 255
     9fc:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     a00:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     a04:	08 95       	ret
     a06:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     a0a:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     a0e:	05 80       	ldd	r0, Z+5	; 0x05
     a10:	f6 81       	ldd	r31, Z+6	; 0x06
     a12:	e0 2d       	mov	r30, r0
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     a1c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     a20:	08 95       	ret

00000a22 <prvDeleteTCB>:
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
     a28:	8f 89       	ldd	r24, Y+23	; 0x17
     a2a:	98 8d       	ldd	r25, Y+24	; 0x18
     a2c:	0e 94 79 00 	call	0xf2	; 0xf2 <vPortFree>
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 79 00 	call	0xf2	; 0xf2 <vPortFree>
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <prvInitialiseNewTask>:
     a3c:	6f 92       	push	r6
     a3e:	7f 92       	push	r7
     a40:	8f 92       	push	r8
     a42:	9f 92       	push	r9
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	4c 01       	movw	r8, r24
     a5c:	d5 01       	movw	r26, r10
     a5e:	57 96       	adiw	r26, 0x17	; 23
     a60:	8d 91       	ld	r24, X+
     a62:	9c 91       	ld	r25, X
     a64:	58 97       	sbiw	r26, 0x18	; 24
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	31 09       	sbc	r19, r1
     a6a:	3c 01       	movw	r6, r24
     a6c:	62 0e       	add	r6, r18
     a6e:	73 1e       	adc	r7, r19
     a70:	61 15       	cp	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	89 f4       	brne	.+34     	; 0xa98 <prvInitialiseNewTask+0x5c>
     a76:	16 c0       	rjmp	.+44     	; 0xaa4 <prvInitialiseNewTask+0x68>
     a78:	82 2f       	mov	r24, r18
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fb 01       	movw	r30, r22
     a7e:	e8 0f       	add	r30, r24
     a80:	f9 1f       	adc	r31, r25
     a82:	30 81       	ld	r19, Z
     a84:	d5 01       	movw	r26, r10
     a86:	a8 0f       	add	r26, r24
     a88:	b9 1f       	adc	r27, r25
     a8a:	59 96       	adiw	r26, 0x19	; 25
     a8c:	3c 93       	st	X, r19
     a8e:	80 81       	ld	r24, Z
     a90:	88 23       	and	r24, r24
     a92:	29 f0       	breq	.+10     	; 0xa9e <prvInitialiseNewTask+0x62>
     a94:	2f 5f       	subi	r18, 0xFF	; 255
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <prvInitialiseNewTask+0x5e>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	28 30       	cpi	r18, 0x08	; 8
     a9c:	68 f3       	brcs	.-38     	; 0xa78 <prvInitialiseNewTask+0x3c>
     a9e:	f5 01       	movw	r30, r10
     aa0:	10 a2       	std	Z+32, r1	; 0x20
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <prvInitialiseNewTask+0x6e>
     aa4:	d5 01       	movw	r26, r10
     aa6:	59 96       	adiw	r26, 0x19	; 25
     aa8:	1c 92       	st	X, r1
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	be 15       	cp	r27, r14
     aae:	20 f4       	brcc	.+8      	; 0xab8 <prvInitialiseNewTask+0x7c>
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f3 e0       	ldi	r31, 0x03	; 3
     ab4:	ef 2e       	mov	r14, r31
     ab6:	f0 2d       	mov	r31, r0
     ab8:	f5 01       	movw	r30, r10
     aba:	e6 8a       	std	Z+22, r14	; 0x16
     abc:	e1 a2       	std	Z+33, r14	; 0x21
     abe:	12 a2       	std	Z+34, r1	; 0x22
     ac0:	c5 01       	movw	r24, r10
     ac2:	02 96       	adiw	r24, 0x02	; 2
     ac4:	0e 94 88 00 	call	0x110	; 0x110 <vListInitialiseItem>
     ac8:	c5 01       	movw	r24, r10
     aca:	0c 96       	adiw	r24, 0x0c	; 12
     acc:	0e 94 88 00 	call	0x110	; 0x110 <vListInitialiseItem>
     ad0:	d5 01       	movw	r26, r10
     ad2:	19 96       	adiw	r26, 0x09	; 9
     ad4:	bc 92       	st	X, r11
     ad6:	ae 92       	st	-X, r10
     ad8:	18 97       	sbiw	r26, 0x08	; 8
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	8e 19       	sub	r24, r14
     ae0:	91 09       	sbc	r25, r1
     ae2:	1d 96       	adiw	r26, 0x0d	; 13
     ae4:	9c 93       	st	X, r25
     ae6:	8e 93       	st	-X, r24
     ae8:	1c 97       	sbiw	r26, 0x0c	; 12
     aea:	53 96       	adiw	r26, 0x13	; 19
     aec:	bc 92       	st	X, r11
     aee:	ae 92       	st	-X, r10
     af0:	52 97       	sbiw	r26, 0x12	; 18
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	f5 01       	movw	r30, r10
     af6:	b3 96       	adiw	r30, 0x23	; 35
     af8:	df 01       	movw	r26, r30
     afa:	1d 92       	st	X+, r1
     afc:	8a 95       	dec	r24
     afe:	e9 f7       	brne	.-6      	; 0xafa <prvInitialiseNewTask+0xbe>
     b00:	f5 01       	movw	r30, r10
     b02:	17 a2       	std	Z+39, r1	; 0x27
     b04:	a8 01       	movw	r20, r16
     b06:	b4 01       	movw	r22, r8
     b08:	c3 01       	movw	r24, r6
     b0a:	0e 94 ed 00 	call	0x1da	; 0x1da <pxPortInitialiseStack>
     b0e:	d5 01       	movw	r26, r10
     b10:	8d 93       	st	X+, r24
     b12:	9c 93       	st	X, r25
     b14:	c1 14       	cp	r12, r1
     b16:	d1 04       	cpc	r13, r1
     b18:	19 f0       	breq	.+6      	; 0xb20 <prvInitialiseNewTask+0xe4>
     b1a:	f6 01       	movw	r30, r12
     b1c:	b1 82       	std	Z+1, r11	; 0x01
     b1e:	a0 82       	st	Z, r10
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	08 95       	ret

00000b3c <prvInitialiseTaskLists>:
     b3c:	cf 93       	push	r28
     b3e:	c0 e0       	ldi	r28, 0x00	; 0
     b40:	10 c0       	rjmp	.+32     	; 0xb62 <prvInitialiseTaskLists+0x26>
     b42:	8c 2f       	mov	r24, r28
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	9c 01       	movw	r18, r24
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	22 0f       	add	r18, r18
     b4e:	33 1f       	adc	r19, r19
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	87 55       	subi	r24, 0x57	; 87
     b5a:	9b 4f       	sbci	r25, 0xFB	; 251
     b5c:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     b60:	cf 5f       	subi	r28, 0xFF	; 255
     b62:	c4 30       	cpi	r28, 0x04	; 4
     b64:	70 f3       	brcs	.-36     	; 0xb42 <prvInitialiseTaskLists+0x6>
     b66:	80 ea       	ldi	r24, 0xA0	; 160
     b68:	94 e0       	ldi	r25, 0x04	; 4
     b6a:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     b6e:	87 e9       	ldi	r24, 0x97	; 151
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     b76:	8a e8       	ldi	r24, 0x8A	; 138
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     b7e:	81 e8       	ldi	r24, 0x81	; 129
     b80:	94 e0       	ldi	r25, 0x04	; 4
     b82:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     b86:	87 e7       	ldi	r24, 0x77	; 119
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     b8e:	80 ea       	ldi	r24, 0xA0	; 160
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <pxDelayedTaskList+0x1>
     b96:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <pxDelayedTaskList>
     b9a:	87 e9       	ldi	r24, 0x97	; 151
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     ba2:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <pxOverflowDelayedTaskList>
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <prvAddNewTaskToReadyList>:
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	ec 01       	movw	r28, r24
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	0f 92       	push	r0
     bb6:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <uxCurrentNumberOfTasks>
     bc0:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     bc4:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     bc8:	89 2b       	or	r24, r25
     bca:	59 f4       	brne	.+22     	; 0xbe2 <prvAddNewTaskToReadyList+0x38>
     bcc:	d0 93 ce 04 	sts	0x04CE, r29	; 0x8004ce <pxCurrentTCB+0x1>
     bd0:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <pxCurrentTCB>
     bd4:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	99 f4       	brne	.+38     	; 0xc02 <prvAddNewTaskToReadyList+0x58>
     bdc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <prvInitialiseTaskLists>
     be0:	10 c0       	rjmp	.+32     	; 0xc02 <prvAddNewTaskToReadyList+0x58>
     be2:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xSchedulerRunning>
     be6:	81 11       	cpse	r24, r1
     be8:	0c c0       	rjmp	.+24     	; 0xc02 <prvAddNewTaskToReadyList+0x58>
     bea:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     bee:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     bf2:	96 89       	ldd	r25, Z+22	; 0x16
     bf4:	8e 89       	ldd	r24, Y+22	; 0x16
     bf6:	89 17       	cp	r24, r25
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <prvAddNewTaskToReadyList+0x58>
     bfa:	d0 93 ce 04 	sts	0x04CE, r29	; 0x8004ce <pxCurrentTCB+0x1>
     bfe:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <pxCurrentTCB>
     c02:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <uxTaskNumber>
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <uxTaskNumber>
     c0c:	8e 89       	ldd	r24, Y+22	; 0x16
     c0e:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
     c12:	98 17       	cp	r25, r24
     c14:	10 f4       	brcc	.+4      	; 0xc1a <prvAddNewTaskToReadyList+0x70>
     c16:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	fc 01       	movw	r30, r24
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	8e 0f       	add	r24, r30
     c2c:	9f 1f       	adc	r25, r31
     c2e:	fc 01       	movw	r30, r24
     c30:	e7 55       	subi	r30, 0x57	; 87
     c32:	fb 4f       	sbci	r31, 0xFB	; 251
     c34:	01 80       	ldd	r0, Z+1	; 0x01
     c36:	f2 81       	ldd	r31, Z+2	; 0x02
     c38:	e0 2d       	mov	r30, r0
     c3a:	fd 83       	std	Y+5, r31	; 0x05
     c3c:	ec 83       	std	Y+4, r30	; 0x04
     c3e:	84 81       	ldd	r24, Z+4	; 0x04
     c40:	95 81       	ldd	r25, Z+5	; 0x05
     c42:	9f 83       	std	Y+7, r25	; 0x07
     c44:	8e 83       	std	Y+6, r24	; 0x06
     c46:	a4 81       	ldd	r26, Z+4	; 0x04
     c48:	b5 81       	ldd	r27, Z+5	; 0x05
     c4a:	ce 01       	movw	r24, r28
     c4c:	02 96       	adiw	r24, 0x02	; 2
     c4e:	13 96       	adiw	r26, 0x03	; 3
     c50:	9c 93       	st	X, r25
     c52:	8e 93       	st	-X, r24
     c54:	12 97       	sbiw	r26, 0x02	; 2
     c56:	95 83       	std	Z+5, r25	; 0x05
     c58:	84 83       	std	Z+4, r24	; 0x04
     c5a:	ee 89       	ldd	r30, Y+22	; 0x16
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	cf 01       	movw	r24, r30
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	e8 0f       	add	r30, r24
     c6e:	f9 1f       	adc	r31, r25
     c70:	e7 55       	subi	r30, 0x57	; 87
     c72:	fb 4f       	sbci	r31, 0xFB	; 251
     c74:	fb 87       	std	Y+11, r31	; 0x0b
     c76:	ea 87       	std	Y+10, r30	; 0x0a
     c78:	80 81       	ld	r24, Z
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	80 83       	st	Z, r24
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xSchedulerRunning>
     c86:	88 23       	and	r24, r24
     c88:	51 f0       	breq	.+20     	; 0xc9e <prvAddNewTaskToReadyList+0xf4>
     c8a:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     c8e:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     c92:	96 89       	ldd	r25, Z+22	; 0x16
     c94:	8e 89       	ldd	r24, Y+22	; 0x16
     c96:	98 17       	cp	r25, r24
     c98:	10 f4       	brcc	.+4      	; 0xc9e <prvAddNewTaskToReadyList+0xf4>
     c9a:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <prvCheckTasksWaitingTermination>:
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	1c c0       	rjmp	.+56     	; 0xce2 <prvCheckTasksWaitingTermination+0x3e>
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	0f 92       	push	r0
     cb0:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <xTasksWaitingTermination+0x5>
     cb4:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <xTasksWaitingTermination+0x6>
     cb8:	c6 81       	ldd	r28, Z+6	; 0x06
     cba:	d7 81       	ldd	r29, Z+7	; 0x07
     cbc:	ce 01       	movw	r24, r28
     cbe:	02 96       	adiw	r24, 0x02	; 2
     cc0:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
     cc4:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     cc8:	81 50       	subi	r24, 0x01	; 1
     cca:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <uxCurrentNumberOfTasks>
     cce:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 11 05 	call	0xa22	; 0xa22 <prvDeleteTCB>
     ce2:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     ce6:	81 11       	cpse	r24, r1
     ce8:	e0 cf       	rjmp	.-64     	; 0xcaa <prvCheckTasksWaitingTermination+0x6>
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <prvIdleTask>:
     cf0:	0e 94 52 06 	call	0xca4	; 0xca4 <prvCheckTasksWaitingTermination>
     cf4:	fd cf       	rjmp	.-6      	; 0xcf0 <prvIdleTask>

00000cf6 <prvAddCurrentTaskToDelayedList>:
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	f6 2e       	mov	r15, r22
     d04:	00 91 74 04 	lds	r16, 0x0474	; 0x800474 <xTickCount>
     d08:	10 91 75 04 	lds	r17, 0x0475	; 0x800475 <xTickCount+0x1>
     d0c:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d10:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d14:	02 96       	adiw	r24, 0x02	; 2
     d16:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
     d1a:	cf 3f       	cpi	r28, 0xFF	; 255
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	d8 07       	cpc	r29, r24
     d20:	b1 f5       	brne	.+108    	; 0xd8e <prvAddCurrentTaskToDelayedList+0x98>
     d22:	ff 20       	and	r15, r15
     d24:	a1 f1       	breq	.+104    	; 0xd8e <prvAddCurrentTaskToDelayedList+0x98>
     d26:	e7 e7       	ldi	r30, 0x77	; 119
     d28:	f4 e0       	ldi	r31, 0x04	; 4
     d2a:	a1 81       	ldd	r26, Z+1	; 0x01
     d2c:	b2 81       	ldd	r27, Z+2	; 0x02
     d2e:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d32:	d0 91 ce 04 	lds	r29, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d36:	bd 83       	std	Y+5, r27	; 0x05
     d38:	ac 83       	std	Y+4, r26	; 0x04
     d3a:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d3e:	d0 91 ce 04 	lds	r29, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d42:	14 96       	adiw	r26, 0x04	; 4
     d44:	8d 91       	ld	r24, X+
     d46:	9c 91       	ld	r25, X
     d48:	15 97       	sbiw	r26, 0x05	; 5
     d4a:	9f 83       	std	Y+7, r25	; 0x07
     d4c:	8e 83       	std	Y+6, r24	; 0x06
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	cd 91       	ld	r28, X+
     d52:	dc 91       	ld	r29, X
     d54:	15 97       	sbiw	r26, 0x05	; 5
     d56:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d5a:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d5e:	02 96       	adiw	r24, 0x02	; 2
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d68:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	15 96       	adiw	r26, 0x05	; 5
     d70:	9c 93       	st	X, r25
     d72:	8e 93       	st	-X, r24
     d74:	14 97       	sbiw	r26, 0x04	; 4
     d76:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d7a:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d7e:	1b 96       	adiw	r26, 0x0b	; 11
     d80:	fc 93       	st	X, r31
     d82:	ee 93       	st	-X, r30
     d84:	1a 97       	sbiw	r26, 0x0a	; 10
     d86:	80 81       	ld	r24, Z
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 83       	st	Z, r24
     d8c:	2f c0       	rjmp	.+94     	; 0xdec <prvAddCurrentTaskToDelayedList+0xf6>
     d8e:	c0 0f       	add	r28, r16
     d90:	d1 1f       	adc	r29, r17
     d92:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d96:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d9a:	d3 83       	std	Z+3, r29	; 0x03
     d9c:	c2 83       	std	Z+2, r28	; 0x02
     d9e:	c0 17       	cp	r28, r16
     da0:	d1 07       	cpc	r29, r17
     da2:	68 f4       	brcc	.+26     	; 0xdbe <prvAddCurrentTaskToDelayedList+0xc8>
     da4:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
     da8:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     dac:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <pxOverflowDelayedTaskList>
     db0:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     db4:	6e 5f       	subi	r22, 0xFE	; 254
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	0e 94 8c 00 	call	0x118	; 0x118 <vListInsert>
     dbc:	17 c0       	rjmp	.+46     	; 0xdec <prvAddCurrentTaskToDelayedList+0xf6>
     dbe:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
     dc2:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     dc6:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <pxDelayedTaskList>
     dca:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     dce:	6e 5f       	subi	r22, 0xFE	; 254
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	0e 94 8c 00 	call	0x118	; 0x118 <vListInsert>
     dd6:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <xNextTaskUnblockTime>
     dda:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <xNextTaskUnblockTime+0x1>
     dde:	c8 17       	cp	r28, r24
     de0:	d9 07       	cpc	r29, r25
     de2:	20 f4       	brcc	.+8      	; 0xdec <prvAddCurrentTaskToDelayedList+0xf6>
     de4:	d0 93 6c 04 	sts	0x046C, r29	; 0x80046c <xNextTaskUnblockTime+0x1>
     de8:	c0 93 6b 04 	sts	0x046B, r28	; 0x80046b <xNextTaskUnblockTime>
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	08 95       	ret

00000df8 <xTaskCreate>:
     df8:	2f 92       	push	r2
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	3c 01       	movw	r6, r24
     e1e:	1b 01       	movw	r2, r22
     e20:	5a 01       	movw	r10, r20
     e22:	29 01       	movw	r4, r18
     e24:	ca 01       	movw	r24, r20
     e26:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
     e2a:	6c 01       	movw	r12, r24
     e2c:	89 2b       	or	r24, r25
     e2e:	71 f0       	breq	.+28     	; 0xe4c <xTaskCreate+0x54>
     e30:	88 e2       	ldi	r24, 0x28	; 40
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
     e38:	ec 01       	movw	r28, r24
     e3a:	89 2b       	or	r24, r25
     e3c:	19 f0       	breq	.+6      	; 0xe44 <xTaskCreate+0x4c>
     e3e:	d8 8e       	std	Y+24, r13	; 0x18
     e40:	cf 8a       	std	Y+23, r12	; 0x17
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <xTaskCreate+0x58>
     e44:	c6 01       	movw	r24, r12
     e46:	0e 94 79 00 	call	0xf2	; 0xf2 <vPortFree>
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <xTaskCreate+0x58>
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
     e50:	20 97       	sbiw	r28, 0x00	; 0
     e52:	91 f0       	breq	.+36     	; 0xe78 <xTaskCreate+0x80>
     e54:	95 01       	movw	r18, r10
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	81 2c       	mov	r8, r1
     e5c:	91 2c       	mov	r9, r1
     e5e:	5e 01       	movw	r10, r28
     e60:	67 01       	movw	r12, r14
     e62:	e0 2e       	mov	r14, r16
     e64:	82 01       	movw	r16, r4
     e66:	b1 01       	movw	r22, r2
     e68:	c3 01       	movw	r24, r6
     e6a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <prvInitialiseNewTask>
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 d5 05 	call	0xbaa	; 0xbaa <prvAddNewTaskToReadyList>
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <xTaskCreate+0x82>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	7f 90       	pop	r7
     e94:	6f 90       	pop	r6
     e96:	5f 90       	pop	r5
     e98:	4f 90       	pop	r4
     e9a:	3f 90       	pop	r3
     e9c:	2f 90       	pop	r2
     e9e:	08 95       	ret

00000ea0 <vTaskStartScheduler>:
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	0f 2e       	mov	r0, r31
     ea8:	f9 e6       	ldi	r31, 0x69	; 105
     eaa:	ef 2e       	mov	r14, r31
     eac:	f4 e0       	ldi	r31, 0x04	; 4
     eae:	ff 2e       	mov	r15, r31
     eb0:	f0 2d       	mov	r31, r0
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	46 e4       	ldi	r20, 0x46	; 70
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	62 e6       	ldi	r22, 0x62	; 98
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	88 e7       	ldi	r24, 0x78	; 120
     ec2:	96 e0       	ldi	r25, 0x06	; 6
     ec4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <xTaskCreate>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	81 f4       	brne	.+32     	; 0xeec <vTaskStartScheduler+0x4c>
     ecc:	f8 94       	cli
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	9f ef       	ldi	r25, 0xFF	; 255
     ed2:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     ed6:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <xSchedulerRunning>
     ee0:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <xTickCount+0x1>
     ee4:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <xTickCount>
     ee8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xPortStartScheduler>
     eec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	08 95       	ret

00000ef8 <vTaskSuspendAll>:
     ef8:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <uxSchedulerSuspended>
     f02:	08 95       	ret

00000f04 <xTaskIncrementTick>:
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
     f10:	81 11       	cpse	r24, r1
     f12:	01 c1       	rjmp	.+514    	; 0x1116 <xTaskIncrementTick+0x212>
     f14:	c0 91 74 04 	lds	r28, 0x0474	; 0x800474 <xTickCount>
     f18:	d0 91 75 04 	lds	r29, 0x0475	; 0x800475 <xTickCount+0x1>
     f1c:	8e 01       	movw	r16, r28
     f1e:	0f 5f       	subi	r16, 0xFF	; 255
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	10 93 75 04 	sts	0x0475, r17	; 0x800475 <xTickCount+0x1>
     f26:	00 93 74 04 	sts	0x0474, r16	; 0x800474 <xTickCount>
     f2a:	01 15       	cp	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	b9 f4       	brne	.+46     	; 0xf5e <xTaskIncrementTick+0x5a>
     f30:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <pxDelayedTaskList>
     f34:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f38:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <pxOverflowDelayedTaskList>
     f3c:	30 91 94 04 	lds	r19, 0x0494	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     f40:	30 93 96 04 	sts	0x0496, r19	; 0x800496 <pxDelayedTaskList+0x1>
     f44:	20 93 95 04 	sts	0x0495, r18	; 0x800495 <pxDelayedTaskList>
     f48:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     f4c:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <pxOverflowDelayedTaskList>
     f50:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <xNumOfOverflows>
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <xNumOfOverflows>
     f5a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <prvResetNextTaskUnblockTime>
     f5e:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <xNextTaskUnblockTime>
     f62:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <xNextTaskUnblockTime+0x1>
     f66:	08 17       	cp	r16, r24
     f68:	19 07       	cpc	r17, r25
     f6a:	20 f4       	brcc	.+8      	; 0xf74 <xTaskIncrementTick+0x70>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	b8 c0       	rjmp	.+368    	; 0x10e0 <xTaskIncrementTick+0x1dc>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <xTaskIncrementTick+0x72>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     f7a:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f7e:	90 81       	ld	r25, Z
     f80:	91 11       	cpse	r25, r1
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <xTaskIncrementTick+0x8e>
     f84:	2f ef       	ldi	r18, 0xFF	; 255
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <xNextTaskUnblockTime+0x1>
     f8c:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <xNextTaskUnblockTime>
     f90:	a7 c0       	rjmp	.+334    	; 0x10e0 <xTaskIncrementTick+0x1dc>
     f92:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     f96:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f9a:	05 80       	ldd	r0, Z+5	; 0x05
     f9c:	f6 81       	ldd	r31, Z+6	; 0x06
     f9e:	e0 2d       	mov	r30, r0
     fa0:	06 80       	ldd	r0, Z+6	; 0x06
     fa2:	f7 81       	ldd	r31, Z+7	; 0x07
     fa4:	e0 2d       	mov	r30, r0
     fa6:	22 81       	ldd	r18, Z+2	; 0x02
     fa8:	33 81       	ldd	r19, Z+3	; 0x03
     faa:	02 17       	cp	r16, r18
     fac:	13 07       	cpc	r17, r19
     fae:	28 f4       	brcc	.+10     	; 0xfba <xTaskIncrementTick+0xb6>
     fb0:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <xNextTaskUnblockTime+0x1>
     fb4:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <xNextTaskUnblockTime>
     fb8:	93 c0       	rjmp	.+294    	; 0x10e0 <xTaskIncrementTick+0x1dc>
     fba:	a2 85       	ldd	r26, Z+10	; 0x0a
     fbc:	b3 85       	ldd	r27, Z+11	; 0x0b
     fbe:	24 81       	ldd	r18, Z+4	; 0x04
     fc0:	35 81       	ldd	r19, Z+5	; 0x05
     fc2:	46 81       	ldd	r20, Z+6	; 0x06
     fc4:	57 81       	ldd	r21, Z+7	; 0x07
     fc6:	e9 01       	movw	r28, r18
     fc8:	5d 83       	std	Y+5, r21	; 0x05
     fca:	4c 83       	std	Y+4, r20	; 0x04
     fcc:	26 81       	ldd	r18, Z+6	; 0x06
     fce:	37 81       	ldd	r19, Z+7	; 0x07
     fd0:	44 81       	ldd	r20, Z+4	; 0x04
     fd2:	55 81       	ldd	r21, Z+5	; 0x05
     fd4:	e9 01       	movw	r28, r18
     fd6:	5b 83       	std	Y+3, r21	; 0x03
     fd8:	4a 83       	std	Y+2, r20	; 0x02
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	2d 91       	ld	r18, X+
     fde:	3c 91       	ld	r19, X
     fe0:	12 97       	sbiw	r26, 0x02	; 2
     fe2:	af 01       	movw	r20, r30
     fe4:	4e 5f       	subi	r20, 0xFE	; 254
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	24 17       	cp	r18, r20
     fea:	35 07       	cpc	r19, r21
     fec:	31 f4       	brne	.+12     	; 0xffa <xTaskIncrementTick+0xf6>
     fee:	26 81       	ldd	r18, Z+6	; 0x06
     ff0:	37 81       	ldd	r19, Z+7	; 0x07
     ff2:	12 96       	adiw	r26, 0x02	; 2
     ff4:	3c 93       	st	X, r19
     ff6:	2e 93       	st	-X, r18
     ff8:	11 97       	sbiw	r26, 0x01	; 1
     ffa:	13 86       	std	Z+11, r1	; 0x0b
     ffc:	12 86       	std	Z+10, r1	; 0x0a
     ffe:	9c 91       	ld	r25, X
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	9c 93       	st	X, r25
    1004:	a4 89       	ldd	r26, Z+20	; 0x14
    1006:	b5 89       	ldd	r27, Z+21	; 0x15
    1008:	10 97       	sbiw	r26, 0x00	; 0
    100a:	19 f1       	breq	.+70     	; 0x1052 <xTaskIncrementTick+0x14e>
    100c:	26 85       	ldd	r18, Z+14	; 0x0e
    100e:	37 85       	ldd	r19, Z+15	; 0x0f
    1010:	60 89       	ldd	r22, Z+16	; 0x10
    1012:	71 89       	ldd	r23, Z+17	; 0x11
    1014:	e9 01       	movw	r28, r18
    1016:	7d 83       	std	Y+5, r23	; 0x05
    1018:	6c 83       	std	Y+4, r22	; 0x04
    101a:	20 89       	ldd	r18, Z+16	; 0x10
    101c:	31 89       	ldd	r19, Z+17	; 0x11
    101e:	66 85       	ldd	r22, Z+14	; 0x0e
    1020:	77 85       	ldd	r23, Z+15	; 0x0f
    1022:	e9 01       	movw	r28, r18
    1024:	7b 83       	std	Y+3, r23	; 0x03
    1026:	6a 83       	std	Y+2, r22	; 0x02
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	6d 91       	ld	r22, X+
    102c:	7c 91       	ld	r23, X
    102e:	12 97       	sbiw	r26, 0x02	; 2
    1030:	9f 01       	movw	r18, r30
    1032:	24 5f       	subi	r18, 0xF4	; 244
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	62 17       	cp	r22, r18
    1038:	73 07       	cpc	r23, r19
    103a:	31 f4       	brne	.+12     	; 0x1048 <xTaskIncrementTick+0x144>
    103c:	20 89       	ldd	r18, Z+16	; 0x10
    103e:	31 89       	ldd	r19, Z+17	; 0x11
    1040:	12 96       	adiw	r26, 0x02	; 2
    1042:	3c 93       	st	X, r19
    1044:	2e 93       	st	-X, r18
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	15 8a       	std	Z+21, r1	; 0x15
    104a:	14 8a       	std	Z+20, r1	; 0x14
    104c:	9c 91       	ld	r25, X
    104e:	91 50       	subi	r25, 0x01	; 1
    1050:	9c 93       	st	X, r25
    1052:	26 89       	ldd	r18, Z+22	; 0x16
    1054:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1058:	92 17       	cp	r25, r18
    105a:	10 f4       	brcc	.+4      	; 0x1060 <xTaskIncrementTick+0x15c>
    105c:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <uxTopReadyPriority>
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	d9 01       	movw	r26, r18
    1064:	aa 0f       	add	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	aa 0f       	add	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	aa 0f       	add	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	2a 0f       	add	r18, r26
    1072:	3b 1f       	adc	r19, r27
    1074:	d9 01       	movw	r26, r18
    1076:	a7 55       	subi	r26, 0x57	; 87
    1078:	bb 4f       	sbci	r27, 0xFB	; 251
    107a:	11 96       	adiw	r26, 0x01	; 1
    107c:	0d 90       	ld	r0, X+
    107e:	bc 91       	ld	r27, X
    1080:	a0 2d       	mov	r26, r0
    1082:	b5 83       	std	Z+5, r27	; 0x05
    1084:	a4 83       	std	Z+4, r26	; 0x04
    1086:	14 96       	adiw	r26, 0x04	; 4
    1088:	2d 91       	ld	r18, X+
    108a:	3c 91       	ld	r19, X
    108c:	15 97       	sbiw	r26, 0x05	; 5
    108e:	37 83       	std	Z+7, r19	; 0x07
    1090:	26 83       	std	Z+6, r18	; 0x06
    1092:	14 96       	adiw	r26, 0x04	; 4
    1094:	2d 91       	ld	r18, X+
    1096:	3c 91       	ld	r19, X
    1098:	15 97       	sbiw	r26, 0x05	; 5
    109a:	e9 01       	movw	r28, r18
    109c:	5b 83       	std	Y+3, r21	; 0x03
    109e:	4a 83       	std	Y+2, r20	; 0x02
    10a0:	15 96       	adiw	r26, 0x05	; 5
    10a2:	5c 93       	st	X, r21
    10a4:	4e 93       	st	-X, r20
    10a6:	14 97       	sbiw	r26, 0x04	; 4
    10a8:	a6 89       	ldd	r26, Z+22	; 0x16
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	9d 01       	movw	r18, r26
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	a2 0f       	add	r26, r18
    10bc:	b3 1f       	adc	r27, r19
    10be:	a7 55       	subi	r26, 0x57	; 87
    10c0:	bb 4f       	sbci	r27, 0xFB	; 251
    10c2:	b3 87       	std	Z+11, r27	; 0x0b
    10c4:	a2 87       	std	Z+10, r26	; 0x0a
    10c6:	9c 91       	ld	r25, X
    10c8:	9f 5f       	subi	r25, 0xFF	; 255
    10ca:	9c 93       	st	X, r25
    10cc:	26 89       	ldd	r18, Z+22	; 0x16
    10ce:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    10d2:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    10d6:	96 89       	ldd	r25, Z+22	; 0x16
    10d8:	29 17       	cp	r18, r25
    10da:	08 f0       	brcs	.+2      	; 0x10de <xTaskIncrementTick+0x1da>
    10dc:	49 cf       	rjmp	.-366    	; 0xf70 <xTaskIncrementTick+0x6c>
    10de:	4b cf       	rjmp	.-362    	; 0xf76 <xTaskIncrementTick+0x72>
    10e0:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    10e4:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    10e8:	26 89       	ldd	r18, Z+22	; 0x16
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	f9 01       	movw	r30, r18
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	2e 0f       	add	r18, r30
    10fc:	3f 1f       	adc	r19, r31
    10fe:	f9 01       	movw	r30, r18
    1100:	e7 55       	subi	r30, 0x57	; 87
    1102:	fb 4f       	sbci	r31, 0xFB	; 251
    1104:	90 81       	ld	r25, Z
    1106:	92 30       	cpi	r25, 0x02	; 2
    1108:	08 f0       	brcs	.+2      	; 0x110c <xTaskIncrementTick+0x208>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <xYieldPending>
    1110:	91 11       	cpse	r25, r1
    1112:	0c c0       	rjmp	.+24     	; 0x112c <xTaskIncrementTick+0x228>
    1114:	0c c0       	rjmp	.+24     	; 0x112e <xTaskIncrementTick+0x22a>
    1116:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <xPendedTicks>
    111a:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <xPendedTicks+0x1>
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <xPendedTicks+0x1>
    1124:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <xPendedTicks>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	01 c0       	rjmp	.+2      	; 0x112e <xTaskIncrementTick+0x22a>
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <xTaskResumeAll>:
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	0f 92       	push	r0
    1142:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1146:	81 50       	subi	r24, 0x01	; 1
    1148:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <uxSchedulerSuspended>
    114c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1150:	81 11       	cpse	r24, r1
    1152:	bf c0       	rjmp	.+382    	; 0x12d2 <xTaskResumeAll+0x19a>
    1154:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
    1158:	81 11       	cpse	r24, r1
    115a:	96 c0       	rjmp	.+300    	; 0x1288 <xTaskResumeAll+0x150>
    115c:	bd c0       	rjmp	.+378    	; 0x12d8 <xTaskResumeAll+0x1a0>
    115e:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <xPendingReadyList+0x5>
    1162:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <xPendingReadyList+0x6>
    1166:	06 80       	ldd	r0, Z+6	; 0x06
    1168:	f7 81       	ldd	r31, Z+7	; 0x07
    116a:	e0 2d       	mov	r30, r0
    116c:	a4 89       	ldd	r26, Z+20	; 0x14
    116e:	b5 89       	ldd	r27, Z+21	; 0x15
    1170:	c6 85       	ldd	r28, Z+14	; 0x0e
    1172:	d7 85       	ldd	r29, Z+15	; 0x0f
    1174:	80 89       	ldd	r24, Z+16	; 0x10
    1176:	91 89       	ldd	r25, Z+17	; 0x11
    1178:	9d 83       	std	Y+5, r25	; 0x05
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	c0 89       	ldd	r28, Z+16	; 0x10
    117e:	d1 89       	ldd	r29, Z+17	; 0x11
    1180:	86 85       	ldd	r24, Z+14	; 0x0e
    1182:	97 85       	ldd	r25, Z+15	; 0x0f
    1184:	9b 83       	std	Y+3, r25	; 0x03
    1186:	8a 83       	std	Y+2, r24	; 0x02
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	2d 91       	ld	r18, X+
    118c:	3c 91       	ld	r19, X
    118e:	12 97       	sbiw	r26, 0x02	; 2
    1190:	cf 01       	movw	r24, r30
    1192:	0c 96       	adiw	r24, 0x0c	; 12
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	31 f4       	brne	.+12     	; 0x11a6 <xTaskResumeAll+0x6e>
    119a:	80 89       	ldd	r24, Z+16	; 0x10
    119c:	91 89       	ldd	r25, Z+17	; 0x11
    119e:	12 96       	adiw	r26, 0x02	; 2
    11a0:	9c 93       	st	X, r25
    11a2:	8e 93       	st	-X, r24
    11a4:	11 97       	sbiw	r26, 0x01	; 1
    11a6:	15 8a       	std	Z+21, r1	; 0x15
    11a8:	14 8a       	std	Z+20, r1	; 0x14
    11aa:	8c 91       	ld	r24, X
    11ac:	81 50       	subi	r24, 0x01	; 1
    11ae:	8c 93       	st	X, r24
    11b0:	a2 85       	ldd	r26, Z+10	; 0x0a
    11b2:	b3 85       	ldd	r27, Z+11	; 0x0b
    11b4:	c4 81       	ldd	r28, Z+4	; 0x04
    11b6:	d5 81       	ldd	r29, Z+5	; 0x05
    11b8:	86 81       	ldd	r24, Z+6	; 0x06
    11ba:	97 81       	ldd	r25, Z+7	; 0x07
    11bc:	9d 83       	std	Y+5, r25	; 0x05
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	c6 81       	ldd	r28, Z+6	; 0x06
    11c2:	d7 81       	ldd	r29, Z+7	; 0x07
    11c4:	84 81       	ldd	r24, Z+4	; 0x04
    11c6:	95 81       	ldd	r25, Z+5	; 0x05
    11c8:	9b 83       	std	Y+3, r25	; 0x03
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	8d 91       	ld	r24, X+
    11d0:	9c 91       	ld	r25, X
    11d2:	12 97       	sbiw	r26, 0x02	; 2
    11d4:	9f 01       	movw	r18, r30
    11d6:	2e 5f       	subi	r18, 0xFE	; 254
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	82 17       	cp	r24, r18
    11dc:	93 07       	cpc	r25, r19
    11de:	31 f4       	brne	.+12     	; 0x11ec <xTaskResumeAll+0xb4>
    11e0:	86 81       	ldd	r24, Z+6	; 0x06
    11e2:	97 81       	ldd	r25, Z+7	; 0x07
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	9c 93       	st	X, r25
    11e8:	8e 93       	st	-X, r24
    11ea:	11 97       	sbiw	r26, 0x01	; 1
    11ec:	13 86       	std	Z+11, r1	; 0x0b
    11ee:	12 86       	std	Z+10, r1	; 0x0a
    11f0:	8c 91       	ld	r24, X
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	8c 93       	st	X, r24
    11f6:	86 89       	ldd	r24, Z+22	; 0x16
    11f8:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    11fc:	98 17       	cp	r25, r24
    11fe:	10 f4       	brcc	.+4      	; 0x1204 <xTaskResumeAll+0xcc>
    1200:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	dc 01       	movw	r26, r24
    1208:	aa 0f       	add	r26, r26
    120a:	bb 1f       	adc	r27, r27
    120c:	aa 0f       	add	r26, r26
    120e:	bb 1f       	adc	r27, r27
    1210:	aa 0f       	add	r26, r26
    1212:	bb 1f       	adc	r27, r27
    1214:	8a 0f       	add	r24, r26
    1216:	9b 1f       	adc	r25, r27
    1218:	dc 01       	movw	r26, r24
    121a:	a7 55       	subi	r26, 0x57	; 87
    121c:	bb 4f       	sbci	r27, 0xFB	; 251
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	0d 90       	ld	r0, X+
    1222:	bc 91       	ld	r27, X
    1224:	a0 2d       	mov	r26, r0
    1226:	b5 83       	std	Z+5, r27	; 0x05
    1228:	a4 83       	std	Z+4, r26	; 0x04
    122a:	14 96       	adiw	r26, 0x04	; 4
    122c:	8d 91       	ld	r24, X+
    122e:	9c 91       	ld	r25, X
    1230:	15 97       	sbiw	r26, 0x05	; 5
    1232:	97 83       	std	Z+7, r25	; 0x07
    1234:	86 83       	std	Z+6, r24	; 0x06
    1236:	14 96       	adiw	r26, 0x04	; 4
    1238:	cd 91       	ld	r28, X+
    123a:	dc 91       	ld	r29, X
    123c:	15 97       	sbiw	r26, 0x05	; 5
    123e:	3b 83       	std	Y+3, r19	; 0x03
    1240:	2a 83       	std	Y+2, r18	; 0x02
    1242:	15 96       	adiw	r26, 0x05	; 5
    1244:	3c 93       	st	X, r19
    1246:	2e 93       	st	-X, r18
    1248:	14 97       	sbiw	r26, 0x04	; 4
    124a:	a6 89       	ldd	r26, Z+22	; 0x16
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	cd 01       	movw	r24, r26
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	a8 0f       	add	r26, r24
    125e:	b9 1f       	adc	r27, r25
    1260:	a7 55       	subi	r26, 0x57	; 87
    1262:	bb 4f       	sbci	r27, 0xFB	; 251
    1264:	b3 87       	std	Z+11, r27	; 0x0b
    1266:	a2 87       	std	Z+10, r26	; 0x0a
    1268:	8c 91       	ld	r24, X
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	8c 93       	st	X, r24
    126e:	96 89       	ldd	r25, Z+22	; 0x16
    1270:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1274:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1278:	56 96       	adiw	r26, 0x16	; 22
    127a:	8c 91       	ld	r24, X
    127c:	98 17       	cp	r25, r24
    127e:	30 f0       	brcs	.+12     	; 0x128c <xTaskResumeAll+0x154>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    1286:	02 c0       	rjmp	.+4      	; 0x128c <xTaskResumeAll+0x154>
    1288:	e0 e0       	ldi	r30, 0x00	; 0
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <xPendingReadyList>
    1290:	81 11       	cpse	r24, r1
    1292:	65 cf       	rjmp	.-310    	; 0x115e <xTaskResumeAll+0x26>
    1294:	ef 2b       	or	r30, r31
    1296:	11 f0       	breq	.+4      	; 0x129c <xTaskResumeAll+0x164>
    1298:	0e 94 f5 04 	call	0x9ea	; 0x9ea <prvResetNextTaskUnblockTime>
    129c:	c0 91 70 04 	lds	r28, 0x0470	; 0x800470 <xPendedTicks>
    12a0:	d0 91 71 04 	lds	r29, 0x0471	; 0x800471 <xPendedTicks+0x1>
    12a4:	20 97       	sbiw	r28, 0x00	; 0
    12a6:	69 f0       	breq	.+26     	; 0x12c2 <xTaskResumeAll+0x18a>
    12a8:	0e 94 82 07 	call	0xf04	; 0xf04 <xTaskIncrementTick>
    12ac:	88 23       	and	r24, r24
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <xTaskResumeAll+0x17e>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    12b6:	21 97       	sbiw	r28, 0x01	; 1
    12b8:	b9 f7       	brne	.-18     	; 0x12a8 <xTaskResumeAll+0x170>
    12ba:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <xPendedTicks+0x1>
    12be:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <xPendedTicks>
    12c2:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <xYieldPending>
    12c6:	88 23       	and	r24, r24
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <xTaskResumeAll+0x19e>
    12ca:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <xTaskResumeAll+0x1a0>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <xTaskResumeAll+0x1a0>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <vTaskDelay>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
    12e8:	89 2b       	or	r24, r25
    12ea:	49 f0       	breq	.+18     	; 0x12fe <vTaskDelay+0x1c>
    12ec:	0e 94 7c 07 	call	0xef8	; 0xef8 <vTaskSuspendAll>
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <prvAddCurrentTaskToDelayedList>
    12f8:	0e 94 9c 08 	call	0x1138	; 0x1138 <xTaskResumeAll>
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <vTaskDelay+0x1e>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	81 11       	cpse	r24, r1
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vTaskDelay+0x26>
    1304:	0e 94 88 01 	call	0x310	; 0x310 <vPortYield>
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <vTaskSwitchContext>:
    130e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1312:	88 23       	and	r24, r24
    1314:	21 f0       	breq	.+8      	; 0x131e <vTaskSwitchContext+0x10>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    131c:	08 95       	ret
    131e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <xYieldPending>
    1322:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <uxTopReadyPriority>
    1326:	01 c0       	rjmp	.+2      	; 0x132a <vTaskSwitchContext+0x1c>
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	82 2f       	mov	r24, r18
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	fc 01       	movw	r30, r24
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	e8 0f       	add	r30, r24
    133e:	f9 1f       	adc	r31, r25
    1340:	e7 55       	subi	r30, 0x57	; 87
    1342:	fb 4f       	sbci	r31, 0xFB	; 251
    1344:	30 81       	ld	r19, Z
    1346:	33 23       	and	r19, r19
    1348:	79 f3       	breq	.-34     	; 0x1328 <vTaskSwitchContext+0x1a>
    134a:	ac 01       	movw	r20, r24
    134c:	44 0f       	add	r20, r20
    134e:	55 1f       	adc	r21, r21
    1350:	44 0f       	add	r20, r20
    1352:	55 1f       	adc	r21, r21
    1354:	44 0f       	add	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	48 0f       	add	r20, r24
    135a:	59 1f       	adc	r21, r25
    135c:	df 01       	movw	r26, r30
    135e:	01 80       	ldd	r0, Z+1	; 0x01
    1360:	f2 81       	ldd	r31, Z+2	; 0x02
    1362:	e0 2d       	mov	r30, r0
    1364:	02 80       	ldd	r0, Z+2	; 0x02
    1366:	f3 81       	ldd	r31, Z+3	; 0x03
    1368:	e0 2d       	mov	r30, r0
    136a:	12 96       	adiw	r26, 0x02	; 2
    136c:	fc 93       	st	X, r31
    136e:	ee 93       	st	-X, r30
    1370:	11 97       	sbiw	r26, 0x01	; 1
    1372:	44 55       	subi	r20, 0x54	; 84
    1374:	5b 4f       	sbci	r21, 0xFB	; 251
    1376:	e4 17       	cp	r30, r20
    1378:	f5 07       	cpc	r31, r21
    137a:	29 f4       	brne	.+10     	; 0x1386 <vTaskSwitchContext+0x78>
    137c:	42 81       	ldd	r20, Z+2	; 0x02
    137e:	53 81       	ldd	r21, Z+3	; 0x03
    1380:	fd 01       	movw	r30, r26
    1382:	52 83       	std	Z+2, r21	; 0x02
    1384:	41 83       	std	Z+1, r20	; 0x01
    1386:	fc 01       	movw	r30, r24
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	8e 0f       	add	r24, r30
    1396:	9f 1f       	adc	r25, r31
    1398:	fc 01       	movw	r30, r24
    139a:	e7 55       	subi	r30, 0x57	; 87
    139c:	fb 4f       	sbci	r31, 0xFB	; 251
    139e:	01 80       	ldd	r0, Z+1	; 0x01
    13a0:	f2 81       	ldd	r31, Z+2	; 0x02
    13a2:	e0 2d       	mov	r30, r0
    13a4:	86 81       	ldd	r24, Z+6	; 0x06
    13a6:	97 81       	ldd	r25, Z+7	; 0x07
    13a8:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <pxCurrentTCB+0x1>
    13ac:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <pxCurrentTCB>
    13b0:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <uxTopReadyPriority>
    13b4:	08 95       	ret

000013b6 <vTaskPlaceOnEventList>:
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	eb 01       	movw	r28, r22
    13bc:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
    13c0:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    13c4:	64 5f       	subi	r22, 0xF4	; 244
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	0e 94 8c 00 	call	0x118	; 0x118 <vListInsert>
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	ce 01       	movw	r24, r28
    13d0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <prvAddCurrentTaskToDelayedList>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <xTaskRemoveFromEventList>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	dc 01       	movw	r26, r24
    13e0:	15 96       	adiw	r26, 0x05	; 5
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	16 97       	sbiw	r26, 0x06	; 6
    13e8:	06 80       	ldd	r0, Z+6	; 0x06
    13ea:	f7 81       	ldd	r31, Z+7	; 0x07
    13ec:	e0 2d       	mov	r30, r0
    13ee:	a4 89       	ldd	r26, Z+20	; 0x14
    13f0:	b5 89       	ldd	r27, Z+21	; 0x15
    13f2:	c6 85       	ldd	r28, Z+14	; 0x0e
    13f4:	d7 85       	ldd	r29, Z+15	; 0x0f
    13f6:	80 89       	ldd	r24, Z+16	; 0x10
    13f8:	91 89       	ldd	r25, Z+17	; 0x11
    13fa:	9d 83       	std	Y+5, r25	; 0x05
    13fc:	8c 83       	std	Y+4, r24	; 0x04
    13fe:	c0 89       	ldd	r28, Z+16	; 0x10
    1400:	d1 89       	ldd	r29, Z+17	; 0x11
    1402:	86 85       	ldd	r24, Z+14	; 0x0e
    1404:	97 85       	ldd	r25, Z+15	; 0x0f
    1406:	9b 83       	std	Y+3, r25	; 0x03
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	8d 91       	ld	r24, X+
    140e:	9c 91       	ld	r25, X
    1410:	12 97       	sbiw	r26, 0x02	; 2
    1412:	9f 01       	movw	r18, r30
    1414:	24 5f       	subi	r18, 0xF4	; 244
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	82 17       	cp	r24, r18
    141a:	93 07       	cpc	r25, r19
    141c:	31 f4       	brne	.+12     	; 0x142a <xTaskRemoveFromEventList+0x50>
    141e:	80 89       	ldd	r24, Z+16	; 0x10
    1420:	91 89       	ldd	r25, Z+17	; 0x11
    1422:	12 96       	adiw	r26, 0x02	; 2
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
    1428:	11 97       	sbiw	r26, 0x01	; 1
    142a:	15 8a       	std	Z+21, r1	; 0x15
    142c:	14 8a       	std	Z+20, r1	; 0x14
    142e:	8c 91       	ld	r24, X
    1430:	81 50       	subi	r24, 0x01	; 1
    1432:	8c 93       	st	X, r24
    1434:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1438:	81 11       	cpse	r24, r1
    143a:	60 c0       	rjmp	.+192    	; 0x14fc <xTaskRemoveFromEventList+0x122>
    143c:	a2 85       	ldd	r26, Z+10	; 0x0a
    143e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1440:	c4 81       	ldd	r28, Z+4	; 0x04
    1442:	d5 81       	ldd	r29, Z+5	; 0x05
    1444:	86 81       	ldd	r24, Z+6	; 0x06
    1446:	97 81       	ldd	r25, Z+7	; 0x07
    1448:	9d 83       	std	Y+5, r25	; 0x05
    144a:	8c 83       	std	Y+4, r24	; 0x04
    144c:	c6 81       	ldd	r28, Z+6	; 0x06
    144e:	d7 81       	ldd	r29, Z+7	; 0x07
    1450:	84 81       	ldd	r24, Z+4	; 0x04
    1452:	95 81       	ldd	r25, Z+5	; 0x05
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	12 97       	sbiw	r26, 0x02	; 2
    1460:	9f 01       	movw	r18, r30
    1462:	2e 5f       	subi	r18, 0xFE	; 254
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	82 17       	cp	r24, r18
    1468:	93 07       	cpc	r25, r19
    146a:	31 f4       	brne	.+12     	; 0x1478 <xTaskRemoveFromEventList+0x9e>
    146c:	86 81       	ldd	r24, Z+6	; 0x06
    146e:	97 81       	ldd	r25, Z+7	; 0x07
    1470:	12 96       	adiw	r26, 0x02	; 2
    1472:	9c 93       	st	X, r25
    1474:	8e 93       	st	-X, r24
    1476:	11 97       	sbiw	r26, 0x01	; 1
    1478:	13 86       	std	Z+11, r1	; 0x0b
    147a:	12 86       	std	Z+10, r1	; 0x0a
    147c:	8c 91       	ld	r24, X
    147e:	81 50       	subi	r24, 0x01	; 1
    1480:	8c 93       	st	X, r24
    1482:	86 89       	ldd	r24, Z+22	; 0x16
    1484:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1488:	98 17       	cp	r25, r24
    148a:	10 f4       	brcc	.+4      	; 0x1490 <xTaskRemoveFromEventList+0xb6>
    148c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	dc 01       	movw	r26, r24
    1494:	aa 0f       	add	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	aa 0f       	add	r26, r26
    149a:	bb 1f       	adc	r27, r27
    149c:	aa 0f       	add	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	8a 0f       	add	r24, r26
    14a2:	9b 1f       	adc	r25, r27
    14a4:	dc 01       	movw	r26, r24
    14a6:	a7 55       	subi	r26, 0x57	; 87
    14a8:	bb 4f       	sbci	r27, 0xFB	; 251
    14aa:	11 96       	adiw	r26, 0x01	; 1
    14ac:	0d 90       	ld	r0, X+
    14ae:	bc 91       	ld	r27, X
    14b0:	a0 2d       	mov	r26, r0
    14b2:	b5 83       	std	Z+5, r27	; 0x05
    14b4:	a4 83       	std	Z+4, r26	; 0x04
    14b6:	14 96       	adiw	r26, 0x04	; 4
    14b8:	8d 91       	ld	r24, X+
    14ba:	9c 91       	ld	r25, X
    14bc:	15 97       	sbiw	r26, 0x05	; 5
    14be:	97 83       	std	Z+7, r25	; 0x07
    14c0:	86 83       	std	Z+6, r24	; 0x06
    14c2:	14 96       	adiw	r26, 0x04	; 4
    14c4:	cd 91       	ld	r28, X+
    14c6:	dc 91       	ld	r29, X
    14c8:	15 97       	sbiw	r26, 0x05	; 5
    14ca:	3b 83       	std	Y+3, r19	; 0x03
    14cc:	2a 83       	std	Y+2, r18	; 0x02
    14ce:	15 96       	adiw	r26, 0x05	; 5
    14d0:	3c 93       	st	X, r19
    14d2:	2e 93       	st	-X, r18
    14d4:	14 97       	sbiw	r26, 0x04	; 4
    14d6:	a6 89       	ldd	r26, Z+22	; 0x16
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	cd 01       	movw	r24, r26
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	a8 0f       	add	r26, r24
    14ea:	b9 1f       	adc	r27, r25
    14ec:	a7 55       	subi	r26, 0x57	; 87
    14ee:	bb 4f       	sbci	r27, 0xFB	; 251
    14f0:	b3 87       	std	Z+11, r27	; 0x0b
    14f2:	a2 87       	std	Z+10, r26	; 0x0a
    14f4:	8c 91       	ld	r24, X
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	8c 93       	st	X, r24
    14fa:	1c c0       	rjmp	.+56     	; 0x1534 <xTaskRemoveFromEventList+0x15a>
    14fc:	4a e8       	ldi	r20, 0x8A	; 138
    14fe:	54 e0       	ldi	r21, 0x04	; 4
    1500:	da 01       	movw	r26, r20
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	cd 91       	ld	r28, X+
    1506:	dc 91       	ld	r29, X
    1508:	12 97       	sbiw	r26, 0x02	; 2
    150a:	d7 87       	std	Z+15, r29	; 0x0f
    150c:	c6 87       	std	Z+14, r28	; 0x0e
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	91 8b       	std	Z+17, r25	; 0x11
    1514:	80 8b       	std	Z+16, r24	; 0x10
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	dc 01       	movw	r26, r24
    151c:	13 96       	adiw	r26, 0x03	; 3
    151e:	3c 93       	st	X, r19
    1520:	2e 93       	st	-X, r18
    1522:	12 97       	sbiw	r26, 0x02	; 2
    1524:	3d 83       	std	Y+5, r19	; 0x05
    1526:	2c 83       	std	Y+4, r18	; 0x04
    1528:	55 8b       	std	Z+21, r21	; 0x15
    152a:	44 8b       	std	Z+20, r20	; 0x14
    152c:	da 01       	movw	r26, r20
    152e:	8c 91       	ld	r24, X
    1530:	8f 5f       	subi	r24, 0xFF	; 255
    1532:	8c 93       	st	X, r24
    1534:	96 89       	ldd	r25, Z+22	; 0x16
    1536:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    153a:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    153e:	86 89       	ldd	r24, Z+22	; 0x16
    1540:	89 17       	cp	r24, r25
    1542:	20 f4       	brcc	.+8      	; 0x154c <xTaskRemoveFromEventList+0x172>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    154a:	01 c0       	rjmp	.+2      	; 0x154e <xTaskRemoveFromEventList+0x174>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <vTaskInternalSetTimeOutState>:
    1554:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <xNumOfOverflows>
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
    155c:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <xTickCount>
    1560:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <xTickCount+0x1>
    1564:	32 83       	std	Z+2, r19	; 0x02
    1566:	21 83       	std	Z+1, r18	; 0x01
    1568:	08 95       	ret

0000156a <xTaskCheckForTimeOut>:
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	0f 92       	push	r0
    1576:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <xTickCount>
    157a:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <xTickCount+0x1>
    157e:	dc 01       	movw	r26, r24
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	4d 91       	ld	r20, X+
    1584:	5c 91       	ld	r21, X
    1586:	12 97       	sbiw	r26, 0x02	; 2
    1588:	df 01       	movw	r26, r30
    158a:	a4 1b       	sub	r26, r20
    158c:	b5 0b       	sbc	r27, r21
    158e:	eb 01       	movw	r28, r22
    1590:	28 81       	ld	r18, Y
    1592:	39 81       	ldd	r19, Y+1	; 0x01
    1594:	2f 3f       	cpi	r18, 0xFF	; 255
    1596:	df ef       	ldi	r29, 0xFF	; 255
    1598:	3d 07       	cpc	r19, r29
    159a:	f9 f0       	breq	.+62     	; 0x15da <xTaskCheckForTimeOut+0x70>
    159c:	ec 01       	movw	r28, r24
    159e:	18 81       	ld	r17, Y
    15a0:	c0 91 6e 04 	lds	r28, 0x046E	; 0x80046e <xNumOfOverflows>
    15a4:	1c 17       	cp	r17, r28
    15a6:	41 f0       	breq	.+16     	; 0x15b8 <xTaskCheckForTimeOut+0x4e>
    15a8:	e4 17       	cp	r30, r20
    15aa:	f5 07       	cpc	r31, r21
    15ac:	28 f0       	brcs	.+10     	; 0x15b8 <xTaskCheckForTimeOut+0x4e>
    15ae:	fb 01       	movw	r30, r22
    15b0:	11 82       	std	Z+1, r1	; 0x01
    15b2:	10 82       	st	Z, r1
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	12 c0       	rjmp	.+36     	; 0x15dc <xTaskCheckForTimeOut+0x72>
    15b8:	a2 17       	cp	r26, r18
    15ba:	b3 07       	cpc	r27, r19
    15bc:	48 f4       	brcc	.+18     	; 0x15d0 <xTaskCheckForTimeOut+0x66>
    15be:	fb 01       	movw	r30, r22
    15c0:	2a 1b       	sub	r18, r26
    15c2:	3b 0b       	sbc	r19, r27
    15c4:	31 83       	std	Z+1, r19	; 0x01
    15c6:	20 83       	st	Z, r18
    15c8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <vTaskInternalSetTimeOutState>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <xTaskCheckForTimeOut+0x72>
    15d0:	db 01       	movw	r26, r22
    15d2:	1d 92       	st	X+, r1
    15d4:	1c 92       	st	X, r1
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <xTaskCheckForTimeOut+0x72>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	08 95       	ret

000015e8 <vTaskMissedYield>:
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    15ee:	08 95       	ret

000015f0 <xTaskPriorityInherit>:
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	fc 01       	movw	r30, r24
    15fa:	89 2b       	or	r24, r25
    15fc:	09 f4       	brne	.+2      	; 0x1600 <xTaskPriorityInherit+0x10>
    15fe:	84 c0       	rjmp	.+264    	; 0x1708 <xTaskPriorityInherit+0x118>
    1600:	26 89       	ldd	r18, Z+22	; 0x16
    1602:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1606:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    160a:	56 96       	adiw	r26, 0x16	; 22
    160c:	8c 91       	ld	r24, X
    160e:	28 17       	cp	r18, r24
    1610:	08 f0       	brcs	.+2      	; 0x1614 <xTaskPriorityInherit+0x24>
    1612:	70 c0       	rjmp	.+224    	; 0x16f4 <xTaskPriorityInherit+0x104>
    1614:	84 85       	ldd	r24, Z+12	; 0x0c
    1616:	95 85       	ldd	r25, Z+13	; 0x0d
    1618:	99 23       	and	r25, r25
    161a:	64 f0       	brlt	.+24     	; 0x1634 <xTaskPriorityInherit+0x44>
    161c:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1620:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1624:	56 96       	adiw	r26, 0x16	; 22
    1626:	3c 91       	ld	r19, X
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	83 1b       	sub	r24, r19
    162e:	91 09       	sbc	r25, r1
    1630:	95 87       	std	Z+13, r25	; 0x0d
    1632:	84 87       	std	Z+12, r24	; 0x0c
    1634:	82 85       	ldd	r24, Z+10	; 0x0a
    1636:	93 85       	ldd	r25, Z+11	; 0x0b
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	44 0f       	add	r20, r20
    163e:	55 1f       	adc	r21, r21
    1640:	44 0f       	add	r20, r20
    1642:	55 1f       	adc	r21, r21
    1644:	44 0f       	add	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	24 0f       	add	r18, r20
    164a:	35 1f       	adc	r19, r21
    164c:	27 55       	subi	r18, 0x57	; 87
    164e:	3b 4f       	sbci	r19, 0xFB	; 251
    1650:	82 17       	cp	r24, r18
    1652:	93 07       	cpc	r25, r19
    1654:	09 f0       	breq	.+2      	; 0x1658 <xTaskPriorityInherit+0x68>
    1656:	45 c0       	rjmp	.+138    	; 0x16e2 <xTaskPriorityInherit+0xf2>
    1658:	ef 01       	movw	r28, r30
    165a:	8f 01       	movw	r16, r30
    165c:	0e 5f       	subi	r16, 0xFE	; 254
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	c8 01       	movw	r24, r16
    1662:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
    1666:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    166a:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    166e:	86 89       	ldd	r24, Z+22	; 0x16
    1670:	8e 8b       	std	Y+22, r24	; 0x16
    1672:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1676:	98 17       	cp	r25, r24
    1678:	10 f4       	brcc	.+4      	; 0x167e <xTaskPriorityInherit+0x8e>
    167a:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	fc 01       	movw	r30, r24
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	8e 0f       	add	r24, r30
    1690:	9f 1f       	adc	r25, r31
    1692:	fc 01       	movw	r30, r24
    1694:	e7 55       	subi	r30, 0x57	; 87
    1696:	fb 4f       	sbci	r31, 0xFB	; 251
    1698:	01 80       	ldd	r0, Z+1	; 0x01
    169a:	f2 81       	ldd	r31, Z+2	; 0x02
    169c:	e0 2d       	mov	r30, r0
    169e:	fd 83       	std	Y+5, r31	; 0x05
    16a0:	ec 83       	std	Y+4, r30	; 0x04
    16a2:	84 81       	ldd	r24, Z+4	; 0x04
    16a4:	95 81       	ldd	r25, Z+5	; 0x05
    16a6:	9f 83       	std	Y+7, r25	; 0x07
    16a8:	8e 83       	std	Y+6, r24	; 0x06
    16aa:	a4 81       	ldd	r26, Z+4	; 0x04
    16ac:	b5 81       	ldd	r27, Z+5	; 0x05
    16ae:	13 96       	adiw	r26, 0x03	; 3
    16b0:	1c 93       	st	X, r17
    16b2:	0e 93       	st	-X, r16
    16b4:	12 97       	sbiw	r26, 0x02	; 2
    16b6:	15 83       	std	Z+5, r17	; 0x05
    16b8:	04 83       	std	Z+4, r16	; 0x04
    16ba:	8e 89       	ldd	r24, Y+22	; 0x16
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	fc 01       	movw	r30, r24
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	e8 0f       	add	r30, r24
    16ce:	f9 1f       	adc	r31, r25
    16d0:	e7 55       	subi	r30, 0x57	; 87
    16d2:	fb 4f       	sbci	r31, 0xFB	; 251
    16d4:	fb 87       	std	Y+11, r31	; 0x0b
    16d6:	ea 87       	std	Y+10, r30	; 0x0a
    16d8:	80 81       	ld	r24, Z
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	80 83       	st	Z, r24
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	16 c0       	rjmp	.+44     	; 0x170e <xTaskPriorityInherit+0x11e>
    16e2:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    16e6:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    16ea:	56 96       	adiw	r26, 0x16	; 22
    16ec:	8c 91       	ld	r24, X
    16ee:	86 8b       	std	Z+22, r24	; 0x16
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0d c0       	rjmp	.+26     	; 0x170e <xTaskPriorityInherit+0x11e>
    16f4:	91 a1       	ldd	r25, Z+33	; 0x21
    16f6:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    16fa:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    16fe:	86 89       	ldd	r24, Z+22	; 0x16
    1700:	98 17       	cp	r25, r24
    1702:	20 f0       	brcs	.+8      	; 0x170c <xTaskPriorityInherit+0x11c>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	03 c0       	rjmp	.+6      	; 0x170e <xTaskPriorityInherit+0x11e>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	01 c0       	rjmp	.+2      	; 0x170e <xTaskPriorityInherit+0x11e>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <xTaskPriorityDisinherit>:
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	fc 01       	movw	r30, r24
    1722:	89 2b       	or	r24, r25
    1724:	09 f4       	brne	.+2      	; 0x1728 <xTaskPriorityDisinherit+0x10>
    1726:	51 c0       	rjmp	.+162    	; 0x17ca <xTaskPriorityDisinherit+0xb2>
    1728:	82 a1       	ldd	r24, Z+34	; 0x22
    172a:	81 50       	subi	r24, 0x01	; 1
    172c:	82 a3       	std	Z+34, r24	; 0x22
    172e:	26 89       	ldd	r18, Z+22	; 0x16
    1730:	91 a1       	ldd	r25, Z+33	; 0x21
    1732:	29 17       	cp	r18, r25
    1734:	09 f4       	brne	.+2      	; 0x1738 <xTaskPriorityDisinherit+0x20>
    1736:	4b c0       	rjmp	.+150    	; 0x17ce <xTaskPriorityDisinherit+0xb6>
    1738:	81 11       	cpse	r24, r1
    173a:	4b c0       	rjmp	.+150    	; 0x17d2 <xTaskPriorityDisinherit+0xba>
    173c:	ef 01       	movw	r28, r30
    173e:	8f 01       	movw	r16, r30
    1740:	0e 5f       	subi	r16, 0xFE	; 254
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	c8 01       	movw	r24, r16
    1746:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
    174a:	89 a1       	ldd	r24, Y+33	; 0x21
    174c:	8e 8b       	std	Y+22, r24	; 0x16
    174e:	24 e0       	ldi	r18, 0x04	; 4
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	28 1b       	sub	r18, r24
    1754:	31 09       	sbc	r19, r1
    1756:	3d 87       	std	Y+13, r19	; 0x0d
    1758:	2c 87       	std	Y+12, r18	; 0x0c
    175a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    175e:	98 17       	cp	r25, r24
    1760:	10 f4       	brcc	.+4      	; 0x1766 <xTaskPriorityDisinherit+0x4e>
    1762:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	fc 01       	movw	r30, r24
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	8e 0f       	add	r24, r30
    1778:	9f 1f       	adc	r25, r31
    177a:	fc 01       	movw	r30, r24
    177c:	e7 55       	subi	r30, 0x57	; 87
    177e:	fb 4f       	sbci	r31, 0xFB	; 251
    1780:	01 80       	ldd	r0, Z+1	; 0x01
    1782:	f2 81       	ldd	r31, Z+2	; 0x02
    1784:	e0 2d       	mov	r30, r0
    1786:	fd 83       	std	Y+5, r31	; 0x05
    1788:	ec 83       	std	Y+4, r30	; 0x04
    178a:	84 81       	ldd	r24, Z+4	; 0x04
    178c:	95 81       	ldd	r25, Z+5	; 0x05
    178e:	9f 83       	std	Y+7, r25	; 0x07
    1790:	8e 83       	std	Y+6, r24	; 0x06
    1792:	a4 81       	ldd	r26, Z+4	; 0x04
    1794:	b5 81       	ldd	r27, Z+5	; 0x05
    1796:	13 96       	adiw	r26, 0x03	; 3
    1798:	1c 93       	st	X, r17
    179a:	0e 93       	st	-X, r16
    179c:	12 97       	sbiw	r26, 0x02	; 2
    179e:	15 83       	std	Z+5, r17	; 0x05
    17a0:	04 83       	std	Z+4, r16	; 0x04
    17a2:	ee 89       	ldd	r30, Y+22	; 0x16
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	cf 01       	movw	r24, r30
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	e8 0f       	add	r30, r24
    17b6:	f9 1f       	adc	r31, r25
    17b8:	e7 55       	subi	r30, 0x57	; 87
    17ba:	fb 4f       	sbci	r31, 0xFB	; 251
    17bc:	fb 87       	std	Y+11, r31	; 0x0b
    17be:	ea 87       	std	Y+10, r30	; 0x0a
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	80 83       	st	Z, r24
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <xTaskPriorityDisinherit+0xbc>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <xTaskPriorityDisinherit+0xbc>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <xTaskPriorityDisinherit+0xbc>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <vTaskPriorityDisinheritAfterTimeout>:
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	fc 01       	movw	r30, r24
    17e8:	89 2b       	or	r24, r25
    17ea:	09 f4       	brne	.+2      	; 0x17ee <vTaskPriorityDisinheritAfterTimeout+0x10>
    17ec:	66 c0       	rjmp	.+204    	; 0x18ba <vTaskPriorityDisinheritAfterTimeout+0xdc>
    17ee:	91 a1       	ldd	r25, Z+33	; 0x21
    17f0:	96 17       	cp	r25, r22
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    17f4:	96 2f       	mov	r25, r22
    17f6:	86 89       	ldd	r24, Z+22	; 0x16
    17f8:	98 17       	cp	r25, r24
    17fa:	09 f4       	brne	.+2      	; 0x17fe <vTaskPriorityDisinheritAfterTimeout+0x20>
    17fc:	5e c0       	rjmp	.+188    	; 0x18ba <vTaskPriorityDisinheritAfterTimeout+0xdc>
    17fe:	22 a1       	ldd	r18, Z+34	; 0x22
    1800:	21 30       	cpi	r18, 0x01	; 1
    1802:	09 f0       	breq	.+2      	; 0x1806 <vTaskPriorityDisinheritAfterTimeout+0x28>
    1804:	5a c0       	rjmp	.+180    	; 0x18ba <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1806:	96 8b       	std	Z+22, r25	; 0x16
    1808:	24 85       	ldd	r18, Z+12	; 0x0c
    180a:	35 85       	ldd	r19, Z+13	; 0x0d
    180c:	33 23       	and	r19, r19
    180e:	34 f0       	brlt	.+12     	; 0x181c <vTaskPriorityDisinheritAfterTimeout+0x3e>
    1810:	24 e0       	ldi	r18, 0x04	; 4
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	29 1b       	sub	r18, r25
    1816:	31 09       	sbc	r19, r1
    1818:	35 87       	std	Z+13, r19	; 0x0d
    181a:	24 87       	std	Z+12, r18	; 0x0c
    181c:	22 85       	ldd	r18, Z+10	; 0x0a
    181e:	33 85       	ldd	r19, Z+11	; 0x0b
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	ac 01       	movw	r20, r24
    1824:	44 0f       	add	r20, r20
    1826:	55 1f       	adc	r21, r21
    1828:	44 0f       	add	r20, r20
    182a:	55 1f       	adc	r21, r21
    182c:	44 0f       	add	r20, r20
    182e:	55 1f       	adc	r21, r21
    1830:	84 0f       	add	r24, r20
    1832:	95 1f       	adc	r25, r21
    1834:	87 55       	subi	r24, 0x57	; 87
    1836:	9b 4f       	sbci	r25, 0xFB	; 251
    1838:	28 17       	cp	r18, r24
    183a:	39 07       	cpc	r19, r25
    183c:	f1 f5       	brne	.+124    	; 0x18ba <vTaskPriorityDisinheritAfterTimeout+0xdc>
    183e:	ef 01       	movw	r28, r30
    1840:	8f 01       	movw	r16, r30
    1842:	0e 5f       	subi	r16, 0xFE	; 254
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	c8 01       	movw	r24, r16
    1848:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
    184c:	8e 89       	ldd	r24, Y+22	; 0x16
    184e:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1852:	98 17       	cp	r25, r24
    1854:	10 f4       	brcc	.+4      	; 0x185a <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1856:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	fc 01       	movw	r30, r24
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	ee 0f       	add	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	8e 0f       	add	r24, r30
    186c:	9f 1f       	adc	r25, r31
    186e:	fc 01       	movw	r30, r24
    1870:	e7 55       	subi	r30, 0x57	; 87
    1872:	fb 4f       	sbci	r31, 0xFB	; 251
    1874:	01 80       	ldd	r0, Z+1	; 0x01
    1876:	f2 81       	ldd	r31, Z+2	; 0x02
    1878:	e0 2d       	mov	r30, r0
    187a:	fd 83       	std	Y+5, r31	; 0x05
    187c:	ec 83       	std	Y+4, r30	; 0x04
    187e:	84 81       	ldd	r24, Z+4	; 0x04
    1880:	95 81       	ldd	r25, Z+5	; 0x05
    1882:	9f 83       	std	Y+7, r25	; 0x07
    1884:	8e 83       	std	Y+6, r24	; 0x06
    1886:	a4 81       	ldd	r26, Z+4	; 0x04
    1888:	b5 81       	ldd	r27, Z+5	; 0x05
    188a:	13 96       	adiw	r26, 0x03	; 3
    188c:	1c 93       	st	X, r17
    188e:	0e 93       	st	-X, r16
    1890:	12 97       	sbiw	r26, 0x02	; 2
    1892:	15 83       	std	Z+5, r17	; 0x05
    1894:	04 83       	std	Z+4, r16	; 0x04
    1896:	8e 89       	ldd	r24, Y+22	; 0x16
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	fc 01       	movw	r30, r24
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	e8 0f       	add	r30, r24
    18aa:	f9 1f       	adc	r31, r25
    18ac:	e7 55       	subi	r30, 0x57	; 87
    18ae:	fb 4f       	sbci	r31, 0xFB	; 251
    18b0:	fb 87       	std	Y+11, r31	; 0x0b
    18b2:	ea 87       	std	Y+10, r30	; 0x0a
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	80 83       	st	Z, r24
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    18c4:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18c8:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    18cc:	89 2b       	or	r24, r25
    18ce:	39 f0       	breq	.+14     	; 0x18de <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    18d0:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18d4:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    18d8:	82 a1       	ldd	r24, Z+34	; 0x22
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    18de:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18e2:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    }
    18e6:	08 95       	ret

000018e8 <LCD_write_command>:
	uint8_t i =0;
	while(data[i] != '\0'){
		LCD_write_data(data[i]);
		i++;
	}
}
    18e8:	9b b3       	in	r25, 0x1b	; 27
    18ea:	97 7f       	andi	r25, 0xF7	; 247
    18ec:	9b bb       	out	0x1b, r25	; 27
    18ee:	88 23       	and	r24, r24
    18f0:	24 f4       	brge	.+8      	; 0x18fa <LCD_write_command+0x12>
    18f2:	9b b3       	in	r25, 0x1b	; 27
    18f4:	90 68       	ori	r25, 0x80	; 128
    18f6:	9b bb       	out	0x1b, r25	; 27
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <LCD_write_command+0x18>
    18fa:	9b b3       	in	r25, 0x1b	; 27
    18fc:	9f 77       	andi	r25, 0x7F	; 127
    18fe:	9b bb       	out	0x1b, r25	; 27
    1900:	86 ff       	sbrs	r24, 6
    1902:	04 c0       	rjmp	.+8      	; 0x190c <LCD_write_command+0x24>
    1904:	9b b3       	in	r25, 0x1b	; 27
    1906:	90 64       	ori	r25, 0x40	; 64
    1908:	9b bb       	out	0x1b, r25	; 27
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <LCD_write_command+0x2a>
    190c:	9b b3       	in	r25, 0x1b	; 27
    190e:	9f 7b       	andi	r25, 0xBF	; 191
    1910:	9b bb       	out	0x1b, r25	; 27
    1912:	85 ff       	sbrs	r24, 5
    1914:	04 c0       	rjmp	.+8      	; 0x191e <LCD_write_command+0x36>
    1916:	9b b3       	in	r25, 0x1b	; 27
    1918:	90 62       	ori	r25, 0x20	; 32
    191a:	9b bb       	out	0x1b, r25	; 27
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <LCD_write_command+0x3c>
    191e:	9b b3       	in	r25, 0x1b	; 27
    1920:	9f 7d       	andi	r25, 0xDF	; 223
    1922:	9b bb       	out	0x1b, r25	; 27
    1924:	84 ff       	sbrs	r24, 4
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <LCD_write_command+0x48>
    1928:	9b b3       	in	r25, 0x1b	; 27
    192a:	90 61       	ori	r25, 0x10	; 16
    192c:	9b bb       	out	0x1b, r25	; 27
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <LCD_write_command+0x4e>
    1930:	9b b3       	in	r25, 0x1b	; 27
    1932:	9f 7e       	andi	r25, 0xEF	; 239
    1934:	9b bb       	out	0x1b, r25	; 27
    1936:	9b b3       	in	r25, 0x1b	; 27
    1938:	94 60       	ori	r25, 0x04	; 4
    193a:	9b bb       	out	0x1b, r25	; 27
    193c:	e9 ef       	ldi	r30, 0xF9	; 249
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_write_command+0x58>
    1944:	00 c0       	rjmp	.+0      	; 0x1946 <LCD_write_command+0x5e>
    1946:	00 00       	nop
    1948:	9b b3       	in	r25, 0x1b	; 27
    194a:	9b 7f       	andi	r25, 0xFB	; 251
    194c:	9b bb       	out	0x1b, r25	; 27
    194e:	e9 ef       	ldi	r30, 0xF9	; 249
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <LCD_write_command+0x6a>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <LCD_write_command+0x70>
    1958:	00 00       	nop
    195a:	83 ff       	sbrs	r24, 3
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <LCD_write_command+0x7e>
    195e:	9b b3       	in	r25, 0x1b	; 27
    1960:	90 68       	ori	r25, 0x80	; 128
    1962:	9b bb       	out	0x1b, r25	; 27
    1964:	03 c0       	rjmp	.+6      	; 0x196c <LCD_write_command+0x84>
    1966:	9b b3       	in	r25, 0x1b	; 27
    1968:	9f 77       	andi	r25, 0x7F	; 127
    196a:	9b bb       	out	0x1b, r25	; 27
    196c:	82 ff       	sbrs	r24, 2
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <LCD_write_command+0x90>
    1970:	9b b3       	in	r25, 0x1b	; 27
    1972:	90 64       	ori	r25, 0x40	; 64
    1974:	9b bb       	out	0x1b, r25	; 27
    1976:	03 c0       	rjmp	.+6      	; 0x197e <LCD_write_command+0x96>
    1978:	9b b3       	in	r25, 0x1b	; 27
    197a:	9f 7b       	andi	r25, 0xBF	; 191
    197c:	9b bb       	out	0x1b, r25	; 27
    197e:	81 ff       	sbrs	r24, 1
    1980:	04 c0       	rjmp	.+8      	; 0x198a <LCD_write_command+0xa2>
    1982:	9b b3       	in	r25, 0x1b	; 27
    1984:	90 62       	ori	r25, 0x20	; 32
    1986:	9b bb       	out	0x1b, r25	; 27
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <LCD_write_command+0xa8>
    198a:	9b b3       	in	r25, 0x1b	; 27
    198c:	9f 7d       	andi	r25, 0xDF	; 223
    198e:	9b bb       	out	0x1b, r25	; 27
    1990:	80 ff       	sbrs	r24, 0
    1992:	04 c0       	rjmp	.+8      	; 0x199c <LCD_write_command+0xb4>
    1994:	8b b3       	in	r24, 0x1b	; 27
    1996:	80 61       	ori	r24, 0x10	; 16
    1998:	8b bb       	out	0x1b, r24	; 27
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <LCD_write_command+0xba>
    199c:	8b b3       	in	r24, 0x1b	; 27
    199e:	8f 7e       	andi	r24, 0xEF	; 239
    19a0:	8b bb       	out	0x1b, r24	; 27
    19a2:	8b b3       	in	r24, 0x1b	; 27
    19a4:	84 60       	ori	r24, 0x04	; 4
    19a6:	8b bb       	out	0x1b, r24	; 27
    19a8:	89 ef       	ldi	r24, 0xF9	; 249
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_write_command+0xc4>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <LCD_write_command+0xca>
    19b2:	00 00       	nop
    19b4:	8b b3       	in	r24, 0x1b	; 27
    19b6:	8b 7f       	andi	r24, 0xFB	; 251
    19b8:	8b bb       	out	0x1b, r24	; 27
    19ba:	e9 ef       	ldi	r30, 0xF9	; 249
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	31 97       	sbiw	r30, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <LCD_write_command+0xd6>
    19c2:	00 c0       	rjmp	.+0      	; 0x19c4 <LCD_write_command+0xdc>
    19c4:	00 00       	nop
    19c6:	08 95       	ret

000019c8 <LCD_init>:
    19c8:	8a b3       	in	r24, 0x1a	; 26
    19ca:	8c 6f       	ori	r24, 0xFC	; 252
    19cc:	8a bb       	out	0x1a, r24	; 26
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    19d4:	87 ee       	ldi	r24, 0xE7	; 231
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_init+0x10>
    19dc:	00 c0       	rjmp	.+0      	; 0x19de <LCD_init+0x16>
    19de:	00 00       	nop
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    19e6:	87 ee       	ldi	r24, 0xE7	; 231
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_init+0x22>
    19ee:	00 c0       	rjmp	.+0      	; 0x19f0 <LCD_init+0x28>
    19f0:	00 00       	nop
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    19f8:	87 ee       	ldi	r24, 0xE7	; 231
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_init+0x34>
    1a00:	00 c0       	rjmp	.+0      	; 0x1a02 <LCD_init+0x3a>
    1a02:	00 00       	nop
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1a0a:	88 e2       	ldi	r24, 0x28	; 40
    1a0c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1a10:	88 e0       	ldi	r24, 0x08	; 8
    1a12:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1a1c:	86 e0       	ldi	r24, 0x06	; 6
    1a1e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1a22:	8c e0       	ldi	r24, 0x0C	; 12
    1a24:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1a28:	87 e8       	ldi	r24, 0x87	; 135
    1a2a:	93 e1       	ldi	r25, 0x13	; 19
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_init+0x64>
    1a30:	00 c0       	rjmp	.+0      	; 0x1a32 <LCD_init+0x6a>
    1a32:	00 00       	nop
    1a34:	08 95       	ret

00001a36 <LCD_write_data>:
    1a36:	9b b3       	in	r25, 0x1b	; 27
    1a38:	98 60       	ori	r25, 0x08	; 8
    1a3a:	9b bb       	out	0x1b, r25	; 27
    1a3c:	88 23       	and	r24, r24
    1a3e:	24 f4       	brge	.+8      	; 0x1a48 <LCD_write_data+0x12>
    1a40:	9b b3       	in	r25, 0x1b	; 27
    1a42:	90 68       	ori	r25, 0x80	; 128
    1a44:	9b bb       	out	0x1b, r25	; 27
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <LCD_write_data+0x18>
    1a48:	9b b3       	in	r25, 0x1b	; 27
    1a4a:	9f 77       	andi	r25, 0x7F	; 127
    1a4c:	9b bb       	out	0x1b, r25	; 27
    1a4e:	86 ff       	sbrs	r24, 6
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <LCD_write_data+0x24>
    1a52:	9b b3       	in	r25, 0x1b	; 27
    1a54:	90 64       	ori	r25, 0x40	; 64
    1a56:	9b bb       	out	0x1b, r25	; 27
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <LCD_write_data+0x2a>
    1a5a:	9b b3       	in	r25, 0x1b	; 27
    1a5c:	9f 7b       	andi	r25, 0xBF	; 191
    1a5e:	9b bb       	out	0x1b, r25	; 27
    1a60:	85 ff       	sbrs	r24, 5
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <LCD_write_data+0x36>
    1a64:	9b b3       	in	r25, 0x1b	; 27
    1a66:	90 62       	ori	r25, 0x20	; 32
    1a68:	9b bb       	out	0x1b, r25	; 27
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <LCD_write_data+0x3c>
    1a6c:	9b b3       	in	r25, 0x1b	; 27
    1a6e:	9f 7d       	andi	r25, 0xDF	; 223
    1a70:	9b bb       	out	0x1b, r25	; 27
    1a72:	84 ff       	sbrs	r24, 4
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <LCD_write_data+0x48>
    1a76:	9b b3       	in	r25, 0x1b	; 27
    1a78:	90 61       	ori	r25, 0x10	; 16
    1a7a:	9b bb       	out	0x1b, r25	; 27
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <LCD_write_data+0x4e>
    1a7e:	9b b3       	in	r25, 0x1b	; 27
    1a80:	9f 7e       	andi	r25, 0xEF	; 239
    1a82:	9b bb       	out	0x1b, r25	; 27
    1a84:	9b b3       	in	r25, 0x1b	; 27
    1a86:	94 60       	ori	r25, 0x04	; 4
    1a88:	9b bb       	out	0x1b, r25	; 27
    1a8a:	e9 ef       	ldi	r30, 0xF9	; 249
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	31 97       	sbiw	r30, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_write_data+0x58>
    1a92:	00 c0       	rjmp	.+0      	; 0x1a94 <LCD_write_data+0x5e>
    1a94:	00 00       	nop
    1a96:	9b b3       	in	r25, 0x1b	; 27
    1a98:	9b 7f       	andi	r25, 0xFB	; 251
    1a9a:	9b bb       	out	0x1b, r25	; 27
    1a9c:	e9 ef       	ldi	r30, 0xF9	; 249
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	31 97       	sbiw	r30, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_write_data+0x6a>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <LCD_write_data+0x70>
    1aa6:	00 00       	nop
    1aa8:	83 ff       	sbrs	r24, 3
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <LCD_write_data+0x7e>
    1aac:	9b b3       	in	r25, 0x1b	; 27
    1aae:	90 68       	ori	r25, 0x80	; 128
    1ab0:	9b bb       	out	0x1b, r25	; 27
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <LCD_write_data+0x84>
    1ab4:	9b b3       	in	r25, 0x1b	; 27
    1ab6:	9f 77       	andi	r25, 0x7F	; 127
    1ab8:	9b bb       	out	0x1b, r25	; 27
    1aba:	82 ff       	sbrs	r24, 2
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <LCD_write_data+0x90>
    1abe:	9b b3       	in	r25, 0x1b	; 27
    1ac0:	90 64       	ori	r25, 0x40	; 64
    1ac2:	9b bb       	out	0x1b, r25	; 27
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <LCD_write_data+0x96>
    1ac6:	9b b3       	in	r25, 0x1b	; 27
    1ac8:	9f 7b       	andi	r25, 0xBF	; 191
    1aca:	9b bb       	out	0x1b, r25	; 27
    1acc:	81 ff       	sbrs	r24, 1
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <LCD_write_data+0xa2>
    1ad0:	9b b3       	in	r25, 0x1b	; 27
    1ad2:	90 62       	ori	r25, 0x20	; 32
    1ad4:	9b bb       	out	0x1b, r25	; 27
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <LCD_write_data+0xa8>
    1ad8:	9b b3       	in	r25, 0x1b	; 27
    1ada:	9f 7d       	andi	r25, 0xDF	; 223
    1adc:	9b bb       	out	0x1b, r25	; 27
    1ade:	80 ff       	sbrs	r24, 0
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <LCD_write_data+0xb4>
    1ae2:	8b b3       	in	r24, 0x1b	; 27
    1ae4:	80 61       	ori	r24, 0x10	; 16
    1ae6:	8b bb       	out	0x1b, r24	; 27
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <LCD_write_data+0xba>
    1aea:	8b b3       	in	r24, 0x1b	; 27
    1aec:	8f 7e       	andi	r24, 0xEF	; 239
    1aee:	8b bb       	out	0x1b, r24	; 27
    1af0:	8b b3       	in	r24, 0x1b	; 27
    1af2:	84 60       	ori	r24, 0x04	; 4
    1af4:	8b bb       	out	0x1b, r24	; 27
    1af6:	89 ef       	ldi	r24, 0xF9	; 249
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_write_data+0xc4>
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <LCD_write_data+0xca>
    1b00:	00 00       	nop
    1b02:	8b b3       	in	r24, 0x1b	; 27
    1b04:	8b 7f       	andi	r24, 0xFB	; 251
    1b06:	8b bb       	out	0x1b, r24	; 27
    1b08:	e9 ef       	ldi	r30, 0xF9	; 249
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	31 97       	sbiw	r30, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_write_data+0xd6>
    1b10:	00 c0       	rjmp	.+0      	; 0x1b12 <LCD_write_data+0xdc>
    1b12:	00 00       	nop
    1b14:	08 95       	ret

00001b16 <LCD_write_num>:
* Function Name: LCD_write_num
* Purpose      : write a number on lCD
* Parameters   : num: number to be written
* Return value : void
*****************************************************************************/
void LCD_write_num(u32 num){
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	2a 97       	sbiw	r28, 0x0a	; 10
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) {
    1b2c:	61 15       	cp	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	81 05       	cpc	r24, r1
    1b32:	91 05       	cpc	r25, r1
    1b34:	d1 f4       	brne	.+52     	; 0x1b6a <LCD_write_num+0x54>
		LCD_write_data('0');
    1b36:	80 e3       	ldi	r24, 0x30	; 48
    1b38:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_write_data>
    1b3c:	2c c0       	rjmp	.+88     	; 0x1b96 <LCD_write_num+0x80>
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
    1b3e:	2a e0       	ldi	r18, 0x0A	; 10
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodsi4>
    1b4a:	e1 e0       	ldi	r30, 0x01	; 1
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	ec 0f       	add	r30, r28
    1b50:	fd 1f       	adc	r31, r29
    1b52:	e1 0f       	add	r30, r17
    1b54:	f1 1d       	adc	r31, r1
    1b56:	17 fd       	sbrc	r17, 7
    1b58:	fa 95       	dec	r31
    1b5a:	60 5d       	subi	r22, 0xD0	; 208
    1b5c:	60 83       	st	Z, r22
		num /= 10;
    1b5e:	62 2f       	mov	r22, r18
    1b60:	73 2f       	mov	r23, r19
    1b62:	84 2f       	mov	r24, r20
    1b64:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_data('0');
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
    1b66:	1f 5f       	subi	r17, 0xFF	; 255
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <LCD_write_num+0x56>
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	61 15       	cp	r22, r1
    1b6e:	71 05       	cpc	r23, r1
    1b70:	81 05       	cpc	r24, r1
    1b72:	91 05       	cpc	r25, r1
    1b74:	21 f7       	brne	.-56     	; 0x1b3e <LCD_write_num+0x28>
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
    1b76:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0){
    1b78:	0c c0       	rjmp	.+24     	; 0x1b92 <LCD_write_num+0x7c>
		LCD_write_data(num_arr[i]);
    1b7a:	e1 e0       	ldi	r30, 0x01	; 1
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	ec 0f       	add	r30, r28
    1b80:	fd 1f       	adc	r31, r29
    1b82:	e1 0f       	add	r30, r17
    1b84:	f1 1d       	adc	r31, r1
    1b86:	17 fd       	sbrc	r17, 7
    1b88:	fa 95       	dec	r31
    1b8a:	80 81       	ld	r24, Z
    1b8c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_write_data>
		i--;
    1b90:	11 50       	subi	r17, 0x01	; 1
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while (i >= 0){
    1b92:	11 23       	and	r17, r17
    1b94:	94 f7       	brge	.-28     	; 0x1b7a <LCD_write_num+0x64>
		LCD_write_data(num_arr[i]);
		i--;
	}
    1b96:	2a 96       	adiw	r28, 0x0a	; 10
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	08 95       	ret

00001baa <COUNTER_States>:

void COUNTER_States(void* pvParameters)
{	
	while(1)
	{
		if(Total_sec_counter == 0)
    1baa:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	06 c0       	rjmp	.+12     	; 0x1bbe <COUNTER_States+0x14>
		{
			seconds=90; //RED STATE
    1bb2:	9a e5       	ldi	r25, 0x5A	; 90
    1bb4:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <seconds>
			state = 'R';
    1bb8:	92 e5       	ldi	r25, 0x52	; 82
    1bba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <state>
		}
		if(Total_sec_counter == 91)
    1bbe:	8b 35       	cpi	r24, 0x5B	; 91
    1bc0:	31 f4       	brne	.+12     	; 0x1bce <COUNTER_States+0x24>
		{
			seconds=60; //GREEN STATE
    1bc2:	9c e3       	ldi	r25, 0x3C	; 60
    1bc4:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <seconds>
			state = 'G';
    1bc8:	97 e4       	ldi	r25, 0x47	; 71
    1bca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <state>
		}
		if(Total_sec_counter == 151)
    1bce:	87 39       	cpi	r24, 0x97	; 151
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <COUNTER_States+0x34>
		{
			seconds=10; //Yellow STATE
    1bd2:	9a e0       	ldi	r25, 0x0A	; 10
    1bd4:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <seconds>
			state = 'Y';
    1bd8:	99 e5       	ldi	r25, 0x59	; 89
    1bda:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <state>
		}
		if(Total_sec_counter == 161)
    1bde:	81 3a       	cpi	r24, 0xA1	; 161
    1be0:	41 f4       	brne	.+16     	; 0x1bf2 <COUNTER_States+0x48>
		{
			seconds=90; //RED STATE---re enter
    1be2:	8a e5       	ldi	r24, 0x5A	; 90
    1be4:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <seconds>
			Total_sec_counter = 0;
    1be8:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <Total_sec_counter>
			state = 'R';
    1bec:	82 e5       	ldi	r24, 0x52	; 82
    1bee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
		}
		seconds = seconds - 1;
    1bf2:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1bf6:	81 50       	subi	r24, 0x01	; 1
    1bf8:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <seconds>
		Total_sec_counter ++;
    1bfc:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1c00:	6f 5f       	subi	r22, 0xFF	; 255
    1c02:	60 93 d1 04 	sts	0x04D1, r22	; 0x8004d1 <Total_sec_counter>
		LCD_write_num(Total_sec_counter);
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_write_num>
		vTaskDelay(1000);
    1c10:	88 ee       	ldi	r24, 0xE8	; 232
    1c12:	93 e0       	ldi	r25, 0x03	; 3
    1c14:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
	}
    1c18:	c8 cf       	rjmp	.-112    	; 0x1baa <COUNTER_States>

00001c1a <RED_LIGHT>:

void RED_LIGHT(void* pvParameters)       //called every 1 sec...through callback concept
{   //Task Periodicity
	while(1)
	{
		if( xSemaphore_Seconds != NULL )
    1c1a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1c1e:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <RED_LIGHT+0xe>
    1c26:	4f c0       	rjmp	.+158    	; 0x1cc6 <RED_LIGHT+0xac>
		{
			if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 10 ) == pdTRUE )
    1c28:	6a e0       	ldi	r22, 0x0A	; 10
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	0e 94 44 04 	call	0x888	; 0x888 <xQueueSemaphoreTake>
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <RED_LIGHT+0x1c>
    1c34:	48 c0       	rjmp	.+144    	; 0x1cc6 <RED_LIGHT+0xac>
			{

				if(0 <= Total_sec_counter && Total_sec_counter < 91 && state == 'R')
    1c36:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1c3a:	8b 35       	cpi	r24, 0x5B	; 91
    1c3c:	90 f5       	brcc	.+100    	; 0x1ca2 <RED_LIGHT+0x88>
    1c3e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
    1c42:	82 35       	cpi	r24, 0x52	; 82
    1c44:	71 f5       	brne	.+92     	; 0x1ca2 <RED_LIGHT+0x88>
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
					SET_BIT(PORTB, 7);
    1c46:	88 b3       	in	r24, 0x18	; 24
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	88 bb       	out	0x18, r24	; 24
					for (u8 i = 0; i < 50; i++)
    1c4c:	d0 e0       	ldi	r29, 0x00	; 0
    1c4e:	26 c0       	rjmp	.+76     	; 0x1c9c <RED_LIGHT+0x82>
					{
						SevenSegmentCommonAnode(seconds/10, 2);
    1c50:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1c54:	cd ec       	ldi	r28, 0xCD	; 205
    1c56:	8c 9f       	mul	r24, r28
    1c58:	81 2d       	mov	r24, r1
    1c5a:	11 24       	eor	r1, r1
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	86 95       	lsr	r24
    1c60:	86 95       	lsr	r24
    1c62:	86 95       	lsr	r24
    1c64:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <SevenSegmentCommonAnode>
						vTaskDelay(100);
    1c68:	84 e6       	ldi	r24, 0x64	; 100
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
						SevenSegmentCommonAnode(seconds%10, 1);
    1c70:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1c74:	8c 9f       	mul	r24, r28
    1c76:	c1 2d       	mov	r28, r1
    1c78:	11 24       	eor	r1, r1
    1c7a:	c6 95       	lsr	r28
    1c7c:	c6 95       	lsr	r28
    1c7e:	c6 95       	lsr	r28
    1c80:	cc 0f       	add	r28, r28
    1c82:	9c 2f       	mov	r25, r28
    1c84:	99 0f       	add	r25, r25
    1c86:	99 0f       	add	r25, r25
    1c88:	c9 0f       	add	r28, r25
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	8c 1b       	sub	r24, r28
    1c8e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <SevenSegmentCommonAnode>
						vTaskDelay(100);
    1c92:	84 e6       	ldi	r24, 0x64	; 100
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>

				if(0 <= Total_sec_counter && Total_sec_counter < 91 && state == 'R')
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
					SET_BIT(PORTB, 7);
					for (u8 i = 0; i < 50; i++)
    1c9a:	df 5f       	subi	r29, 0xFF	; 255
    1c9c:	d2 33       	cpi	r29, 0x32	; 50
    1c9e:	c0 f2       	brcs	.-80     	; 0x1c50 <RED_LIGHT+0x36>
    1ca0:	07 c0       	rjmp	.+14     	; 0x1cb0 <RED_LIGHT+0x96>
					}
				}
				else
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 0);
					CLR_BIT(PORTB, 7);
    1ca2:	88 b3       	in	r24, 0x18	; 24
    1ca4:	8f 77       	andi	r24, 0x7F	; 127
    1ca6:	88 bb       	out	0x18, r24	; 24
					vTaskDelay(50);
    1ca8:	82 e3       	ldi	r24, 0x32	; 50
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
				}
				xSemaphoreGive(xSemaphore_Seconds);
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1cbe:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1cc2:	0e 94 b2 03 	call	0x764	; 0x764 <xQueueGenericSend>
			else
			{
				
			}
		}
		vTaskDelay(200);
    1cc6:	88 ec       	ldi	r24, 0xC8	; 200
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
	}
    1cce:	a5 cf       	rjmp	.-182    	; 0x1c1a <RED_LIGHT>

00001cd0 <YELLOW_LIGHT>:

void YELLOW_LIGHT(void* pvParameters)
{
	while(1)
	{
		if( xSemaphore_Seconds != NULL )
    1cd0:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1cd4:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	09 f4       	brne	.+2      	; 0x1cde <YELLOW_LIGHT+0xe>
    1cdc:	4e c0       	rjmp	.+156    	; 0x1d7a <YELLOW_LIGHT+0xaa>
		{
			if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 10 ) == pdTRUE )
    1cde:	6a e0       	ldi	r22, 0x0A	; 10
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	0e 94 44 04 	call	0x888	; 0x888 <xQueueSemaphoreTake>
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <YELLOW_LIGHT+0x1c>
    1cea:	47 c0       	rjmp	.+142    	; 0x1d7a <YELLOW_LIGHT+0xaa>
			{

				if(91 <= Total_sec_counter && Total_sec_counter < 151 && state == 'Y')
    1cec:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1cf0:	8b 55       	subi	r24, 0x5B	; 91
    1cf2:	8c 33       	cpi	r24, 0x3C	; 60
    1cf4:	80 f5       	brcc	.+96     	; 0x1d56 <YELLOW_LIGHT+0x86>
    1cf6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
    1cfa:	89 35       	cpi	r24, 0x59	; 89
    1cfc:	61 f5       	brne	.+88     	; 0x1d56 <YELLOW_LIGHT+0x86>
    1cfe:	27 c0       	rjmp	.+78     	; 0x1d4e <YELLOW_LIGHT+0x7e>
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
				//	SET_BIT(PORTA, 4);
					for (u8 i = 0; i < 50; i++)
					{
						SevenSegmentCommonAnode(seconds/10, 2);
    1d00:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1d04:	cd ec       	ldi	r28, 0xCD	; 205
    1d06:	8c 9f       	mul	r24, r28
    1d08:	81 2d       	mov	r24, r1
    1d0a:	11 24       	eor	r1, r1
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	86 95       	lsr	r24
    1d10:	86 95       	lsr	r24
    1d12:	86 95       	lsr	r24
    1d14:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <SevenSegmentCommonAnode>
						vTaskDelay(100);
    1d18:	84 e6       	ldi	r24, 0x64	; 100
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
						SevenSegmentCommonAnode(seconds%10, 1);
    1d20:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1d24:	8c 9f       	mul	r24, r28
    1d26:	c1 2d       	mov	r28, r1
    1d28:	11 24       	eor	r1, r1
    1d2a:	c6 95       	lsr	r28
    1d2c:	c6 95       	lsr	r28
    1d2e:	c6 95       	lsr	r28
    1d30:	cc 0f       	add	r28, r28
    1d32:	9c 2f       	mov	r25, r28
    1d34:	99 0f       	add	r25, r25
    1d36:	99 0f       	add	r25, r25
    1d38:	c9 0f       	add	r28, r25
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	8c 1b       	sub	r24, r28
    1d3e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <SevenSegmentCommonAnode>
						vTaskDelay(100);
    1d42:	84 e6       	ldi	r24, 0x64	; 100
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>

				if(91 <= Total_sec_counter && Total_sec_counter < 151 && state == 'Y')
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
				//	SET_BIT(PORTA, 4);
					for (u8 i = 0; i < 50; i++)
    1d4a:	df 5f       	subi	r29, 0xFF	; 255
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <YELLOW_LIGHT+0x80>
    1d4e:	d0 e0       	ldi	r29, 0x00	; 0
    1d50:	d2 33       	cpi	r29, 0x32	; 50
    1d52:	b0 f2       	brcs	.-84     	; 0x1d00 <YELLOW_LIGHT+0x30>
    1d54:	07 c0       	rjmp	.+14     	; 0x1d64 <YELLOW_LIGHT+0x94>
					}
				}
				else
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 0);
					CLR_BIT(PORTA, 4);
    1d56:	8b b3       	in	r24, 0x1b	; 27
    1d58:	8f 7e       	andi	r24, 0xEF	; 239
    1d5a:	8b bb       	out	0x1b, r24	; 27
					vTaskDelay(50);
    1d5c:	82 e3       	ldi	r24, 0x32	; 50
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
				}
				xSemaphoreGive(xSemaphore_Seconds);
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1d72:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1d76:	0e 94 b2 03 	call	0x764	; 0x764 <xQueueGenericSend>
			else
			{
				
			}
		}
		vTaskDelay(300);
    1d7a:	8c e2       	ldi	r24, 0x2C	; 44
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
	}
    1d82:	a6 cf       	rjmp	.-180    	; 0x1cd0 <YELLOW_LIGHT>

00001d84 <GREEN_LIGHT>:
}
void GREEN_LIGHT(void* pvParameters)
{
	while(1)
	{
		if( xSemaphore_Seconds != NULL )
    1d84:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1d88:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <GREEN_LIGHT+0xe>
    1d90:	4e c0       	rjmp	.+156    	; 0x1e2e <GREEN_LIGHT+0xaa>
		{
			if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 10 ) == pdTRUE )
    1d92:	6a e0       	ldi	r22, 0x0A	; 10
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	0e 94 44 04 	call	0x888	; 0x888 <xQueueSemaphoreTake>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <GREEN_LIGHT+0x1c>
    1d9e:	47 c0       	rjmp	.+142    	; 0x1e2e <GREEN_LIGHT+0xaa>
			{

				if(91 <= Total_sec_counter && Total_sec_counter < 151 && state == 'G')
    1da0:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1da4:	8b 55       	subi	r24, 0x5B	; 91
    1da6:	8c 33       	cpi	r24, 0x3C	; 60
    1da8:	80 f5       	brcc	.+96     	; 0x1e0a <GREEN_LIGHT+0x86>
    1daa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
    1dae:	87 34       	cpi	r24, 0x47	; 71
    1db0:	61 f5       	brne	.+88     	; 0x1e0a <GREEN_LIGHT+0x86>
    1db2:	27 c0       	rjmp	.+78     	; 0x1e02 <GREEN_LIGHT+0x7e>
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
					//SET_BIT(PORTA, 5);
					for (u8 i = 0; i < 50; i++)
					{
						SevenSegmentCommonAnode(seconds/10, 2);
    1db4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1db8:	cd ec       	ldi	r28, 0xCD	; 205
    1dba:	8c 9f       	mul	r24, r28
    1dbc:	81 2d       	mov	r24, r1
    1dbe:	11 24       	eor	r1, r1
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	86 95       	lsr	r24
    1dc4:	86 95       	lsr	r24
    1dc6:	86 95       	lsr	r24
    1dc8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <SevenSegmentCommonAnode>
						vTaskDelay(100);
    1dcc:	84 e6       	ldi	r24, 0x64	; 100
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
						SevenSegmentCommonAnode(seconds%10, 1);
    1dd4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <seconds>
    1dd8:	8c 9f       	mul	r24, r28
    1dda:	c1 2d       	mov	r28, r1
    1ddc:	11 24       	eor	r1, r1
    1dde:	c6 95       	lsr	r28
    1de0:	c6 95       	lsr	r28
    1de2:	c6 95       	lsr	r28
    1de4:	cc 0f       	add	r28, r28
    1de6:	9c 2f       	mov	r25, r28
    1de8:	99 0f       	add	r25, r25
    1dea:	99 0f       	add	r25, r25
    1dec:	c9 0f       	add	r28, r25
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	8c 1b       	sub	r24, r28
    1df2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <SevenSegmentCommonAnode>
						vTaskDelay(100);
    1df6:	84 e6       	ldi	r24, 0x64	; 100
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>

				if(91 <= Total_sec_counter && Total_sec_counter < 151 && state == 'G')
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
					//SET_BIT(PORTA, 5);
					for (u8 i = 0; i < 50; i++)
    1dfe:	df 5f       	subi	r29, 0xFF	; 255
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <GREEN_LIGHT+0x80>
    1e02:	d0 e0       	ldi	r29, 0x00	; 0
    1e04:	d2 33       	cpi	r29, 0x32	; 50
    1e06:	b0 f2       	brcs	.-84     	; 0x1db4 <GREEN_LIGHT+0x30>
    1e08:	07 c0       	rjmp	.+14     	; 0x1e18 <GREEN_LIGHT+0x94>
					}
				}
				else
				{
					//DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 0);
					CLR_BIT(PORTA, 5);
    1e0a:	8b b3       	in	r24, 0x1b	; 27
    1e0c:	8f 7d       	andi	r24, 0xDF	; 223
    1e0e:	8b bb       	out	0x1b, r24	; 27
					vTaskDelay(50);
    1e10:	82 e3       	ldi	r24, 0x32	; 50
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
				}
				xSemaphoreGive(xSemaphore_Seconds);
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1e26:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1e2a:	0e 94 b2 03 	call	0x764	; 0x764 <xQueueGenericSend>
			{
				
			}
		}
	
		vTaskDelay(400);
    1e2e:	80 e9       	ldi	r24, 0x90	; 144
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vTaskDelay>
	}
    1e36:	a6 cf       	rjmp	.-180    	; 0x1d84 <GREEN_LIGHT>

00001e38 <main>:
	//BaseType_t xError_Status;
	/*DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, 0xff);//Red
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN4, 0xff);
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN5, 0xff);*/
	
	SET_BIT(DDRB, 7);
    1e38:	87 b3       	in	r24, 0x17	; 23
    1e3a:	80 68       	ori	r24, 0x80	; 128
    1e3c:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA, 4);
    1e3e:	8a b3       	in	r24, 0x1a	; 26
    1e40:	80 61       	ori	r24, 0x10	; 16
    1e42:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA, 5);
    1e44:	8a b3       	in	r24, 0x1a	; 26
    1e46:	80 62       	ori	r24, 0x20	; 32
    1e48:	8a bb       	out	0x1a, r24	; 26
	
	SevenSegmentCommonAnode_INIT();
    1e4a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <SevenSegmentCommonAnode_INIT>
	LCD_init();
    1e4e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <LCD_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e52:	87 ea       	ldi	r24, 0xA7	; 167
    1e54:	91 e6       	ldi	r25, 0x61	; 97
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <main+0x1e>
    1e5a:	00 c0       	rjmp	.+0      	; 0x1e5c <main+0x24>
    1e5c:	00 00       	nop
	_delay_ms(100);
	LCD_write_command(0x0C); // display on, cursor off
    1e5e:	8c e0       	ldi	r24, 0x0C	; 12
    1e60:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
    1e64:	87 ea       	ldi	r24, 0xA7	; 167
    1e66:	91 e6       	ldi	r25, 0x61	; 97
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <main+0x30>
    1e6c:	00 c0       	rjmp	.+0      	; 0x1e6e <main+0x36>
    1e6e:	00 00       	nop
	_delay_ms(100);
	LCD_write_command(0x01);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_write_command>
	vSemaphoreCreateBinary( xSemaphore_Seconds );
    1e76:	43 e0       	ldi	r20, 0x03	; 3
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <xQueueGenericCreate>
    1e80:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1e84:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <xSemaphore_Seconds>
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <main+0x62>
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	0e 94 b2 03 	call	0x764	; 0x764 <xQueueGenericSend>
	
	xTaskCreate(COUNTER_States,(const char*)"COUNT",300,NULL,TASK1_PRIORITY,&xTask1_H);
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	f9 ed       	ldi	r31, 0xD9	; 217
    1e9e:	ef 2e       	mov	r14, r31
    1ea0:	f4 e0       	ldi	r31, 0x04	; 4
    1ea2:	ff 2e       	mov	r15, r31
    1ea4:	f0 2d       	mov	r31, r0
    1ea6:	00 e0       	ldi	r16, 0x00	; 0
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4c e2       	ldi	r20, 0x2C	; 44
    1eae:	51 e0       	ldi	r21, 0x01	; 1
    1eb0:	67 e6       	ldi	r22, 0x67	; 103
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	85 ed       	ldi	r24, 0xD5	; 213
    1eb6:	9d e0       	ldi	r25, 0x0D	; 13
    1eb8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <xTaskCreate>
	xTaskCreate(RED_LIGHT,(const char*)"RED",200,NULL,TASK2_PRIORITY,&xTask2_H);
    1ebc:	0f 2e       	mov	r0, r31
    1ebe:	f7 ed       	ldi	r31, 0xD7	; 215
    1ec0:	ef 2e       	mov	r14, r31
    1ec2:	f4 e0       	ldi	r31, 0x04	; 4
    1ec4:	ff 2e       	mov	r15, r31
    1ec6:	f0 2d       	mov	r31, r0
    1ec8:	01 e0       	ldi	r16, 0x01	; 1
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	48 ec       	ldi	r20, 0xC8	; 200
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	6d e6       	ldi	r22, 0x6D	; 109
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	8d e0       	ldi	r24, 0x0D	; 13
    1ed8:	9e e0       	ldi	r25, 0x0E	; 14
    1eda:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <xTaskCreate>
	xTaskCreate(YELLOW_LIGHT,(const char*)"YELLO",200,NULL,TASK4_PRIORITY,&xTask3_H);
    1ede:	0f 2e       	mov	r0, r31
    1ee0:	f5 ed       	ldi	r31, 0xD5	; 213
    1ee2:	ef 2e       	mov	r14, r31
    1ee4:	f4 e0       	ldi	r31, 0x04	; 4
    1ee6:	ff 2e       	mov	r15, r31
    1ee8:	f0 2d       	mov	r31, r0
    1eea:	03 e0       	ldi	r16, 0x03	; 3
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	48 ec       	ldi	r20, 0xC8	; 200
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	61 e7       	ldi	r22, 0x71	; 113
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	88 e6       	ldi	r24, 0x68	; 104
    1efa:	9e e0       	ldi	r25, 0x0E	; 14
    1efc:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <xTaskCreate>
	xTaskCreate(GREEN_LIGHT,(const char*)"GREEN",200,NULL,TASK3_PRIORITY,&xTask4_H);
    1f00:	0f 2e       	mov	r0, r31
    1f02:	f3 ed       	ldi	r31, 0xD3	; 211
    1f04:	ef 2e       	mov	r14, r31
    1f06:	f4 e0       	ldi	r31, 0x04	; 4
    1f08:	ff 2e       	mov	r15, r31
    1f0a:	f0 2d       	mov	r31, r0
    1f0c:	02 e0       	ldi	r16, 0x02	; 2
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	48 ec       	ldi	r20, 0xC8	; 200
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	67 e7       	ldi	r22, 0x77	; 119
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	82 ec       	ldi	r24, 0xC2	; 194
    1f1c:	9e e0       	ldi	r25, 0x0E	; 14
    1f1e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <xTaskCreate>

	 vTaskStartScheduler();
    1f22:	0e 94 50 07 	call	0xea0	; 0xea0 <vTaskStartScheduler>
    1f26:	ff cf       	rjmp	.-2      	; 0x1f26 <main+0xee>

00001f28 <SevenSegmentCommonAnode_INIT>:

#include "seven_segment.h"

void SevenSegmentCommonAnode_INIT(void)
{
	SET_BIT(DDRB, 0);
    1f28:	87 b3       	in	r24, 0x17	; 23
    1f2a:	81 60       	ori	r24, 0x01	; 1
    1f2c:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 1);
    1f2e:	87 b3       	in	r24, 0x17	; 23
    1f30:	82 60       	ori	r24, 0x02	; 2
    1f32:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 2);
    1f34:	87 b3       	in	r24, 0x17	; 23
    1f36:	84 60       	ori	r24, 0x04	; 4
    1f38:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 4);
    1f3a:	87 b3       	in	r24, 0x17	; 23
    1f3c:	80 61       	ori	r24, 0x10	; 16
    1f3e:	87 bb       	out	0x17, r24	; 23

	SET_BIT(DDRB, 5);
    1f40:	87 b3       	in	r24, 0x17	; 23
    1f42:	80 62       	ori	r24, 0x20	; 32
    1f44:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 6);
    1f46:	87 b3       	in	r24, 0x17	; 23
    1f48:	80 64       	ori	r24, 0x40	; 64
    1f4a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA, 2);
    1f4c:	8a b3       	in	r24, 0x1a	; 26
    1f4e:	84 60       	ori	r24, 0x04	; 4
    1f50:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA, 3);
    1f52:	8a b3       	in	r24, 0x1a	; 26
    1f54:	88 60       	ori	r24, 0x08	; 8
    1f56:	8a bb       	out	0x1a, r24	; 26
    1f58:	08 95       	ret

00001f5a <SevenSegmentCommonAnode>:
}

void SevenSegmentCommonAnode(u8 num,u8 EN)
{	
    1f5a:	e8 2f       	mov	r30, r24
      switch(EN)
    1f5c:	63 30       	cpi	r22, 0x03	; 3
    1f5e:	29 f1       	breq	.+74     	; 0x1faa <SevenSegmentCommonAnode+0x50>
    1f60:	28 f4       	brcc	.+10     	; 0x1f6c <SevenSegmentCommonAnode+0x12>
    1f62:	61 30       	cpi	r22, 0x01	; 1
    1f64:	41 f0       	breq	.+16     	; 0x1f76 <SevenSegmentCommonAnode+0x1c>
    1f66:	62 30       	cpi	r22, 0x02	; 2
    1f68:	99 f0       	breq	.+38     	; 0x1f90 <SevenSegmentCommonAnode+0x36>
    1f6a:	45 c0       	rjmp	.+138    	; 0x1ff6 <SevenSegmentCommonAnode+0x9c>
    1f6c:	64 30       	cpi	r22, 0x04	; 4
    1f6e:	51 f1       	breq	.+84     	; 0x1fc4 <SevenSegmentCommonAnode+0x6a>
    1f70:	65 30       	cpi	r22, 0x05	; 5
    1f72:	a9 f1       	breq	.+106    	; 0x1fde <SevenSegmentCommonAnode+0x84>
    1f74:	40 c0       	rjmp	.+128    	; 0x1ff6 <SevenSegmentCommonAnode+0x9c>
      {
      case 1:
		 SET_BIT(PORTB, 5);
    1f76:	88 b3       	in	r24, 0x18	; 24
    1f78:	80 62       	ori	r24, 0x20	; 32
    1f7a:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 6);
    1f7c:	88 b3       	in	r24, 0x18	; 24
    1f7e:	8f 7b       	andi	r24, 0xBF	; 191
    1f80:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTA, 2);
    1f82:	8b b3       	in	r24, 0x1b	; 27
    1f84:	84 60       	ori	r24, 0x04	; 4
    1f86:	8b bb       	out	0x1b, r24	; 27
		 SET_BIT(PORTA, 3);
    1f88:	8b b3       	in	r24, 0x1b	; 27
    1f8a:	88 60       	ori	r24, 0x08	; 8
    1f8c:	8b bb       	out	0x1b, r24	; 27
      	 
		 break;
    1f8e:	33 c0       	rjmp	.+102    	; 0x1ff6 <SevenSegmentCommonAnode+0x9c>
      case 2:
       	 CLR_BIT(PORTB, 5);
    1f90:	88 b3       	in	r24, 0x18	; 24
    1f92:	8f 7d       	andi	r24, 0xDF	; 223
    1f94:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 6);
    1f96:	88 b3       	in	r24, 0x18	; 24
    1f98:	80 64       	ori	r24, 0x40	; 64
    1f9a:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTA, 2);
    1f9c:	8b b3       	in	r24, 0x1b	; 27
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	8b bb       	out	0x1b, r24	; 27
		 SET_BIT(PORTA, 3);
    1fa2:	8b b3       	in	r24, 0x1b	; 27
    1fa4:	88 60       	ori	r24, 0x08	; 8
    1fa6:	8b bb       	out	0x1b, r24	; 27
       	 break;
    1fa8:	26 c0       	rjmp	.+76     	; 0x1ff6 <SevenSegmentCommonAnode+0x9c>
      case 3:
       	 SET_BIT(PORTB, 5);
    1faa:	88 b3       	in	r24, 0x18	; 24
    1fac:	80 62       	ori	r24, 0x20	; 32
    1fae:	88 bb       	out	0x18, r24	; 24
       	 SET_BIT(PORTB, 6);
    1fb0:	88 b3       	in	r24, 0x18	; 24
    1fb2:	80 64       	ori	r24, 0x40	; 64
    1fb4:	88 bb       	out	0x18, r24	; 24
       	 CLR_BIT(PORTA, 2);
    1fb6:	8b b3       	in	r24, 0x1b	; 27
    1fb8:	8b 7f       	andi	r24, 0xFB	; 251
    1fba:	8b bb       	out	0x1b, r24	; 27
       	 SET_BIT(PORTA, 3);
    1fbc:	8b b3       	in	r24, 0x1b	; 27
    1fbe:	88 60       	ori	r24, 0x08	; 8
    1fc0:	8b bb       	out	0x1b, r24	; 27
		break;
    1fc2:	19 c0       	rjmp	.+50     	; 0x1ff6 <SevenSegmentCommonAnode+0x9c>
      case 4:
       	 SET_BIT(PORTB, 5);
    1fc4:	88 b3       	in	r24, 0x18	; 24
    1fc6:	80 62       	ori	r24, 0x20	; 32
    1fc8:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 6);
    1fca:	88 b3       	in	r24, 0x18	; 24
    1fcc:	80 64       	ori	r24, 0x40	; 64
    1fce:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTA, 2);
    1fd0:	8b b3       	in	r24, 0x1b	; 27
    1fd2:	84 60       	ori	r24, 0x04	; 4
    1fd4:	8b bb       	out	0x1b, r24	; 27
		 CLR_BIT(PORTA, 3);
    1fd6:	8b b3       	in	r24, 0x1b	; 27
    1fd8:	87 7f       	andi	r24, 0xF7	; 247
    1fda:	8b bb       	out	0x1b, r24	; 27
       	 break;
    1fdc:	0c c0       	rjmp	.+24     	; 0x1ff6 <SevenSegmentCommonAnode+0x9c>
      case 5:
        SET_BIT(PORTB, 5);
    1fde:	88 b3       	in	r24, 0x18	; 24
    1fe0:	80 62       	ori	r24, 0x20	; 32
    1fe2:	88 bb       	out	0x18, r24	; 24
   	    SET_BIT(PORTB, 6);
    1fe4:	88 b3       	in	r24, 0x18	; 24
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	88 bb       	out	0x18, r24	; 24
  	    SET_BIT(PORTA, 2);
    1fea:	8b b3       	in	r24, 0x1b	; 27
    1fec:	84 60       	ori	r24, 0x04	; 4
    1fee:	8b bb       	out	0x1b, r24	; 27
		SET_BIT(PORTA, 3);
    1ff0:	8b b3       	in	r24, 0x1b	; 27
    1ff2:	88 60       	ori	r24, 0x08	; 8
    1ff4:	8b bb       	out	0x1b, r24	; 27
      	break;
      }
      switch(num)
    1ff6:	8e 2f       	mov	r24, r30
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	8a 30       	cpi	r24, 0x0A	; 10
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	08 f0       	brcs	.+2      	; 0x2002 <SevenSegmentCommonAnode+0xa8>
    2000:	86 c0       	rjmp	.+268    	; 0x210e <SevenSegmentCommonAnode+0x1b4>
    2002:	fc 01       	movw	r30, r24
    2004:	e6 5d       	subi	r30, 0xD6	; 214
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	0c 94 be 10 	jmp	0x217c	; 0x217c <__tablejump2__>
      {
      case 0:
     	 CLR_BIT(PORTB, 0);
    200c:	88 b3       	in	r24, 0x18	; 24
    200e:	8e 7f       	andi	r24, 0xFE	; 254
    2010:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    2012:	88 b3       	in	r24, 0x18	; 24
    2014:	8d 7f       	andi	r24, 0xFD	; 253
    2016:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    2018:	88 b3       	in	r24, 0x18	; 24
    201a:	8b 7f       	andi	r24, 0xFB	; 251
    201c:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    201e:	88 b3       	in	r24, 0x18	; 24
    2020:	8f 7e       	andi	r24, 0xEF	; 239
    2022:	88 bb       	out	0x18, r24	; 24
		 
         break;
    2024:	08 95       	ret
      case 1:
     	 SET_BIT(PORTB, 0);
    2026:	88 b3       	in	r24, 0x18	; 24
    2028:	81 60       	ori	r24, 0x01	; 1
    202a:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    202c:	88 b3       	in	r24, 0x18	; 24
    202e:	8d 7f       	andi	r24, 0xFD	; 253
    2030:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    2032:	88 b3       	in	r24, 0x18	; 24
    2034:	8b 7f       	andi	r24, 0xFB	; 251
    2036:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    2038:	88 b3       	in	r24, 0x18	; 24
    203a:	8f 7e       	andi	r24, 0xEF	; 239
    203c:	88 bb       	out	0x18, r24	; 24
         break;
    203e:	08 95       	ret
      case 2:
     	 CLR_BIT(PORTB, 0);
    2040:	88 b3       	in	r24, 0x18	; 24
    2042:	8e 7f       	andi	r24, 0xFE	; 254
    2044:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    2046:	88 b3       	in	r24, 0x18	; 24
    2048:	82 60       	ori	r24, 0x02	; 2
    204a:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    204c:	88 b3       	in	r24, 0x18	; 24
    204e:	8b 7f       	andi	r24, 0xFB	; 251
    2050:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    2052:	88 b3       	in	r24, 0x18	; 24
    2054:	8f 7e       	andi	r24, 0xEF	; 239
    2056:	88 bb       	out	0x18, r24	; 24
         break;
    2058:	08 95       	ret
      case 3:
     	 SET_BIT(PORTB, 0);
    205a:	88 b3       	in	r24, 0x18	; 24
    205c:	81 60       	ori	r24, 0x01	; 1
    205e:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    2060:	88 b3       	in	r24, 0x18	; 24
    2062:	82 60       	ori	r24, 0x02	; 2
    2064:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    2066:	88 b3       	in	r24, 0x18	; 24
    2068:	8b 7f       	andi	r24, 0xFB	; 251
    206a:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    206c:	88 b3       	in	r24, 0x18	; 24
    206e:	8f 7e       	andi	r24, 0xEF	; 239
    2070:	88 bb       	out	0x18, r24	; 24
         break;
    2072:	08 95       	ret
      case 4:
     	 CLR_BIT(PORTB, 0);
    2074:	88 b3       	in	r24, 0x18	; 24
    2076:	8e 7f       	andi	r24, 0xFE	; 254
    2078:	88 bb       	out	0x18, r24	; 24
         CLR_BIT(PORTB, 1);
    207a:	88 b3       	in	r24, 0x18	; 24
    207c:	8d 7f       	andi	r24, 0xFD	; 253
    207e:	88 bb       	out	0x18, r24	; 24
         SET_BIT(PORTB, 2);
    2080:	88 b3       	in	r24, 0x18	; 24
    2082:	84 60       	ori	r24, 0x04	; 4
    2084:	88 bb       	out	0x18, r24	; 24
         CLR_BIT(PORTB, 4);
    2086:	88 b3       	in	r24, 0x18	; 24
    2088:	8f 7e       	andi	r24, 0xEF	; 239
    208a:	88 bb       	out	0x18, r24	; 24
		 break;
    208c:	08 95       	ret
      case 5:
     	 SET_BIT(PORTB, 0);
    208e:	88 b3       	in	r24, 0x18	; 24
    2090:	81 60       	ori	r24, 0x01	; 1
    2092:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    2094:	88 b3       	in	r24, 0x18	; 24
    2096:	8d 7f       	andi	r24, 0xFD	; 253
    2098:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 2);
    209a:	88 b3       	in	r24, 0x18	; 24
    209c:	84 60       	ori	r24, 0x04	; 4
    209e:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    20a0:	88 b3       	in	r24, 0x18	; 24
    20a2:	8f 7e       	andi	r24, 0xEF	; 239
    20a4:	88 bb       	out	0x18, r24	; 24
         break;
    20a6:	08 95       	ret
      case 6:
     	 CLR_BIT(PORTB, 0);
    20a8:	88 b3       	in	r24, 0x18	; 24
    20aa:	8e 7f       	andi	r24, 0xFE	; 254
    20ac:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    20ae:	88 b3       	in	r24, 0x18	; 24
    20b0:	82 60       	ori	r24, 0x02	; 2
    20b2:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 2);
    20b4:	88 b3       	in	r24, 0x18	; 24
    20b6:	84 60       	ori	r24, 0x04	; 4
    20b8:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    20ba:	88 b3       	in	r24, 0x18	; 24
    20bc:	8f 7e       	andi	r24, 0xEF	; 239
    20be:	88 bb       	out	0x18, r24	; 24
         break;
    20c0:	08 95       	ret
      case 7:
     	 SET_BIT(PORTB, 0);
    20c2:	88 b3       	in	r24, 0x18	; 24
    20c4:	81 60       	ori	r24, 0x01	; 1
    20c6:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    20c8:	88 b3       	in	r24, 0x18	; 24
    20ca:	82 60       	ori	r24, 0x02	; 2
    20cc:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 2);
    20ce:	88 b3       	in	r24, 0x18	; 24
    20d0:	84 60       	ori	r24, 0x04	; 4
    20d2:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT
    20d4:	88 b3       	in	r24, 0x18	; 24
    20d6:	8f 7e       	andi	r24, 0xEF	; 239
    20d8:	88 bb       	out	0x18, r24	; 24
		 (PORTB, 4);
         break;
    20da:	08 95       	ret
      case 8:
     	 CLR_BIT(PORTB, 0);
    20dc:	88 b3       	in	r24, 0x18	; 24
    20de:	8e 7f       	andi	r24, 0xFE	; 254
    20e0:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    20e2:	88 b3       	in	r24, 0x18	; 24
    20e4:	8d 7f       	andi	r24, 0xFD	; 253
    20e6:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    20e8:	88 b3       	in	r24, 0x18	; 24
    20ea:	8b 7f       	andi	r24, 0xFB	; 251
    20ec:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 4);
    20ee:	88 b3       	in	r24, 0x18	; 24
    20f0:	80 61       	ori	r24, 0x10	; 16
    20f2:	88 bb       	out	0x18, r24	; 24
         break;
    20f4:	08 95       	ret
      case 9:
     	 SET_BIT(PORTB, 0);
    20f6:	88 b3       	in	r24, 0x18	; 24
    20f8:	81 60       	ori	r24, 0x01	; 1
    20fa:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    20fc:	88 b3       	in	r24, 0x18	; 24
    20fe:	8d 7f       	andi	r24, 0xFD	; 253
    2100:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    2102:	88 b3       	in	r24, 0x18	; 24
    2104:	8b 7f       	andi	r24, 0xFB	; 251
    2106:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 4);
    2108:	88 b3       	in	r24, 0x18	; 24
    210a:	80 61       	ori	r24, 0x10	; 16
    210c:	88 bb       	out	0x18, r24	; 24
    210e:	08 95       	ret

00002110 <__udivmodhi4>:
    2110:	aa 1b       	sub	r26, r26
    2112:	bb 1b       	sub	r27, r27
    2114:	51 e1       	ldi	r21, 0x11	; 17
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <__udivmodhi4_ep>

00002118 <__udivmodhi4_loop>:
    2118:	aa 1f       	adc	r26, r26
    211a:	bb 1f       	adc	r27, r27
    211c:	a6 17       	cp	r26, r22
    211e:	b7 07       	cpc	r27, r23
    2120:	10 f0       	brcs	.+4      	; 0x2126 <__udivmodhi4_ep>
    2122:	a6 1b       	sub	r26, r22
    2124:	b7 0b       	sbc	r27, r23

00002126 <__udivmodhi4_ep>:
    2126:	88 1f       	adc	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	5a 95       	dec	r21
    212c:	a9 f7       	brne	.-22     	; 0x2118 <__udivmodhi4_loop>
    212e:	80 95       	com	r24
    2130:	90 95       	com	r25
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	08 95       	ret

00002138 <__udivmodsi4>:
    2138:	a1 e2       	ldi	r26, 0x21	; 33
    213a:	1a 2e       	mov	r1, r26
    213c:	aa 1b       	sub	r26, r26
    213e:	bb 1b       	sub	r27, r27
    2140:	fd 01       	movw	r30, r26
    2142:	0d c0       	rjmp	.+26     	; 0x215e <__udivmodsi4_ep>

00002144 <__udivmodsi4_loop>:
    2144:	aa 1f       	adc	r26, r26
    2146:	bb 1f       	adc	r27, r27
    2148:	ee 1f       	adc	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	a2 17       	cp	r26, r18
    214e:	b3 07       	cpc	r27, r19
    2150:	e4 07       	cpc	r30, r20
    2152:	f5 07       	cpc	r31, r21
    2154:	20 f0       	brcs	.+8      	; 0x215e <__udivmodsi4_ep>
    2156:	a2 1b       	sub	r26, r18
    2158:	b3 0b       	sbc	r27, r19
    215a:	e4 0b       	sbc	r30, r20
    215c:	f5 0b       	sbc	r31, r21

0000215e <__udivmodsi4_ep>:
    215e:	66 1f       	adc	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	1a 94       	dec	r1
    2168:	69 f7       	brne	.-38     	; 0x2144 <__udivmodsi4_loop>
    216a:	60 95       	com	r22
    216c:	70 95       	com	r23
    216e:	80 95       	com	r24
    2170:	90 95       	com	r25
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	bd 01       	movw	r22, r26
    2178:	cf 01       	movw	r24, r30
    217a:	08 95       	ret

0000217c <__tablejump2__>:
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	05 90       	lpm	r0, Z+
    2182:	f4 91       	lpm	r31, Z
    2184:	e0 2d       	mov	r30, r0
    2186:	09 94       	ijmp

00002188 <memcpy>:
    2188:	fb 01       	movw	r30, r22
    218a:	dc 01       	movw	r26, r24
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <memcpy+0xa>
    218e:	01 90       	ld	r0, Z+
    2190:	0d 92       	st	X+, r0
    2192:	41 50       	subi	r20, 0x01	; 1
    2194:	50 40       	sbci	r21, 0x00	; 0
    2196:	d8 f7       	brcc	.-10     	; 0x218e <memcpy+0x6>
    2198:	08 95       	ret

0000219a <_exit>:
    219a:	f8 94       	cli

0000219c <__stop_program>:
    219c:	ff cf       	rjmp	.-2      	; 0x219c <__stop_program>
