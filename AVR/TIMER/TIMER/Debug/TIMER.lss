
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000703  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e8  00000000  00000000  0000097f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000383  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f4  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TIMER_INIT_NORMAL>:
	while(counter != overflow)
	{
		while(READBIT(TIFR, TOV0) == 0);
		counter++;
	}
}
  6c:	13 be       	out	0x33, r1	; 51
  6e:	83 b7       	in	r24, 0x33	; 51
  70:	8f 7b       	andi	r24, 0xBF	; 191
  72:	83 bf       	out	0x33, r24	; 51
  74:	83 b7       	in	r24, 0x33	; 51
  76:	87 7f       	andi	r24, 0xF7	; 247
  78:	83 bf       	out	0x33, r24	; 51
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	83 bf       	out	0x33, r24	; 51
  80:	83 b7       	in	r24, 0x33	; 51
  82:	84 60       	ori	r24, 0x04	; 4
  84:	83 bf       	out	0x33, r24	; 51
  86:	83 b7       	in	r24, 0x33	; 51
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	83 bf       	out	0x33, r24	; 51
  8c:	08 95       	ret

0000008e <TIMER_START>:
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	81 60       	ori	r24, 0x01	; 1
  92:	83 bf       	out	0x33, r24	; 51
  94:	83 b7       	in	r24, 0x33	; 51
  96:	84 60       	ori	r24, 0x04	; 4
  98:	83 bf       	out	0x33, r24	; 51
  9a:	12 be       	out	0x32, r1	; 50
  9c:	08 95       	ret

0000009e <TIMER_DELAY_MLSEC>:

void TIMER_DELAY_MLSEC(int ms)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
	uint16_t overflow = (ms*8000)/ (1024*256);
  a2:	20 e4       	ldi	r18, 0x40	; 64
  a4:	3f e1       	ldi	r19, 0x1F	; 31
  a6:	ac 01       	movw	r20, r24
  a8:	42 9f       	mul	r20, r18
  aa:	c0 01       	movw	r24, r0
  ac:	43 9f       	mul	r20, r19
  ae:	90 0d       	add	r25, r0
  b0:	52 9f       	mul	r21, r18
  b2:	90 0d       	add	r25, r0
  b4:	11 24       	eor	r1, r1
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 80 00 	call	0x100	; 0x100 <__divmodhi4>
  be:	eb 01       	movw	r28, r22
	TIMER_START();
  c0:	0e 94 47 00 	call	0x8e	; 0x8e <TIMER_START>
	while(overflow != 0)
  c4:	04 c0       	rjmp	.+8      	; 0xce <TIMER_DELAY_MLSEC+0x30>
	{
		while(READBIT(TIFR, TOV0) == 0);
  c6:	08 b6       	in	r0, 0x38	; 56
  c8:	00 fe       	sbrs	r0, 0
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <TIMER_DELAY_MLSEC+0x28>
		overflow--;
  cc:	21 97       	sbiw	r28, 0x01	; 1

void TIMER_DELAY_MLSEC(int ms)
{
	uint16_t overflow = (ms*8000)/ (1024*256);
	TIMER_START();
	while(overflow != 0)
  ce:	20 97       	sbiw	r28, 0x00	; 0
  d0:	d1 f7       	brne	.-12     	; 0xc6 <TIMER_DELAY_MLSEC+0x28>
	{
		while(READBIT(TIFR, TOV0) == 0);
		overflow--;
	}
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <main>:
#include "TIMER.h"
#define F_CPU 8000000

int main(void)
{
    TIMER_INIT_NORMAL();
  d8:	0e 94 36 00 	call	0x6c	; 0x6c <TIMER_INIT_NORMAL>
	SETBIT(DDRA, 5);
  dc:	8a b3       	in	r24, 0x1a	; 26
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	8a bb       	out	0x1a, r24	; 26
	SETBIT(DDRB, 7);
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	87 bb       	out	0x17, r24	; 23
	SETBIT(PORTB, 7);
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	88 bb       	out	0x18, r24	; 24
	
    while (1) 
    {
		TIMER_DELAY_MLSEC(200);
  ee:	88 ec       	ldi	r24, 0xC8	; 200
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <TIMER_DELAY_MLSEC>
		//_delay_ms(1000);
		TOGBIT(PORTA, 5);	
  f6:	9b b3       	in	r25, 0x1b	; 27
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	89 27       	eor	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	f7 cf       	rjmp	.-18     	; 0xee <main+0x16>

00000100 <__divmodhi4>:
 100:	97 fb       	bst	r25, 7
 102:	07 2e       	mov	r0, r23
 104:	16 f4       	brtc	.+4      	; 0x10a <__divmodhi4+0xa>
 106:	00 94       	com	r0
 108:	07 d0       	rcall	.+14     	; 0x118 <__divmodhi4_neg1>
 10a:	77 fd       	sbrc	r23, 7
 10c:	09 d0       	rcall	.+18     	; 0x120 <__divmodhi4_neg2>
 10e:	0e 94 94 00 	call	0x128	; 0x128 <__udivmodhi4>
 112:	07 fc       	sbrc	r0, 7
 114:	05 d0       	rcall	.+10     	; 0x120 <__divmodhi4_neg2>
 116:	3e f4       	brtc	.+14     	; 0x126 <__divmodhi4_exit>

00000118 <__divmodhi4_neg1>:
 118:	90 95       	com	r25
 11a:	81 95       	neg	r24
 11c:	9f 4f       	sbci	r25, 0xFF	; 255
 11e:	08 95       	ret

00000120 <__divmodhi4_neg2>:
 120:	70 95       	com	r23
 122:	61 95       	neg	r22
 124:	7f 4f       	sbci	r23, 0xFF	; 255

00000126 <__divmodhi4_exit>:
 126:	08 95       	ret

00000128 <__udivmodhi4>:
 128:	aa 1b       	sub	r26, r26
 12a:	bb 1b       	sub	r27, r27
 12c:	51 e1       	ldi	r21, 0x11	; 17
 12e:	07 c0       	rjmp	.+14     	; 0x13e <__udivmodhi4_ep>

00000130 <__udivmodhi4_loop>:
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a6 17       	cp	r26, r22
 136:	b7 07       	cpc	r27, r23
 138:	10 f0       	brcs	.+4      	; 0x13e <__udivmodhi4_ep>
 13a:	a6 1b       	sub	r26, r22
 13c:	b7 0b       	sbc	r27, r23

0000013e <__udivmodhi4_ep>:
 13e:	88 1f       	adc	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	5a 95       	dec	r21
 144:	a9 f7       	brne	.-22     	; 0x130 <__udivmodhi4_loop>
 146:	80 95       	com	r24
 148:	90 95       	com	r25
 14a:	bc 01       	movw	r22, r24
 14c:	cd 01       	movw	r24, r26
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
