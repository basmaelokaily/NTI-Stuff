
UART_PUTTY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e5b  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086f  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000094f  00000000  00000000  00001bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000740  00000000  00000000  00002a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000314e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_write_command>:
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands 
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data){ // 0x53
	RS(0);
  6c:	9b b3       	in	r25, 0x1b	; 27
  6e:	97 7f       	andi	r25, 0xF7	; 247
  70:	9b bb       	out	0x1b, r25	; 27
	D7(READBIT(data,7)); // Data bit7  = D7  
  72:	88 23       	and	r24, r24
  74:	24 f4       	brge	.+8      	; 0x7e <LCD_write_command+0x12>
  76:	9b b3       	in	r25, 0x1b	; 27
  78:	90 68       	ori	r25, 0x80	; 128
  7a:	9b bb       	out	0x1b, r25	; 27
  7c:	03 c0       	rjmp	.+6      	; 0x84 <LCD_write_command+0x18>
  7e:	9b b3       	in	r25, 0x1b	; 27
  80:	9f 77       	andi	r25, 0x7F	; 127
  82:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,6)); // Data bit6  = D6  
  84:	86 ff       	sbrs	r24, 6
  86:	04 c0       	rjmp	.+8      	; 0x90 <LCD_write_command+0x24>
  88:	9b b3       	in	r25, 0x1b	; 27
  8a:	90 64       	ori	r25, 0x40	; 64
  8c:	9b bb       	out	0x1b, r25	; 27
  8e:	03 c0       	rjmp	.+6      	; 0x96 <LCD_write_command+0x2a>
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	9f 7b       	andi	r25, 0xBF	; 191
  94:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,5)); // Data bit5  = D5  
  96:	85 ff       	sbrs	r24, 5
  98:	04 c0       	rjmp	.+8      	; 0xa2 <LCD_write_command+0x36>
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	90 62       	ori	r25, 0x20	; 32
  9e:	9b bb       	out	0x1b, r25	; 27
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <LCD_write_command+0x3c>
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	9f 7d       	andi	r25, 0xDF	; 223
  a6:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,4)); // Data bit4  = D4
  a8:	84 ff       	sbrs	r24, 4
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <LCD_write_command+0x48>
  ac:	9b b3       	in	r25, 0x1b	; 27
  ae:	90 61       	ori	r25, 0x10	; 16
  b0:	9b bb       	out	0x1b, r25	; 27
  b2:	03 c0       	rjmp	.+6      	; 0xba <LCD_write_command+0x4e>
  b4:	9b b3       	in	r25, 0x1b	; 27
  b6:	9f 7e       	andi	r25, 0xEF	; 239
  b8:	9b bb       	out	0x1b, r25	; 27
	EN(1);
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	94 60       	ori	r25, 0x04	; 4
  be:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	ef e9       	ldi	r30, 0x9F	; 159
  c2:	ff e0       	ldi	r31, 0x0F	; 15
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_write_command+0x58>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_write_command+0x5e>
  ca:	00 00       	nop
	_delay_ms(1);
	EN(0);
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	9b 7f       	andi	r25, 0xFB	; 251
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	ef e9       	ldi	r30, 0x9F	; 159
  d4:	ff e0       	ldi	r31, 0x0F	; 15
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_write_command+0x6a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_write_command+0x70>
  dc:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(data,3)); // Data bit3  = D7
  de:	83 ff       	sbrs	r24, 3
  e0:	04 c0       	rjmp	.+8      	; 0xea <LCD_write_command+0x7e>
  e2:	9b b3       	in	r25, 0x1b	; 27
  e4:	90 68       	ori	r25, 0x80	; 128
  e6:	9b bb       	out	0x1b, r25	; 27
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <LCD_write_command+0x84>
  ea:	9b b3       	in	r25, 0x1b	; 27
  ec:	9f 77       	andi	r25, 0x7F	; 127
  ee:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,2)); // Data bit2  = D6
  f0:	82 ff       	sbrs	r24, 2
  f2:	04 c0       	rjmp	.+8      	; 0xfc <LCD_write_command+0x90>
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	90 64       	ori	r25, 0x40	; 64
  f8:	9b bb       	out	0x1b, r25	; 27
  fa:	03 c0       	rjmp	.+6      	; 0x102 <LCD_write_command+0x96>
  fc:	9b b3       	in	r25, 0x1b	; 27
  fe:	9f 7b       	andi	r25, 0xBF	; 191
 100:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,1)); // Data bit1  = D5
 102:	81 ff       	sbrs	r24, 1
 104:	04 c0       	rjmp	.+8      	; 0x10e <LCD_write_command+0xa2>
 106:	9b b3       	in	r25, 0x1b	; 27
 108:	90 62       	ori	r25, 0x20	; 32
 10a:	9b bb       	out	0x1b, r25	; 27
 10c:	03 c0       	rjmp	.+6      	; 0x114 <LCD_write_command+0xa8>
 10e:	9b b3       	in	r25, 0x1b	; 27
 110:	9f 7d       	andi	r25, 0xDF	; 223
 112:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,0)); // Data bit0  = D4
 114:	80 ff       	sbrs	r24, 0
 116:	04 c0       	rjmp	.+8      	; 0x120 <LCD_write_command+0xb4>
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	03 c0       	rjmp	.+6      	; 0x126 <LCD_write_command+0xba>
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_write_command+0xc4>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_write_command+0xca>
 136:	00 00       	nop
	_delay_ms(1);
	EN(0);
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	ef e9       	ldi	r30, 0x9F	; 159
 140:	ff e0       	ldi	r31, 0x0F	; 15
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_write_command+0xd6>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_write_command+0xdc>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_init>:
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void 
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PIN;
 14c:	8a b3       	in	r24, 0x1a	; 26
 14e:	8c 6f       	ori	r24, 0xFC	; 252
 150:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 158:	8f e7       	ldi	r24, 0x7F	; 127
 15a:	9e e3       	ldi	r25, 0x3E	; 62
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_init+0x10>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_init+0x16>
 162:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	9e e3       	ldi	r25, 0x3E	; 62
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_init+0x22>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_init+0x28>
 174:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 17c:	8f e7       	ldi	r24, 0x7F	; 127
 17e:	9e e3       	ldi	r25, 0x3E	; 62
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_init+0x34>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_init+0x3a>
 186:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x28);
 18e:	88 e2       	ldi	r24, 0x28	; 40
 190:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x08);
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0x6);
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
	LCD_write_command(0xc);
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
 1ae:	29 ef       	ldi	r18, 0xF9	; 249
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 50       	subi	r25, 0x01	; 1
 1b4:	20 40       	sbci	r18, 0x00	; 0
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_init+0x66>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_init+0x70>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <LCD_write_data>:
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(uint8_t data){ // 0x53
	RS(1);
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	98 60       	ori	r25, 0x08	; 8
 1c4:	9b bb       	out	0x1b, r25	; 27
	D7(READBIT(data,7)); // Data bit7  = D7
 1c6:	88 23       	and	r24, r24
 1c8:	24 f4       	brge	.+8      	; 0x1d2 <LCD_write_data+0x12>
 1ca:	9b b3       	in	r25, 0x1b	; 27
 1cc:	90 68       	ori	r25, 0x80	; 128
 1ce:	9b bb       	out	0x1b, r25	; 27
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <LCD_write_data+0x18>
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	9f 77       	andi	r25, 0x7F	; 127
 1d6:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,6)); // Data bit6  = D6
 1d8:	86 ff       	sbrs	r24, 6
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <LCD_write_data+0x24>
 1dc:	9b b3       	in	r25, 0x1b	; 27
 1de:	90 64       	ori	r25, 0x40	; 64
 1e0:	9b bb       	out	0x1b, r25	; 27
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <LCD_write_data+0x2a>
 1e4:	9b b3       	in	r25, 0x1b	; 27
 1e6:	9f 7b       	andi	r25, 0xBF	; 191
 1e8:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,5)); // Data bit5  = D5
 1ea:	85 ff       	sbrs	r24, 5
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <LCD_write_data+0x36>
 1ee:	9b b3       	in	r25, 0x1b	; 27
 1f0:	90 62       	ori	r25, 0x20	; 32
 1f2:	9b bb       	out	0x1b, r25	; 27
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <LCD_write_data+0x3c>
 1f6:	9b b3       	in	r25, 0x1b	; 27
 1f8:	9f 7d       	andi	r25, 0xDF	; 223
 1fa:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,4)); // Data bit4  = D4
 1fc:	84 ff       	sbrs	r24, 4
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <LCD_write_data+0x48>
 200:	9b b3       	in	r25, 0x1b	; 27
 202:	90 61       	ori	r25, 0x10	; 16
 204:	9b bb       	out	0x1b, r25	; 27
 206:	03 c0       	rjmp	.+6      	; 0x20e <LCD_write_data+0x4e>
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	9f 7e       	andi	r25, 0xEF	; 239
 20c:	9b bb       	out	0x1b, r25	; 27
	EN(1);
 20e:	9b b3       	in	r25, 0x1b	; 27
 210:	94 60       	ori	r25, 0x04	; 4
 212:	9b bb       	out	0x1b, r25	; 27
 214:	ef e9       	ldi	r30, 0x9F	; 159
 216:	ff e0       	ldi	r31, 0x0F	; 15
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_write_data+0x58>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_write_data+0x5e>
 21e:	00 00       	nop
	_delay_ms(1);
	EN(0);
 220:	9b b3       	in	r25, 0x1b	; 27
 222:	9b 7f       	andi	r25, 0xFB	; 251
 224:	9b bb       	out	0x1b, r25	; 27
 226:	ef e9       	ldi	r30, 0x9F	; 159
 228:	ff e0       	ldi	r31, 0x0F	; 15
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_write_data+0x6a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_write_data+0x70>
 230:	00 00       	nop
	_delay_ms(1);

	D7(READBIT(data,3)); // Data bit3  = D7
 232:	83 ff       	sbrs	r24, 3
 234:	04 c0       	rjmp	.+8      	; 0x23e <LCD_write_data+0x7e>
 236:	9b b3       	in	r25, 0x1b	; 27
 238:	90 68       	ori	r25, 0x80	; 128
 23a:	9b bb       	out	0x1b, r25	; 27
 23c:	03 c0       	rjmp	.+6      	; 0x244 <LCD_write_data+0x84>
 23e:	9b b3       	in	r25, 0x1b	; 27
 240:	9f 77       	andi	r25, 0x7F	; 127
 242:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,2)); // Data bit2  = D6
 244:	82 ff       	sbrs	r24, 2
 246:	04 c0       	rjmp	.+8      	; 0x250 <LCD_write_data+0x90>
 248:	9b b3       	in	r25, 0x1b	; 27
 24a:	90 64       	ori	r25, 0x40	; 64
 24c:	9b bb       	out	0x1b, r25	; 27
 24e:	03 c0       	rjmp	.+6      	; 0x256 <LCD_write_data+0x96>
 250:	9b b3       	in	r25, 0x1b	; 27
 252:	9f 7b       	andi	r25, 0xBF	; 191
 254:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,1)); // Data bit1  = D5
 256:	81 ff       	sbrs	r24, 1
 258:	04 c0       	rjmp	.+8      	; 0x262 <LCD_write_data+0xa2>
 25a:	9b b3       	in	r25, 0x1b	; 27
 25c:	90 62       	ori	r25, 0x20	; 32
 25e:	9b bb       	out	0x1b, r25	; 27
 260:	03 c0       	rjmp	.+6      	; 0x268 <LCD_write_data+0xa8>
 262:	9b b3       	in	r25, 0x1b	; 27
 264:	9f 7d       	andi	r25, 0xDF	; 223
 266:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,0)); // Data bit0  = D4
 268:	80 ff       	sbrs	r24, 0
 26a:	04 c0       	rjmp	.+8      	; 0x274 <LCD_write_data+0xb4>
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	8b bb       	out	0x1b, r24	; 27
 272:	03 c0       	rjmp	.+6      	; 0x27a <LCD_write_data+0xba>
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	8f 7e       	andi	r24, 0xEF	; 239
 278:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 27a:	8b b3       	in	r24, 0x1b	; 27
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	8f e9       	ldi	r24, 0x9F	; 159
 282:	9f e0       	ldi	r25, 0x0F	; 15
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_write_data+0xc4>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_write_data+0xca>
 28a:	00 00       	nop
	_delay_ms(1);
	EN(0);
 28c:	8b b3       	in	r24, 0x1b	; 27
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	8b bb       	out	0x1b, r24	; 27
 292:	ef e9       	ldi	r30, 0x9F	; 159
 294:	ff e0       	ldi	r31, 0x0F	; 15
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_write_data+0xd6>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_write_data+0xdc>
 29c:	00 00       	nop
 29e:	08 95       	ret

000002a0 <LCD_write_string>:
* Function Name: LCD_write_data
* Purpose      : write a string on lCD
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t *data){
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	8c 01       	movw	r16, r24
	uint8_t i =0;
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0'){
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <LCD_write_string+0x12>
		LCD_write_data(data[i]);
 2ac:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_write_data>
		i++;
 2b0:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t *data){
	uint8_t i =0;
	while(data[i] != '\0'){
 2b2:	f8 01       	movw	r30, r16
 2b4:	ec 0f       	add	r30, r28
 2b6:	f1 1d       	adc	r31, r1
 2b8:	80 81       	ld	r24, Z
 2ba:	81 11       	cpse	r24, r1
 2bc:	f7 cf       	rjmp	.-18     	; 0x2ac <LCD_write_string+0xc>
		LCD_write_data(data[i]);
		i++;
	}
}
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	08 95       	ret

000002c6 <main>:
#include "LCD.h"

int main(void)
{
	/* Replace with your application code */
	LCD_init();
 2c6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_init>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	31 ee       	ldi	r19, 0xE1	; 225
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	30 40       	sbci	r19, 0x00	; 0
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0xa>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x14>
 2da:	00 00       	nop
	_delay_ms(100);
	LCD_write_command(0x0C); // display on, cursor off
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
 2e4:	21 ee       	ldi	r18, 0xE1	; 225
 2e6:	34 e0       	ldi	r19, 0x04	; 4
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	20 40       	sbci	r18, 0x00	; 0
 2ec:	30 40       	sbci	r19, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x22>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x2c>
 2f2:	00 00       	nop
	_delay_ms(100);
	LCD_write_command(0x01);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	91 ee       	ldi	r25, 0xE1	; 225
 2fe:	24 e0       	ldi	r18, 0x04	; 4
 300:	81 50       	subi	r24, 0x01	; 1
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	20 40       	sbci	r18, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x3a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x44>
 30a:	00 00       	nop
	_delay_ms(100);
	USART_Init();
 30c:	0e 94 aa 01 	call	0x354	; 0x354 <USART_Init>
	LCD_write_string(USART_Receive_SYNC());
 310:	0e 94 dd 01 	call	0x3ba	; 0x3ba <USART_Receive_SYNC>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_write_string>
    /* Replace with your application code */
    while (1) 
    {
		LCD_write_string(USART_Receive_SYNC()-50);
 31a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <USART_Receive_SYNC>
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	c2 97       	sbiw	r24, 0x32	; 50
 322:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_write_string>
 326:	3a ea       	ldi	r19, 0xAA	; 170
 328:	86 ee       	ldi	r24, 0xE6	; 230
 32a:	96 e9       	ldi	r25, 0x96	; 150
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	31 50       	subi	r19, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	20 40       	sbci	r18, 0x00	; 0
 336:	d9 f7       	brne	.-10     	; 0x32e <main+0x68>
 338:	00 00       	nop
		_delay_ms(10000);
		LCD_write_command(0x01);
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_write_command>
 340:	3f ef       	ldi	r19, 0xFF	; 255
 342:	81 ee       	ldi	r24, 0xE1	; 225
 344:	94 e0       	ldi	r25, 0x04	; 4
 346:	31 50       	subi	r19, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x80>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x8a>
 350:	00 00       	nop
 352:	e3 cf       	rjmp	.-58     	; 0x31a <main+0x54>

00000354 <USART_Init>:
void USART_Transmit_SYNC( uint8_t data )
{
	UDR = data;
	while(READBIT(UCSRA, TXC) == 0);	

}
 354:	80 b5       	in	r24, 0x20	; 32
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 bd       	out	0x20, r24	; 32
 35a:	80 b5       	in	r24, 0x20	; 32
 35c:	8f 7b       	andi	r24, 0xBF	; 191
 35e:	80 bd       	out	0x20, r24	; 32
 360:	80 b5       	in	r24, 0x20	; 32
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	80 bd       	out	0x20, r24	; 32
 366:	80 b5       	in	r24, 0x20	; 32
 368:	8f 7e       	andi	r24, 0xEF	; 239
 36a:	80 bd       	out	0x20, r24	; 32
 36c:	80 b5       	in	r24, 0x20	; 32
 36e:	8f 7d       	andi	r24, 0xDF	; 223
 370:	80 bd       	out	0x20, r24	; 32
 372:	8b b1       	in	r24, 0x0b	; 11
 374:	8d 7f       	andi	r24, 0xFD	; 253
 376:	8b b9       	out	0x0b, r24	; 11
 378:	80 b5       	in	r24, 0x20	; 32
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	80 bd       	out	0x20, r24	; 32
 37e:	80 b5       	in	r24, 0x20	; 32
 380:	84 60       	ori	r24, 0x04	; 4
 382:	80 bd       	out	0x20, r24	; 32
 384:	8a b1       	in	r24, 0x0a	; 10
 386:	8b 7f       	andi	r24, 0xFB	; 251
 388:	8a b9       	out	0x0a, r24	; 10
 38a:	80 b5       	in	r24, 0x20	; 32
 38c:	8f 77       	andi	r24, 0x7F	; 127
 38e:	80 bd       	out	0x20, r24	; 32
 390:	80 b5       	in	r24, 0x20	; 32
 392:	8e 7f       	andi	r24, 0xFE	; 254
 394:	80 bd       	out	0x20, r24	; 32
 396:	80 b5       	in	r24, 0x20	; 32
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	80 bd       	out	0x20, r24	; 32
 39c:	80 b5       	in	r24, 0x20	; 32
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	80 bd       	out	0x20, r24	; 32
 3a2:	80 b5       	in	r24, 0x20	; 32
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	80 bd       	out	0x20, r24	; 32
 3a8:	83 e3       	ldi	r24, 0x33	; 51
 3aa:	89 b9       	out	0x09, r24	; 9
 3ac:	8a b1       	in	r24, 0x0a	; 10
 3ae:	80 61       	ori	r24, 0x10	; 16
 3b0:	8a b9       	out	0x0a, r24	; 10
 3b2:	8a b1       	in	r24, 0x0a	; 10
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	8a b9       	out	0x0a, r24	; 10
 3b8:	08 95       	ret

000003ba <USART_Receive_SYNC>:
/* Pre_condition  :  this function must be used after USART		*/
/*     				 initialized 							    */
/****************************************************************/
uint8_t USART_Receive_SYNC(void)
{
	while(READBIT(UCSRA, RXC) == 0);
 3ba:	5f 9b       	sbis	0x0b, 7	; 11
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <USART_Receive_SYNC>
	return UDR;
 3be:	8c b1       	in	r24, 0x0c	; 12
}
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
