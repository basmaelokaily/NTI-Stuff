
TRAFFIC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001fca  0000205e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045c  0080007e  0080007e  0000207c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005003  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd2  00000000  00000000  00007543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003107  00000000  00000000  00008515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cfc  00000000  00000000  0000b61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000185b  00000000  00000000  0000c318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052c2  00000000  00000000  0000db73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00012e35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	3e 0f       	add	r19, r30
      56:	4b 0f       	add	r20, r27
      58:	58 0f       	add	r21, r24
      5a:	65 0f       	add	r22, r21
      5c:	72 0f       	add	r23, r18
      5e:	7f 0f       	add	r23, r31
      60:	8c 0f       	add	r24, r28
      62:	99 0f       	add	r25, r25
      64:	a6 0f       	add	r26, r22
      66:	b3 0f       	add	r27, r19

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 37       	cpi	r26, 0x7E	; 126
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ae e7       	ldi	r26, 0x7E	; 126
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3d       	cpi	r26, 0xDA	; 218
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <main>
      9e:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_voidSetPinDirection>:
	             DIO_PD3_INITIAL_VALUE,DIO_PD2_INITIAL_VALUE,DIO_PD1_INITIAL_VALUE,DIO_PD0_INITIAL_VALUE);
}

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8  copy_u8PinDirection)
{
	if((copy_u8PortId<=3)&&(copy_u8PinId<=7)&&((DIO_PIN_OUTPUT==copy_u8PinDirection)||(DIO_PIN_INPUT==copy_u8PinDirection)))
      a6:	84 30       	cpi	r24, 0x04	; 4
      a8:	08 f0       	brcs	.+2      	; 0xac <DIO_voidSetPinDirection+0x6>
      aa:	72 c0       	rjmp	.+228    	; 0x190 <DIO_voidSetPinDirection+0xea>
      ac:	68 30       	cpi	r22, 0x08	; 8
      ae:	08 f0       	brcs	.+2      	; 0xb2 <DIO_voidSetPinDirection+0xc>
      b0:	6f c0       	rjmp	.+222    	; 0x190 <DIO_voidSetPinDirection+0xea>
      b2:	42 30       	cpi	r20, 0x02	; 2
      b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_voidSetPinDirection+0x12>
      b6:	6c c0       	rjmp	.+216    	; 0x190 <DIO_voidSetPinDirection+0xea>
	{
		switch(copy_u8PortId)
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	01 f1       	breq	.+64     	; 0xfc <DIO_voidSetPinDirection+0x56>
      bc:	30 f0       	brcs	.+12     	; 0xca <DIO_voidSetPinDirection+0x24>
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	b1 f1       	breq	.+108    	; 0x12e <DIO_voidSetPinDirection+0x88>
      c2:	83 30       	cpi	r24, 0x03	; 3
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_voidSetPinDirection+0x22>
      c6:	4c c0       	rjmp	.+152    	; 0x160 <DIO_voidSetPinDirection+0xba>
      c8:	08 95       	ret
		{
		case DIO_PORTA:
			if(DIO_PIN_OUTPUT == copy_u8PinDirection)
      ca:	41 30       	cpi	r20, 0x01	; 1
      cc:	59 f4       	brne	.+22     	; 0xe4 <DIO_voidSetPinDirection+0x3e>
			{
				SET_BIT(DDRA,copy_u8PinId);
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x34>
      d6:	88 0f       	add	r24, r24
      d8:	99 1f       	adc	r25, r25
      da:	6a 95       	dec	r22
      dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x30>
      de:	82 2b       	or	r24, r18
      e0:	8a bb       	out	0x1a, r24	; 26
      e2:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,copy_u8PinId);
      e4:	2a b3       	in	r18, 0x1a	; 26
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_voidSetPinDirection+0x4a>
      ec:	88 0f       	add	r24, r24
      ee:	99 1f       	adc	r25, r25
      f0:	6a 95       	dec	r22
      f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_voidSetPinDirection+0x46>
      f4:	80 95       	com	r24
      f6:	82 23       	and	r24, r18
      f8:	8a bb       	out	0x1a, r24	; 26
      fa:	08 95       	ret
			}
			break;

		case DIO_PORTB:
			if(DIO_PIN_OUTPUT == copy_u8PinDirection)
      fc:	41 30       	cpi	r20, 0x01	; 1
      fe:	59 f4       	brne	.+22     	; 0x116 <DIO_voidSetPinDirection+0x70>
			{
				SET_BIT(DDRB,copy_u8PinId);
     100:	27 b3       	in	r18, 0x17	; 23
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0x66>
     108:	88 0f       	add	r24, r24
     10a:	99 1f       	adc	r25, r25
     10c:	6a 95       	dec	r22
     10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x62>
     110:	82 2b       	or	r24, r18
     112:	87 bb       	out	0x17, r24	; 23
     114:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB,copy_u8PinId);
     116:	27 b3       	in	r18, 0x17	; 23
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0x7c>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	6a 95       	dec	r22
     124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0x78>
     126:	80 95       	com	r24
     128:	82 23       	and	r24, r18
     12a:	87 bb       	out	0x17, r24	; 23
     12c:	08 95       	ret
			}
			break;

		case DIO_PORTC:
			if(DIO_PIN_OUTPUT == copy_u8PinDirection)
     12e:	41 30       	cpi	r20, 0x01	; 1
     130:	59 f4       	brne	.+22     	; 0x148 <DIO_voidSetPinDirection+0xa2>
			{
				SET_BIT(DDRC,copy_u8PinId);
     132:	24 b3       	in	r18, 0x14	; 20
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_voidSetPinDirection+0x98>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	6a 95       	dec	r22
     140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_voidSetPinDirection+0x94>
     142:	82 2b       	or	r24, r18
     144:	84 bb       	out	0x14, r24	; 20
     146:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC,copy_u8PinId);
     148:	24 b3       	in	r18, 0x14	; 20
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinDirection+0xae>
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinDirection+0xaa>
     158:	80 95       	com	r24
     15a:	82 23       	and	r24, r18
     15c:	84 bb       	out	0x14, r24	; 20
     15e:	08 95       	ret
			}
			break;

		case DIO_PORTD:
			if(DIO_PIN_OUTPUT == copy_u8PinDirection)
     160:	41 30       	cpi	r20, 0x01	; 1
     162:	59 f4       	brne	.+22     	; 0x17a <DIO_voidSetPinDirection+0xd4>
			{
				SET_BIT(DDRD,copy_u8PinId);
     164:	21 b3       	in	r18, 0x11	; 17
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_voidSetPinDirection+0xca>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_voidSetPinDirection+0xc6>
     174:	82 2b       	or	r24, r18
     176:	81 bb       	out	0x11, r24	; 17
     178:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,copy_u8PinId);
     17a:	21 b3       	in	r18, 0x11	; 17
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_voidSetPinDirection+0xe0>
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_voidSetPinDirection+0xdc>
     18a:	80 95       	com	r24
     18c:	82 23       	and	r24, r18
     18e:	81 bb       	out	0x11, r24	; 17
     190:	08 95       	ret

00000192 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8  copy_u8PinValue)
{
	switch(copy_u8PortId)
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	01 f1       	breq	.+64     	; 0x1d6 <DIO_voidSetPinValue+0x44>
     196:	30 f0       	brcs	.+12     	; 0x1a4 <DIO_voidSetPinValue+0x12>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	b1 f1       	breq	.+108    	; 0x208 <DIO_voidSetPinValue+0x76>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_voidSetPinValue+0x10>
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <DIO_voidSetPinValue+0xa8>
     1a2:	08 95       	ret
	{
	case DIO_PORTA:
		if(DIO_PIN_HIGH == copy_u8PinValue)
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_voidSetPinValue+0x2c>
		{
			SET_BIT(PORTA,copy_u8PinId);
     1a8:	2b b3       	in	r18, 0x1b	; 27
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_voidSetPinValue+0x22>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_voidSetPinValue+0x1e>
     1b8:	82 2b       	or	r24, r18
     1ba:	8b bb       	out	0x1b, r24	; 27
     1bc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,copy_u8PinId);
     1be:	2b b3       	in	r18, 0x1b	; 27
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinValue+0x38>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinValue+0x34>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	8b bb       	out	0x1b, r24	; 27
     1d4:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if(DIO_PIN_HIGH == copy_u8PinValue)
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_voidSetPinValue+0x5e>
		{
			SET_BIT(PORTB,copy_u8PinId);
     1da:	28 b3       	in	r18, 0x18	; 24
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_voidSetPinValue+0x54>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_voidSetPinValue+0x50>
     1ea:	82 2b       	or	r24, r18
     1ec:	88 bb       	out	0x18, r24	; 24
     1ee:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,copy_u8PinId);
     1f0:	28 b3       	in	r18, 0x18	; 24
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_voidSetPinValue+0x6a>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_voidSetPinValue+0x66>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	88 bb       	out	0x18, r24	; 24
     206:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if(DIO_PIN_HIGH == copy_u8PinValue)
     208:	41 30       	cpi	r20, 0x01	; 1
     20a:	59 f4       	brne	.+22     	; 0x222 <DIO_voidSetPinValue+0x90>
		{
			SET_BIT(PORTC,copy_u8PinId);
     20c:	25 b3       	in	r18, 0x15	; 21
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_voidSetPinValue+0x86>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	6a 95       	dec	r22
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_voidSetPinValue+0x82>
     21c:	82 2b       	or	r24, r18
     21e:	85 bb       	out	0x15, r24	; 21
     220:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,copy_u8PinId);
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x9c>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x98>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if(DIO_PIN_HIGH == copy_u8PinValue)
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	59 f4       	brne	.+22     	; 0x254 <DIO_voidSetPinValue+0xc2>
		{
			SET_BIT(PORTD,copy_u8PinId);
     23e:	22 b3       	in	r18, 0x12	; 18
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinValue+0xb8>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	6a 95       	dec	r22
     24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinValue+0xb4>
     24e:	82 2b       	or	r24, r18
     250:	82 bb       	out	0x12, r24	; 18
     252:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,copy_u8PinId);
     254:	22 b3       	in	r18, 0x12	; 18
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPinValue+0xce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPinValue+0xca>
     264:	80 95       	com	r24
     266:	82 23       	and	r24, r18
     268:	82 bb       	out	0x12, r24	; 18
     26a:	08 95       	ret

0000026c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     272:	0e 94 5f 08 	call	0x10be	; 0x10be <vTaskSuspendAll>
	{
		/* Check_Password there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     276:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <__data_end>
     27a:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <__data_end+0x1>
     27e:	c9 01       	movw	r24, r18
     280:	8c 0f       	add	r24, r28
     282:	9d 1f       	adc	r25, r29
     284:	88 3e       	cpi	r24, 0xE8	; 232
     286:	43 e0       	ldi	r20, 0x03	; 3
     288:	94 07       	cpc	r25, r20
     28a:	58 f4       	brcc	.+22     	; 0x2a2 <pvPortMalloc+0x36>
     28c:	28 17       	cp	r18, r24
     28e:	39 07       	cpc	r19, r25
     290:	58 f4       	brcc	.+22     	; 0x2a8 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check_Password for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     292:	e9 01       	movw	r28, r18
     294:	c0 58       	subi	r28, 0x80	; 128
     296:	df 4f       	sbci	r29, 0xFF	; 255
			xNextFreeByte += xWantedSize;			
     298:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
     29c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
     2a0:	05 c0       	rjmp	.+10     	; 0x2ac <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
     2a4:	d0 e0       	ldi	r29, 0x00	; 0
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <pvPortMalloc+0x40>
     2a8:	c0 e0       	ldi	r28, 0x00	; 0
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     2ac:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     2b0:	ce 01       	movw	r24, r28
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     2b8:	08 95       	ret

000002ba <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     2ba:	fc 01       	movw	r30, r24
     2bc:	03 96       	adiw	r24, 0x03	; 3
     2be:	92 83       	std	Z+2, r25	; 0x02
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	2f ef       	ldi	r18, 0xFF	; 255
     2c4:	3f ef       	ldi	r19, 0xFF	; 255
     2c6:	34 83       	std	Z+4, r19	; 0x04
     2c8:	23 83       	std	Z+3, r18	; 0x03
     2ca:	96 83       	std	Z+6, r25	; 0x06
     2cc:	85 83       	std	Z+5, r24	; 0x05
     2ce:	90 87       	std	Z+8, r25	; 0x08
     2d0:	87 83       	std	Z+7, r24	; 0x07
     2d2:	10 82       	st	Z, r1
     2d4:	08 95       	ret

000002d6 <vListInitialiseItem>:
     2d6:	fc 01       	movw	r30, r24
     2d8:	11 86       	std	Z+9, r1	; 0x09
     2da:	10 86       	std	Z+8, r1	; 0x08
     2dc:	08 95       	ret

000002de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     2e4:	48 81       	ld	r20, Y
     2e6:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     2e8:	4f 3f       	cpi	r20, 0xFF	; 255
     2ea:	2f ef       	ldi	r18, 0xFF	; 255
     2ec:	52 07       	cpc	r21, r18
     2ee:	21 f4       	brne	.+8      	; 0x2f8 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     2f0:	fc 01       	movw	r30, r24
     2f2:	a7 81       	ldd	r26, Z+7	; 0x07
     2f4:	b0 85       	ldd	r27, Z+8	; 0x08
     2f6:	0d c0       	rjmp	.+26     	; 0x312 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     2f8:	dc 01       	movw	r26, r24
     2fa:	13 96       	adiw	r26, 0x03	; 3
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <vListInsert+0x22>
     2fe:	df 01       	movw	r26, r30
     300:	12 96       	adiw	r26, 0x02	; 2
     302:	ed 91       	ld	r30, X+
     304:	fc 91       	ld	r31, X
     306:	13 97       	sbiw	r26, 0x03	; 3
     308:	20 81       	ld	r18, Z
     30a:	31 81       	ldd	r19, Z+1	; 0x01
     30c:	42 17       	cp	r20, r18
     30e:	53 07       	cpc	r21, r19
     310:	b0 f7       	brcc	.-20     	; 0x2fe <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     312:	12 96       	adiw	r26, 0x02	; 2
     314:	ed 91       	ld	r30, X+
     316:	fc 91       	ld	r31, X
     318:	13 97       	sbiw	r26, 0x03	; 3
     31a:	fb 83       	std	Y+3, r31	; 0x03
     31c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     31e:	d5 83       	std	Z+5, r29	; 0x05
     320:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     322:	bd 83       	std	Y+5, r27	; 0x05
     324:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     326:	13 96       	adiw	r26, 0x03	; 3
     328:	dc 93       	st	X, r29
     32a:	ce 93       	st	-X, r28
     32c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     32e:	99 87       	std	Y+9, r25	; 0x09
     330:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     332:	fc 01       	movw	r30, r24
     334:	20 81       	ld	r18, Z
     336:	2f 5f       	subi	r18, 0xFF	; 255
     338:	20 83       	st	Z, r18
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     346:	a0 85       	ldd	r26, Z+8	; 0x08
     348:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     34a:	c2 81       	ldd	r28, Z+2	; 0x02
     34c:	d3 81       	ldd	r29, Z+3	; 0x03
     34e:	84 81       	ldd	r24, Z+4	; 0x04
     350:	95 81       	ldd	r25, Z+5	; 0x05
     352:	9d 83       	std	Y+5, r25	; 0x05
     354:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     356:	c4 81       	ldd	r28, Z+4	; 0x04
     358:	d5 81       	ldd	r29, Z+5	; 0x05
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	9b 83       	std	Y+3, r25	; 0x03
     360:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     362:	11 96       	adiw	r26, 0x01	; 1
     364:	8d 91       	ld	r24, X+
     366:	9c 91       	ld	r25, X
     368:	12 97       	sbiw	r26, 0x02	; 2
     36a:	e8 17       	cp	r30, r24
     36c:	f9 07       	cpc	r31, r25
     36e:	31 f4       	brne	.+12     	; 0x37c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     370:	84 81       	ldd	r24, Z+4	; 0x04
     372:	95 81       	ldd	r25, Z+5	; 0x05
     374:	12 96       	adiw	r26, 0x02	; 2
     376:	9c 93       	st	X, r25
     378:	8e 93       	st	-X, r24
     37a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     37c:	11 86       	std	Z+9, r1	; 0x09
     37e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     380:	8c 91       	ld	r24, X
     382:	81 50       	subi	r24, 0x01	; 1
     384:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     386:	8c 91       	ld	r24, X
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     38e:	1b bc       	out	0x2b, r1	; 43
     390:	89 ef       	ldi	r24, 0xF9	; 249
     392:	8a bd       	out	0x2a, r24	; 42
     394:	8b e0       	ldi	r24, 0x0B	; 11
     396:	8e bd       	out	0x2e, r24	; 46
     398:	89 b7       	in	r24, 0x39	; 57
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	89 bf       	out	0x39, r24	; 57
     39e:	08 95       	ret

000003a0 <pxPortInitialiseStack>:
     3a0:	31 e1       	ldi	r19, 0x11	; 17
     3a2:	fc 01       	movw	r30, r24
     3a4:	30 83       	st	Z, r19
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	22 e2       	ldi	r18, 0x22	; 34
     3aa:	20 83       	st	Z, r18
     3ac:	31 97       	sbiw	r30, 0x01	; 1
     3ae:	a3 e3       	ldi	r26, 0x33	; 51
     3b0:	a0 83       	st	Z, r26
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	60 83       	st	Z, r22
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	70 83       	st	Z, r23
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	10 82       	st	Z, r1
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	60 e8       	ldi	r22, 0x80	; 128
     3c2:	60 83       	st	Z, r22
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	10 82       	st	Z, r1
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	62 e0       	ldi	r22, 0x02	; 2
     3cc:	60 83       	st	Z, r22
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	63 e0       	ldi	r22, 0x03	; 3
     3d2:	60 83       	st	Z, r22
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	64 e0       	ldi	r22, 0x04	; 4
     3d8:	60 83       	st	Z, r22
     3da:	31 97       	sbiw	r30, 0x01	; 1
     3dc:	65 e0       	ldi	r22, 0x05	; 5
     3de:	60 83       	st	Z, r22
     3e0:	31 97       	sbiw	r30, 0x01	; 1
     3e2:	66 e0       	ldi	r22, 0x06	; 6
     3e4:	60 83       	st	Z, r22
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	67 e0       	ldi	r22, 0x07	; 7
     3ea:	60 83       	st	Z, r22
     3ec:	31 97       	sbiw	r30, 0x01	; 1
     3ee:	68 e0       	ldi	r22, 0x08	; 8
     3f0:	60 83       	st	Z, r22
     3f2:	31 97       	sbiw	r30, 0x01	; 1
     3f4:	69 e0       	ldi	r22, 0x09	; 9
     3f6:	60 83       	st	Z, r22
     3f8:	31 97       	sbiw	r30, 0x01	; 1
     3fa:	60 e1       	ldi	r22, 0x10	; 16
     3fc:	60 83       	st	Z, r22
     3fe:	31 97       	sbiw	r30, 0x01	; 1
     400:	30 83       	st	Z, r19
     402:	31 97       	sbiw	r30, 0x01	; 1
     404:	32 e1       	ldi	r19, 0x12	; 18
     406:	30 83       	st	Z, r19
     408:	31 97       	sbiw	r30, 0x01	; 1
     40a:	33 e1       	ldi	r19, 0x13	; 19
     40c:	30 83       	st	Z, r19
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	34 e1       	ldi	r19, 0x14	; 20
     412:	30 83       	st	Z, r19
     414:	31 97       	sbiw	r30, 0x01	; 1
     416:	35 e1       	ldi	r19, 0x15	; 21
     418:	30 83       	st	Z, r19
     41a:	31 97       	sbiw	r30, 0x01	; 1
     41c:	36 e1       	ldi	r19, 0x16	; 22
     41e:	30 83       	st	Z, r19
     420:	31 97       	sbiw	r30, 0x01	; 1
     422:	37 e1       	ldi	r19, 0x17	; 23
     424:	30 83       	st	Z, r19
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	38 e1       	ldi	r19, 0x18	; 24
     42a:	30 83       	st	Z, r19
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	39 e1       	ldi	r19, 0x19	; 25
     430:	30 83       	st	Z, r19
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	30 e2       	ldi	r19, 0x20	; 32
     436:	30 83       	st	Z, r19
     438:	31 97       	sbiw	r30, 0x01	; 1
     43a:	31 e2       	ldi	r19, 0x21	; 33
     43c:	30 83       	st	Z, r19
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	20 83       	st	Z, r18
     442:	31 97       	sbiw	r30, 0x01	; 1
     444:	23 e2       	ldi	r18, 0x23	; 35
     446:	20 83       	st	Z, r18
     448:	31 97       	sbiw	r30, 0x01	; 1
     44a:	40 83       	st	Z, r20
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	50 83       	st	Z, r21
     450:	31 97       	sbiw	r30, 0x01	; 1
     452:	26 e2       	ldi	r18, 0x26	; 38
     454:	20 83       	st	Z, r18
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	27 e2       	ldi	r18, 0x27	; 39
     45a:	20 83       	st	Z, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	28 e2       	ldi	r18, 0x28	; 40
     460:	20 83       	st	Z, r18
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	29 e2       	ldi	r18, 0x29	; 41
     466:	20 83       	st	Z, r18
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	20 e3       	ldi	r18, 0x30	; 48
     46c:	20 83       	st	Z, r18
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	21 e3       	ldi	r18, 0x31	; 49
     472:	20 83       	st	Z, r18
     474:	86 97       	sbiw	r24, 0x26	; 38
     476:	08 95       	ret

00000478 <xPortStartScheduler>:
     478:	0e 94 c7 01 	call	0x38e	; 0x38e <prvSetupTimerInterrupt>
     47c:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     480:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     484:	cd 91       	ld	r28, X+
     486:	cd bf       	out	0x3d, r28	; 61
     488:	dd 91       	ld	r29, X+
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	7f 90       	pop	r7
     4be:	6f 90       	pop	r6
     4c0:	5f 90       	pop	r5
     4c2:	4f 90       	pop	r4
     4c4:	3f 90       	pop	r3
     4c6:	2f 90       	pop	r2
     4c8:	1f 90       	pop	r1
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	08 95       	ret
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	08 95       	ret

000004d6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	0f 92       	push	r0
     4de:	1f 92       	push	r1
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 92       	push	r2
     4e4:	3f 92       	push	r3
     4e6:	4f 92       	push	r4
     4e8:	5f 92       	push	r5
     4ea:	6f 92       	push	r6
     4ec:	7f 92       	push	r7
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	2f 93       	push	r18
     504:	3f 93       	push	r19
     506:	4f 93       	push	r20
     508:	5f 93       	push	r21
     50a:	6f 93       	push	r22
     50c:	7f 93       	push	r23
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	af 93       	push	r26
     514:	bf 93       	push	r27
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ef 93       	push	r30
     51c:	ff 93       	push	r31
     51e:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     522:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     526:	0d b6       	in	r0, 0x3d	; 61
     528:	0d 92       	st	X+, r0
     52a:	0e b6       	in	r0, 0x3e	; 62
     52c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     52e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     532:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     536:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     53a:	cd 91       	ld	r28, X+
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	dd 91       	ld	r29, X+
     540:	de bf       	out	0x3e, r29	; 62
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
     56a:	bf 90       	pop	r11
     56c:	af 90       	pop	r10
     56e:	9f 90       	pop	r9
     570:	8f 90       	pop	r8
     572:	7f 90       	pop	r7
     574:	6f 90       	pop	r6
     576:	5f 90       	pop	r5
     578:	4f 90       	pop	r4
     57a:	3f 90       	pop	r3
     57c:	2f 90       	pop	r2
     57e:	1f 90       	pop	r1
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0

	asm volatile ( "ret" );
     586:	08 95       	ret

00000588 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	0f 92       	push	r0
     590:	1f 92       	push	r1
     592:	11 24       	eor	r1, r1
     594:	2f 92       	push	r2
     596:	3f 92       	push	r3
     598:	4f 92       	push	r4
     59a:	5f 92       	push	r5
     59c:	6f 92       	push	r6
     59e:	7f 92       	push	r7
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
     5d0:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     5d4:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     5d8:	0d b6       	in	r0, 0x3d	; 61
     5da:	0d 92       	st	X+, r0
     5dc:	0e b6       	in	r0, 0x3e	; 62
     5de:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     5e0:	0e 94 65 08 	call	0x10ca	; 0x10ca <xTaskIncrementTick>
     5e4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     5e6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     5ea:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     5ee:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     5f2:	cd 91       	ld	r28, X+
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	dd 91       	ld	r29, X+
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	bf 91       	pop	r27
     604:	af 91       	pop	r26
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	7f 91       	pop	r23
     60c:	6f 91       	pop	r22
     60e:	5f 91       	pop	r21
     610:	4f 91       	pop	r20
     612:	3f 91       	pop	r19
     614:	2f 91       	pop	r18
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	7f 90       	pop	r7
     62c:	6f 90       	pop	r6
     62e:	5f 90       	pop	r5
     630:	4f 90       	pop	r4
     632:	3f 90       	pop	r3
     634:	2f 90       	pop	r2
     636:	1f 90       	pop	r1
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     63e:	08 95       	ret

00000640 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     640:	0e 94 c4 02 	call	0x588	; 0x588 <vPortYieldFromTick>
		asm volatile ( "reti" );
     644:	18 95       	reti

00000646 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     646:	dc 01       	movw	r26, r24
     648:	51 96       	adiw	r26, 0x11	; 17
     64a:	2c 91       	ld	r18, X
     64c:	51 97       	sbiw	r26, 0x11	; 17
     64e:	22 23       	and	r18, r18
     650:	41 f0       	breq	.+16     	; 0x662 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     652:	56 96       	adiw	r26, 0x16	; 22
     654:	ed 91       	ld	r30, X+
     656:	fc 91       	ld	r31, X
     658:	57 97       	sbiw	r26, 0x17	; 23
     65a:	90 81       	ld	r25, Z
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	89 1b       	sub	r24, r25
     660:	08 95       	ret
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	08 95       	ret

00000666 <prvIsQueueEmpty>:
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	0f 92       	push	r0
     66c:	fc 01       	movw	r30, r24
     66e:	82 8d       	ldd	r24, Z+26	; 0x1a
     670:	81 11       	cpse	r24, r1
     672:	02 c0       	rjmp	.+4      	; 0x678 <prvIsQueueEmpty+0x12>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <prvIsQueueEmpty+0x14>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	08 95       	ret

00000680 <prvIsQueueFull>:
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	0f 92       	push	r0
     686:	fc 01       	movw	r30, r24
     688:	22 8d       	ldd	r18, Z+26	; 0x1a
     68a:	83 8d       	ldd	r24, Z+27	; 0x1b
     68c:	28 13       	cpse	r18, r24
     68e:	02 c0       	rjmp	.+4      	; 0x694 <prvIsQueueFull+0x14>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	01 c0       	rjmp	.+2      	; 0x696 <prvIsQueueFull+0x16>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	08 95       	ret

0000069c <prvCopyDataToQueue>:
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
     6a6:	04 2f       	mov	r16, r20
     6a8:	1a 8d       	ldd	r17, Y+26	; 0x1a
     6aa:	4c 8d       	ldd	r20, Y+28	; 0x1c
     6ac:	41 11       	cpse	r20, r1
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <prvCopyDataToQueue+0x2c>
     6b0:	88 81       	ld	r24, Y
     6b2:	99 81       	ldd	r25, Y+1	; 0x01
     6b4:	89 2b       	or	r24, r25
     6b6:	09 f0       	breq	.+2      	; 0x6ba <prvCopyDataToQueue+0x1e>
     6b8:	42 c0       	rjmp	.+132    	; 0x73e <prvCopyDataToQueue+0xa2>
     6ba:	8c 81       	ldd	r24, Y+4	; 0x04
     6bc:	9d 81       	ldd	r25, Y+5	; 0x05
     6be:	0e 94 6f 0c 	call	0x18de	; 0x18de <xTaskPriorityDisinherit>
     6c2:	1d 82       	std	Y+5, r1	; 0x05
     6c4:	1c 82       	std	Y+4, r1	; 0x04
     6c6:	42 c0       	rjmp	.+132    	; 0x74c <prvCopyDataToQueue+0xb0>
     6c8:	01 11       	cpse	r16, r1
     6ca:	17 c0       	rjmp	.+46     	; 0x6fa <prvCopyDataToQueue+0x5e>
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	9b 81       	ldd	r25, Y+3	; 0x03
     6d2:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <memcpy>
     6d6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	9b 81       	ldd	r25, Y+3	; 0x03
     6dc:	82 0f       	add	r24, r18
     6de:	91 1d       	adc	r25, r1
     6e0:	9b 83       	std	Y+3, r25	; 0x03
     6e2:	8a 83       	std	Y+2, r24	; 0x02
     6e4:	2c 81       	ldd	r18, Y+4	; 0x04
     6e6:	3d 81       	ldd	r19, Y+5	; 0x05
     6e8:	82 17       	cp	r24, r18
     6ea:	93 07       	cpc	r25, r19
     6ec:	50 f1       	brcs	.+84     	; 0x742 <prvCopyDataToQueue+0xa6>
     6ee:	88 81       	ld	r24, Y
     6f0:	99 81       	ldd	r25, Y+1	; 0x01
     6f2:	9b 83       	std	Y+3, r25	; 0x03
     6f4:	8a 83       	std	Y+2, r24	; 0x02
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	29 c0       	rjmp	.+82     	; 0x74c <prvCopyDataToQueue+0xb0>
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	8e 81       	ldd	r24, Y+6	; 0x06
     6fe:	9f 81       	ldd	r25, Y+7	; 0x07
     700:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <memcpy>
     704:	8c 8d       	ldd	r24, Y+28	; 0x1c
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	91 95       	neg	r25
     70a:	81 95       	neg	r24
     70c:	91 09       	sbc	r25, r1
     70e:	2e 81       	ldd	r18, Y+6	; 0x06
     710:	3f 81       	ldd	r19, Y+7	; 0x07
     712:	28 0f       	add	r18, r24
     714:	39 1f       	adc	r19, r25
     716:	3f 83       	std	Y+7, r19	; 0x07
     718:	2e 83       	std	Y+6, r18	; 0x06
     71a:	48 81       	ld	r20, Y
     71c:	59 81       	ldd	r21, Y+1	; 0x01
     71e:	24 17       	cp	r18, r20
     720:	35 07       	cpc	r19, r21
     722:	30 f4       	brcc	.+12     	; 0x730 <prvCopyDataToQueue+0x94>
     724:	2c 81       	ldd	r18, Y+4	; 0x04
     726:	3d 81       	ldd	r19, Y+5	; 0x05
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	9f 83       	std	Y+7, r25	; 0x07
     72e:	8e 83       	std	Y+6, r24	; 0x06
     730:	02 30       	cpi	r16, 0x02	; 2
     732:	49 f4       	brne	.+18     	; 0x746 <prvCopyDataToQueue+0xaa>
     734:	11 23       	and	r17, r17
     736:	49 f0       	breq	.+18     	; 0x74a <prvCopyDataToQueue+0xae>
     738:	11 50       	subi	r17, 0x01	; 1
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	07 c0       	rjmp	.+14     	; 0x74c <prvCopyDataToQueue+0xb0>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	05 c0       	rjmp	.+10     	; 0x74c <prvCopyDataToQueue+0xb0>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	03 c0       	rjmp	.+6      	; 0x74c <prvCopyDataToQueue+0xb0>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	01 c0       	rjmp	.+2      	; 0x74c <prvCopyDataToQueue+0xb0>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	1f 5f       	subi	r17, 0xFF	; 255
     74e:	1a 8f       	std	Y+26, r17	; 0x1a
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <prvUnlockQueue>:
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	0f 92       	push	r0
     768:	1e 8d       	ldd	r17, Y+30	; 0x1e
     76a:	0b c0       	rjmp	.+22     	; 0x782 <prvUnlockQueue+0x28>
     76c:	89 89       	ldd	r24, Y+17	; 0x11
     76e:	88 23       	and	r24, r24
     770:	51 f0       	breq	.+20     	; 0x786 <prvUnlockQueue+0x2c>
     772:	ce 01       	movw	r24, r28
     774:	41 96       	adiw	r24, 0x11	; 17
     776:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <xTaskRemoveFromEventList>
     77a:	81 11       	cpse	r24, r1
     77c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <vTaskMissedYield>
     780:	11 50       	subi	r17, 0x01	; 1
     782:	11 16       	cp	r1, r17
     784:	9c f3       	brlt	.-26     	; 0x76c <prvUnlockQueue+0x12>
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	8e 8f       	std	Y+30, r24	; 0x1e
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	0f 92       	push	r0
     794:	1d 8d       	ldd	r17, Y+29	; 0x1d
     796:	0b c0       	rjmp	.+22     	; 0x7ae <prvUnlockQueue+0x54>
     798:	88 85       	ldd	r24, Y+8	; 0x08
     79a:	88 23       	and	r24, r24
     79c:	51 f0       	breq	.+20     	; 0x7b2 <prvUnlockQueue+0x58>
     79e:	ce 01       	movw	r24, r28
     7a0:	08 96       	adiw	r24, 0x08	; 8
     7a2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <xTaskRemoveFromEventList>
     7a6:	81 11       	cpse	r24, r1
     7a8:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <vTaskMissedYield>
     7ac:	11 50       	subi	r17, 0x01	; 1
     7ae:	11 16       	cp	r1, r17
     7b0:	9c f3       	brlt	.-26     	; 0x798 <prvUnlockQueue+0x3e>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	8d 8f       	std	Y+29, r24	; 0x1d
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	08 95       	ret

000007c2 <xQueueGenericReset>:
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	fc 01       	movw	r30, r24
     7cc:	36 2f       	mov	r19, r22
     7ce:	89 2b       	or	r24, r25
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <xQueueGenericReset+0x12>
     7d2:	4d c0       	rjmp	.+154    	; 0x86e <__stack+0xf>
     7d4:	23 8d       	ldd	r18, Z+27	; 0x1b
     7d6:	22 23       	and	r18, r18
     7d8:	09 f4       	brne	.+2      	; 0x7dc <xQueueGenericReset+0x1a>
     7da:	4b c0       	rjmp	.+150    	; 0x872 <__stack+0x13>
     7dc:	02 2f       	mov	r16, r18
     7de:	10 e0       	ldi	r17, 0x00	; 0
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	9f ef       	ldi	r25, 0xFF	; 255
     7e4:	b8 01       	movw	r22, r16
     7e6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     7ea:	44 8d       	ldd	r20, Z+28	; 0x1c
     7ec:	84 2f       	mov	r24, r20
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	68 17       	cp	r22, r24
     7f2:	79 07       	cpc	r23, r25
     7f4:	08 f4       	brcc	.+2      	; 0x7f8 <xQueueGenericReset+0x36>
     7f6:	3f c0       	rjmp	.+126    	; 0x876 <__stack+0x17>
     7f8:	ef 01       	movw	r28, r30
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	0f 92       	push	r0
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	fb 01       	movw	r30, r22
     806:	24 9f       	mul	r18, r20
     808:	e0 0d       	add	r30, r0
     80a:	f1 1d       	adc	r31, r1
     80c:	11 24       	eor	r1, r1
     80e:	fd 83       	std	Y+5, r31	; 0x05
     810:	ec 83       	std	Y+4, r30	; 0x04
     812:	1a 8e       	std	Y+26, r1	; 0x1a
     814:	7b 83       	std	Y+3, r23	; 0x03
     816:	6a 83       	std	Y+2, r22	; 0x02
     818:	01 50       	subi	r16, 0x01	; 1
     81a:	11 09       	sbc	r17, r1
     81c:	80 9f       	mul	r24, r16
     81e:	a0 01       	movw	r20, r0
     820:	81 9f       	mul	r24, r17
     822:	50 0d       	add	r21, r0
     824:	90 9f       	mul	r25, r16
     826:	50 0d       	add	r21, r0
     828:	11 24       	eor	r1, r1
     82a:	cb 01       	movw	r24, r22
     82c:	84 0f       	add	r24, r20
     82e:	95 1f       	adc	r25, r21
     830:	9f 83       	std	Y+7, r25	; 0x07
     832:	8e 83       	std	Y+6, r24	; 0x06
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	8d 8f       	std	Y+29, r24	; 0x1d
     838:	8e 8f       	std	Y+30, r24	; 0x1e
     83a:	31 11       	cpse	r19, r1
     83c:	0c c0       	rjmp	.+24     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     83e:	88 85       	ldd	r24, Y+8	; 0x08
     840:	88 23       	and	r24, r24
     842:	89 f0       	breq	.+34     	; 0x866 <__stack+0x7>
     844:	ce 01       	movw	r24, r28
     846:	08 96       	adiw	r24, 0x08	; 8
     848:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <xTaskRemoveFromEventList>
     84c:	88 23       	and	r24, r24
     84e:	59 f0       	breq	.+22     	; 0x866 <__stack+0x7>
     850:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
     854:	08 c0       	rjmp	.+16     	; 0x866 <__stack+0x7>
     856:	ce 01       	movw	r24, r28
     858:	08 96       	adiw	r24, 0x08	; 8
     85a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     85e:	ce 01       	movw	r24, r28
     860:	41 96       	adiw	r24, 0x11	; 17
     862:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	03 c0       	rjmp	.+6      	; 0x878 <__stack+0x19>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	01 c0       	rjmp	.+2      	; 0x878 <__stack+0x19>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <prvInitialiseNewQueue>:
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	f8 01       	movw	r30, r16
     888:	61 11       	cpse	r22, r1
     88a:	03 c0       	rjmp	.+6      	; 0x892 <prvInitialiseNewQueue+0x10>
     88c:	11 83       	std	Z+1, r17	; 0x01
     88e:	00 83       	st	Z, r16
     890:	02 c0       	rjmp	.+4      	; 0x896 <prvInitialiseNewQueue+0x14>
     892:	51 83       	std	Z+1, r21	; 0x01
     894:	40 83       	st	Z, r20
     896:	83 8f       	std	Z+27, r24	; 0x1b
     898:	64 8f       	std	Z+28, r22	; 0x1c
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	cf 01       	movw	r24, r30
     89e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <xQueueGenericReset>
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	08 95       	ret

000008a8 <xQueueGenericCreate>:
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	38 2f       	mov	r19, r24
     8b8:	e6 2f       	mov	r30, r22
     8ba:	88 23       	and	r24, r24
     8bc:	29 f1       	breq	.+74     	; 0x908 <xQueueGenericCreate+0x60>
     8be:	68 2f       	mov	r22, r24
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     8ca:	8e 2f       	mov	r24, r30
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	68 17       	cp	r22, r24
     8d0:	79 07       	cpc	r23, r25
     8d2:	e8 f0       	brcs	.+58     	; 0x90e <xQueueGenericCreate+0x66>
     8d4:	3e 9f       	mul	r19, r30
     8d6:	c0 01       	movw	r24, r0
     8d8:	11 24       	eor	r1, r1
     8da:	81 3e       	cpi	r24, 0xE1	; 225
     8dc:	2f ef       	ldi	r18, 0xFF	; 255
     8de:	92 07       	cpc	r25, r18
     8e0:	c8 f4       	brcc	.+50     	; 0x914 <xQueueGenericCreate+0x6c>
     8e2:	d4 2e       	mov	r13, r20
     8e4:	de 2f       	mov	r29, r30
     8e6:	c3 2f       	mov	r28, r19
     8e8:	4f 96       	adiw	r24, 0x1f	; 31
     8ea:	0e 94 36 01 	call	0x26c	; 0x26c <pvPortMalloc>
     8ee:	7c 01       	movw	r14, r24
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	91 f0       	breq	.+36     	; 0x918 <xQueueGenericCreate+0x70>
     8f4:	8c 01       	movw	r16, r24
     8f6:	2d 2d       	mov	r18, r13
     8f8:	ac 01       	movw	r20, r24
     8fa:	41 5e       	subi	r20, 0xE1	; 225
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	6d 2f       	mov	r22, r29
     900:	8c 2f       	mov	r24, r28
     902:	0e 94 41 04 	call	0x882	; 0x882 <prvInitialiseNewQueue>
     906:	08 c0       	rjmp	.+16     	; 0x918 <xQueueGenericCreate+0x70>
     908:	e1 2c       	mov	r14, r1
     90a:	f1 2c       	mov	r15, r1
     90c:	05 c0       	rjmp	.+10     	; 0x918 <xQueueGenericCreate+0x70>
     90e:	e1 2c       	mov	r14, r1
     910:	f1 2c       	mov	r15, r1
     912:	02 c0       	rjmp	.+4      	; 0x918 <xQueueGenericCreate+0x70>
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
     918:	c7 01       	movw	r24, r14
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	08 95       	ret

0000092a <xQueueGenericSend>:
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	00 d0       	rcall	.+0      	; 0x93c <xQueueGenericSend+0x12>
     93c:	00 d0       	rcall	.+0      	; 0x93e <xQueueGenericSend+0x14>
     93e:	1f 92       	push	r1
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	8c 01       	movw	r16, r24
     946:	7b 01       	movw	r14, r22
     948:	5d 83       	std	Y+5, r21	; 0x05
     94a:	4c 83       	std	Y+4, r20	; 0x04
     94c:	c2 2e       	mov	r12, r18
     94e:	d1 2c       	mov	r13, r1
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	0f 92       	push	r0
     956:	f8 01       	movw	r30, r16
     958:	92 8d       	ldd	r25, Z+26	; 0x1a
     95a:	83 8d       	ldd	r24, Z+27	; 0x1b
     95c:	98 17       	cp	r25, r24
     95e:	18 f0       	brcs	.+6      	; 0x966 <xQueueGenericSend+0x3c>
     960:	f2 e0       	ldi	r31, 0x02	; 2
     962:	cf 12       	cpse	r12, r31
     964:	19 c0       	rjmp	.+50     	; 0x998 <xQueueGenericSend+0x6e>
     966:	4c 2d       	mov	r20, r12
     968:	b7 01       	movw	r22, r14
     96a:	c8 01       	movw	r24, r16
     96c:	0e 94 4e 03 	call	0x69c	; 0x69c <prvCopyDataToQueue>
     970:	f8 01       	movw	r30, r16
     972:	91 89       	ldd	r25, Z+17	; 0x11
     974:	99 23       	and	r25, r25
     976:	49 f0       	breq	.+18     	; 0x98a <xQueueGenericSend+0x60>
     978:	c8 01       	movw	r24, r16
     97a:	41 96       	adiw	r24, 0x11	; 17
     97c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <xTaskRemoveFromEventList>
     980:	88 23       	and	r24, r24
     982:	31 f0       	breq	.+12     	; 0x990 <xQueueGenericSend+0x66>
     984:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
     988:	03 c0       	rjmp	.+6      	; 0x990 <xQueueGenericSend+0x66>
     98a:	81 11       	cpse	r24, r1
     98c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	4d c0       	rjmp	.+154    	; 0xa32 <xQueueGenericSend+0x108>
     998:	8c 81       	ldd	r24, Y+4	; 0x04
     99a:	9d 81       	ldd	r25, Y+5	; 0x05
     99c:	89 2b       	or	r24, r25
     99e:	21 f4       	brne	.+8      	; 0x9a8 <xQueueGenericSend+0x7e>
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	45 c0       	rjmp	.+138    	; 0xa32 <xQueueGenericSend+0x108>
     9a8:	d1 10       	cpse	r13, r1
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <xQueueGenericSend+0x8e>
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	0e 94 8d 0b 	call	0x171a	; 0x171a <vTaskInternalSetTimeOutState>
     9b4:	dd 24       	eor	r13, r13
     9b6:	d3 94       	inc	r13
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0e 94 5f 08 	call	0x10be	; 0x10be <vTaskSuspendAll>
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	0f 92       	push	r0
     9c6:	f8 01       	movw	r30, r16
     9c8:	85 8d       	ldd	r24, Z+29	; 0x1d
     9ca:	8f 3f       	cpi	r24, 0xFF	; 255
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <xQueueGenericSend+0xa6>
     9ce:	15 8e       	std	Z+29, r1	; 0x1d
     9d0:	f8 01       	movw	r30, r16
     9d2:	86 8d       	ldd	r24, Z+30	; 0x1e
     9d4:	8f 3f       	cpi	r24, 0xFF	; 255
     9d6:	09 f4       	brne	.+2      	; 0x9da <xQueueGenericSend+0xb0>
     9d8:	16 8e       	std	Z+30, r1	; 0x1e
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	be 01       	movw	r22, r28
     9e0:	6c 5f       	subi	r22, 0xFC	; 252
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	0e 94 98 0b 	call	0x1730	; 0x1730 <xTaskCheckForTimeOut>
     9ec:	81 11       	cpse	r24, r1
     9ee:	1b c0       	rjmp	.+54     	; 0xa26 <xQueueGenericSend+0xfc>
     9f0:	c8 01       	movw	r24, r16
     9f2:	0e 94 40 03 	call	0x680	; 0x680 <prvIsQueueFull>
     9f6:	88 23       	and	r24, r24
     9f8:	81 f0       	breq	.+32     	; 0xa1a <xQueueGenericSend+0xf0>
     9fa:	6c 81       	ldd	r22, Y+4	; 0x04
     9fc:	7d 81       	ldd	r23, Y+5	; 0x05
     9fe:	c8 01       	movw	r24, r16
     a00:	08 96       	adiw	r24, 0x08	; 8
     a02:	0e 94 be 0a 	call	0x157c	; 0x157c <vTaskPlaceOnEventList>
     a06:	c8 01       	movw	r24, r16
     a08:	0e 94 ad 03 	call	0x75a	; 0x75a <prvUnlockQueue>
     a0c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
     a10:	81 11       	cpse	r24, r1
     a12:	9e cf       	rjmp	.-196    	; 0x950 <xQueueGenericSend+0x26>
     a14:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
     a18:	9b cf       	rjmp	.-202    	; 0x950 <xQueueGenericSend+0x26>
     a1a:	c8 01       	movw	r24, r16
     a1c:	0e 94 ad 03 	call	0x75a	; 0x75a <prvUnlockQueue>
     a20:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
     a24:	95 cf       	rjmp	.-214    	; 0x950 <xQueueGenericSend+0x26>
     a26:	c8 01       	movw	r24, r16
     a28:	0e 94 ad 03 	call	0x75a	; 0x75a <prvUnlockQueue>
     a2c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <xQueueSemaphoreTake+0xe>
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <xQueueSemaphoreTake+0x10>
     a5e:	1f 92       	push	r1
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	8c 01       	movw	r16, r24
     a66:	7d 83       	std	Y+5, r23	; 0x05
     a68:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     a6a:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     a6c:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     a74:	f8 01       	movw	r30, r16
     a76:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     a78:	88 23       	and	r24, r24
     a7a:	d1 f0       	breq	.+52     	; 0xab0 <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     a7c:	81 50       	subi	r24, 0x01	; 1
     a7e:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	89 2b       	or	r24, r25
     a86:	29 f4       	brne	.+10     	; 0xa92 <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     a88:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <pvTaskIncrementMutexHeldCount>
     a8c:	f8 01       	movw	r30, r16
     a8e:	95 83       	std	Z+5, r25	; 0x05
     a90:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check_Password to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     a92:	f8 01       	movw	r30, r16
     a94:	80 85       	ldd	r24, Z+8	; 0x08
     a96:	88 23       	and	r24, r24
     a98:	39 f0       	breq	.+14     	; 0xaa8 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     a9a:	c8 01       	movw	r24, r16
     a9c:	08 96       	adiw	r24, 0x08	; 8
     a9e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <xTaskRemoveFromEventList>
     aa2:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     aa4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	74 c0       	rjmp	.+232    	; 0xb98 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     ab0:	8c 81       	ldd	r24, Y+4	; 0x04
     ab2:	9d 81       	ldd	r25, Y+5	; 0x05
     ab4:	89 2b       	or	r24, r25
     ab6:	21 f4       	brne	.+8      	; 0xac0 <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	6c c0       	rjmp	.+216    	; 0xb98 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     ac0:	f1 10       	cpse	r15, r1
     ac2:	06 c0       	rjmp	.+12     	; 0xad0 <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 8d 0b 	call	0x171a	; 0x171a <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     acc:	ff 24       	eor	r15, r15
     ace:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     ad4:	0e 94 5f 08 	call	0x10be	; 0x10be <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	0f 92       	push	r0
     ade:	f8 01       	movw	r30, r16
     ae0:	85 8d       	ldd	r24, Z+29	; 0x1d
     ae2:	8f 3f       	cpi	r24, 0xFF	; 255
     ae4:	09 f4       	brne	.+2      	; 0xae8 <xQueueSemaphoreTake+0x9a>
     ae6:	15 8e       	std	Z+29, r1	; 0x1d
     ae8:	f8 01       	movw	r30, r16
     aea:	86 8d       	ldd	r24, Z+30	; 0x1e
     aec:	8f 3f       	cpi	r24, 0xFF	; 255
     aee:	09 f4       	brne	.+2      	; 0xaf2 <xQueueSemaphoreTake+0xa4>
     af0:	16 8e       	std	Z+30, r1	; 0x1e
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     af6:	be 01       	movw	r22, r28
     af8:	6c 5f       	subi	r22, 0xFC	; 252
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 98 0b 	call	0x1730	; 0x1730 <xTaskCheckForTimeOut>
     b04:	81 11       	cpse	r24, r1
     b06:	2a c0       	rjmp	.+84     	; 0xb5c <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 33 03 	call	0x666	; 0x666 <prvIsQueueEmpty>
     b0e:	88 23       	and	r24, r24
     b10:	f9 f0       	breq	.+62     	; 0xb50 <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     b12:	f8 01       	movw	r30, r16
     b14:	80 81       	ld	r24, Z
     b16:	91 81       	ldd	r25, Z+1	; 0x01
     b18:	89 2b       	or	r24, r25
     b1a:	51 f4       	brne	.+20     	; 0xb30 <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     b22:	84 81       	ldd	r24, Z+4	; 0x04
     b24:	95 81       	ldd	r25, Z+5	; 0x05
     b26:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <xTaskPriorityInherit>
     b2a:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     b30:	6c 81       	ldd	r22, Y+4	; 0x04
     b32:	7d 81       	ldd	r23, Y+5	; 0x05
     b34:	c8 01       	movw	r24, r16
     b36:	41 96       	adiw	r24, 0x11	; 17
     b38:	0e 94 be 0a 	call	0x157c	; 0x157c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     b3c:	c8 01       	movw	r24, r16
     b3e:	0e 94 ad 03 	call	0x75a	; 0x75a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     b42:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
     b46:	81 11       	cpse	r24, r1
     b48:	92 cf       	rjmp	.-220    	; 0xa6e <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     b4a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
     b4e:	8f cf       	rjmp	.-226    	; 0xa6e <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     b50:	c8 01       	movw	r24, r16
     b52:	0e 94 ad 03 	call	0x75a	; 0x75a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     b56:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
     b5a:	89 cf       	rjmp	.-238    	; 0xa6e <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     b5c:	c8 01       	movw	r24, r16
     b5e:	0e 94 ad 03 	call	0x75a	; 0x75a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     b62:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 33 03 	call	0x666	; 0x666 <prvIsQueueEmpty>
     b6c:	88 23       	and	r24, r24
     b6e:	09 f4       	brne	.+2      	; 0xb72 <xQueueSemaphoreTake+0x124>
     b70:	7e cf       	rjmp	.-260    	; 0xa6e <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to Check_Password it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     b72:	ee 20       	and	r14, r14
     b74:	81 f0       	breq	.+32     	; 0xb96 <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     b7c:	c8 01       	movw	r24, r16
     b7e:	0e 94 23 03 	call	0x646	; 0x646 <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     b82:	68 2f       	mov	r22, r24
     b84:	f8 01       	movw	r30, r16
     b86:	84 81       	ldd	r24, Z+4	; 0x04
     b88:	95 81       	ldd	r25, Z+5	; 0x05
     b8a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <xQueueSemaphoreTake+0x14a>
     b96:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	08 95       	ret

00000bb0 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     bb0:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     bb4:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     bb8:	80 81       	ld	r24, Z
     bba:	81 11       	cpse	r24, r1
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <prvResetNextTaskUnblockTime+0x1c>
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
     bc2:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     bc6:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     bca:	08 95       	ret
     bcc:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     bd0:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     bd4:	05 80       	ldd	r0, Z+5	; 0x05
     bd6:	f6 81       	ldd	r31, Z+6	; 0x06
     bd8:	e0 2d       	mov	r30, r0
     bda:	80 81       	ld	r24, Z
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
     bde:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     be2:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     be6:	08 95       	ret

00000be8 <prvDeleteTCB>:
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	ec 01       	movw	r28, r24
     bee:	8f 89       	ldd	r24, Y+23	; 0x17
     bf0:	98 8d       	ldd	r25, Y+24	; 0x18
     bf2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <vPortFree>
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <vPortFree>
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <prvInitialiseNewTask>:
     c02:	6f 92       	push	r6
     c04:	7f 92       	push	r7
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	4c 01       	movw	r8, r24
     c22:	d5 01       	movw	r26, r10
     c24:	57 96       	adiw	r26, 0x17	; 23
     c26:	8d 91       	ld	r24, X+
     c28:	9c 91       	ld	r25, X
     c2a:	58 97       	sbiw	r26, 0x18	; 24
     c2c:	21 50       	subi	r18, 0x01	; 1
     c2e:	31 09       	sbc	r19, r1
     c30:	3c 01       	movw	r6, r24
     c32:	62 0e       	add	r6, r18
     c34:	73 1e       	adc	r7, r19
     c36:	61 15       	cp	r22, r1
     c38:	71 05       	cpc	r23, r1
     c3a:	89 f4       	brne	.+34     	; 0xc5e <prvInitialiseNewTask+0x5c>
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <prvInitialiseNewTask+0x68>
     c3e:	82 2f       	mov	r24, r18
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	fb 01       	movw	r30, r22
     c44:	e8 0f       	add	r30, r24
     c46:	f9 1f       	adc	r31, r25
     c48:	30 81       	ld	r19, Z
     c4a:	d5 01       	movw	r26, r10
     c4c:	a8 0f       	add	r26, r24
     c4e:	b9 1f       	adc	r27, r25
     c50:	59 96       	adiw	r26, 0x19	; 25
     c52:	3c 93       	st	X, r19
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	29 f0       	breq	.+10     	; 0xc64 <prvInitialiseNewTask+0x62>
     c5a:	2f 5f       	subi	r18, 0xFF	; 255
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <prvInitialiseNewTask+0x5e>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	28 30       	cpi	r18, 0x08	; 8
     c62:	68 f3       	brcs	.-38     	; 0xc3e <prvInitialiseNewTask+0x3c>
     c64:	f5 01       	movw	r30, r10
     c66:	10 a2       	std	Z+32, r1	; 0x20
     c68:	03 c0       	rjmp	.+6      	; 0xc70 <prvInitialiseNewTask+0x6e>
     c6a:	d5 01       	movw	r26, r10
     c6c:	59 96       	adiw	r26, 0x19	; 25
     c6e:	1c 92       	st	X, r1
     c70:	b3 e0       	ldi	r27, 0x03	; 3
     c72:	be 15       	cp	r27, r14
     c74:	20 f4       	brcc	.+8      	; 0xc7e <prvInitialiseNewTask+0x7c>
     c76:	0f 2e       	mov	r0, r31
     c78:	f3 e0       	ldi	r31, 0x03	; 3
     c7a:	ef 2e       	mov	r14, r31
     c7c:	f0 2d       	mov	r31, r0
     c7e:	f5 01       	movw	r30, r10
     c80:	e6 8a       	std	Z+22, r14	; 0x16
     c82:	e1 a2       	std	Z+33, r14	; 0x21
     c84:	12 a2       	std	Z+34, r1	; 0x22
     c86:	c5 01       	movw	r24, r10
     c88:	02 96       	adiw	r24, 0x02	; 2
     c8a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <vListInitialiseItem>
     c8e:	c5 01       	movw	r24, r10
     c90:	0c 96       	adiw	r24, 0x0c	; 12
     c92:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <vListInitialiseItem>
     c96:	d5 01       	movw	r26, r10
     c98:	19 96       	adiw	r26, 0x09	; 9
     c9a:	bc 92       	st	X, r11
     c9c:	ae 92       	st	-X, r10
     c9e:	18 97       	sbiw	r26, 0x08	; 8
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	8e 19       	sub	r24, r14
     ca6:	91 09       	sbc	r25, r1
     ca8:	1d 96       	adiw	r26, 0x0d	; 13
     caa:	9c 93       	st	X, r25
     cac:	8e 93       	st	-X, r24
     cae:	1c 97       	sbiw	r26, 0x0c	; 12
     cb0:	53 96       	adiw	r26, 0x13	; 19
     cb2:	bc 92       	st	X, r11
     cb4:	ae 92       	st	-X, r10
     cb6:	52 97       	sbiw	r26, 0x12	; 18
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	f5 01       	movw	r30, r10
     cbc:	b3 96       	adiw	r30, 0x23	; 35
     cbe:	df 01       	movw	r26, r30
     cc0:	1d 92       	st	X+, r1
     cc2:	8a 95       	dec	r24
     cc4:	e9 f7       	brne	.-6      	; 0xcc0 <prvInitialiseNewTask+0xbe>
     cc6:	f5 01       	movw	r30, r10
     cc8:	17 a2       	std	Z+39, r1	; 0x27
     cca:	a8 01       	movw	r20, r16
     ccc:	b4 01       	movw	r22, r8
     cce:	c3 01       	movw	r24, r6
     cd0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <pxPortInitialiseStack>
     cd4:	d5 01       	movw	r26, r10
     cd6:	8d 93       	st	X+, r24
     cd8:	9c 93       	st	X, r25
     cda:	c1 14       	cp	r12, r1
     cdc:	d1 04       	cpc	r13, r1
     cde:	19 f0       	breq	.+6      	; 0xce6 <prvInitialiseNewTask+0xe4>
     ce0:	f6 01       	movw	r30, r12
     ce2:	b1 82       	std	Z+1, r11	; 0x01
     ce4:	a0 82       	st	Z, r10
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	08 95       	ret

00000d02 <prvInitialiseTaskLists>:
     d02:	cf 93       	push	r28
     d04:	c0 e0       	ldi	r28, 0x00	; 0
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <prvInitialiseTaskLists+0x26>
     d08:	8c 2f       	mov	r24, r28
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	87 55       	subi	r24, 0x57	; 87
     d20:	9b 4f       	sbci	r25, 0xFB	; 251
     d22:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     d26:	cf 5f       	subi	r28, 0xFF	; 255
     d28:	c4 30       	cpi	r28, 0x04	; 4
     d2a:	70 f3       	brcs	.-36     	; 0xd08 <prvInitialiseTaskLists+0x6>
     d2c:	80 ea       	ldi	r24, 0xA0	; 160
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     d34:	87 e9       	ldi	r24, 0x97	; 151
     d36:	94 e0       	ldi	r25, 0x04	; 4
     d38:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     d3c:	8a e8       	ldi	r24, 0x8A	; 138
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     d44:	81 e8       	ldi	r24, 0x81	; 129
     d46:	94 e0       	ldi	r25, 0x04	; 4
     d48:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     d4c:	87 e7       	ldi	r24, 0x77	; 119
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vListInitialise>
     d54:	80 ea       	ldi	r24, 0xA0	; 160
     d56:	94 e0       	ldi	r25, 0x04	; 4
     d58:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <pxDelayedTaskList+0x1>
     d5c:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <pxDelayedTaskList>
     d60:	87 e9       	ldi	r24, 0x97	; 151
     d62:	94 e0       	ldi	r25, 0x04	; 4
     d64:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     d68:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <pxOverflowDelayedTaskList>
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <prvAddNewTaskToReadyList>:
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	0f 92       	push	r0
     d7c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <uxCurrentNumberOfTasks>
     d86:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d8a:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d8e:	89 2b       	or	r24, r25
     d90:	59 f4       	brne	.+22     	; 0xda8 <prvAddNewTaskToReadyList+0x38>
     d92:	d0 93 ce 04 	sts	0x04CE, r29	; 0x8004ce <pxCurrentTCB+0x1>
     d96:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <pxCurrentTCB>
     d9a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	99 f4       	brne	.+38     	; 0xdc8 <prvAddNewTaskToReadyList+0x58>
     da2:	0e 94 81 06 	call	0xd02	; 0xd02 <prvInitialiseTaskLists>
     da6:	10 c0       	rjmp	.+32     	; 0xdc8 <prvAddNewTaskToReadyList+0x58>
     da8:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xSchedulerRunning>
     dac:	81 11       	cpse	r24, r1
     dae:	0c c0       	rjmp	.+24     	; 0xdc8 <prvAddNewTaskToReadyList+0x58>
     db0:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     db4:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     db8:	96 89       	ldd	r25, Z+22	; 0x16
     dba:	8e 89       	ldd	r24, Y+22	; 0x16
     dbc:	89 17       	cp	r24, r25
     dbe:	20 f0       	brcs	.+8      	; 0xdc8 <prvAddNewTaskToReadyList+0x58>
     dc0:	d0 93 ce 04 	sts	0x04CE, r29	; 0x8004ce <pxCurrentTCB+0x1>
     dc4:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <pxCurrentTCB>
     dc8:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <uxTaskNumber>
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <uxTaskNumber>
     dd2:	8e 89       	ldd	r24, Y+22	; 0x16
     dd4:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
     dd8:	98 17       	cp	r25, r24
     dda:	10 f4       	brcc	.+4      	; 0xde0 <prvAddNewTaskToReadyList+0x70>
     ddc:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	8e 0f       	add	r24, r30
     df2:	9f 1f       	adc	r25, r31
     df4:	fc 01       	movw	r30, r24
     df6:	e7 55       	subi	r30, 0x57	; 87
     df8:	fb 4f       	sbci	r31, 0xFB	; 251
     dfa:	01 80       	ldd	r0, Z+1	; 0x01
     dfc:	f2 81       	ldd	r31, Z+2	; 0x02
     dfe:	e0 2d       	mov	r30, r0
     e00:	fd 83       	std	Y+5, r31	; 0x05
     e02:	ec 83       	std	Y+4, r30	; 0x04
     e04:	84 81       	ldd	r24, Z+4	; 0x04
     e06:	95 81       	ldd	r25, Z+5	; 0x05
     e08:	9f 83       	std	Y+7, r25	; 0x07
     e0a:	8e 83       	std	Y+6, r24	; 0x06
     e0c:	a4 81       	ldd	r26, Z+4	; 0x04
     e0e:	b5 81       	ldd	r27, Z+5	; 0x05
     e10:	ce 01       	movw	r24, r28
     e12:	02 96       	adiw	r24, 0x02	; 2
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	12 97       	sbiw	r26, 0x02	; 2
     e1c:	95 83       	std	Z+5, r25	; 0x05
     e1e:	84 83       	std	Z+4, r24	; 0x04
     e20:	ee 89       	ldd	r30, Y+22	; 0x16
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	cf 01       	movw	r24, r30
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	e8 0f       	add	r30, r24
     e34:	f9 1f       	adc	r31, r25
     e36:	e7 55       	subi	r30, 0x57	; 87
     e38:	fb 4f       	sbci	r31, 0xFB	; 251
     e3a:	fb 87       	std	Y+11, r31	; 0x0b
     e3c:	ea 87       	std	Y+10, r30	; 0x0a
     e3e:	80 81       	ld	r24, Z
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	80 83       	st	Z, r24
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xSchedulerRunning>
     e4c:	88 23       	and	r24, r24
     e4e:	51 f0       	breq	.+20     	; 0xe64 <prvAddNewTaskToReadyList+0xf4>
     e50:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     e54:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     e58:	96 89       	ldd	r25, Z+22	; 0x16
     e5a:	8e 89       	ldd	r24, Y+22	; 0x16
     e5c:	98 17       	cp	r25, r24
     e5e:	10 f4       	brcc	.+4      	; 0xe64 <prvAddNewTaskToReadyList+0xf4>
     e60:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <prvCheckTasksWaitingTermination>:
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	1c c0       	rjmp	.+56     	; 0xea8 <prvCheckTasksWaitingTermination+0x3e>
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	0f 92       	push	r0
     e76:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <xTasksWaitingTermination+0x5>
     e7a:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <xTasksWaitingTermination+0x6>
     e7e:	c6 81       	ldd	r28, Z+6	; 0x06
     e80:	d7 81       	ldd	r29, Z+7	; 0x07
     e82:	ce 01       	movw	r24, r28
     e84:	02 96       	adiw	r24, 0x02	; 2
     e86:	0e 94 a0 01 	call	0x340	; 0x340 <uxListRemove>
     e8a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <uxCurrentNumberOfTasks>
     e94:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     e98:	81 50       	subi	r24, 0x01	; 1
     e9a:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	ce 01       	movw	r24, r28
     ea4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <prvDeleteTCB>
     ea8:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     eac:	81 11       	cpse	r24, r1
     eae:	e0 cf       	rjmp	.-64     	; 0xe70 <prvCheckTasksWaitingTermination+0x6>
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <prvIdleTask>:
     eb6:	0e 94 35 07 	call	0xe6a	; 0xe6a <prvCheckTasksWaitingTermination>
     eba:	fd cf       	rjmp	.-6      	; 0xeb6 <prvIdleTask>

00000ebc <prvAddCurrentTaskToDelayedList>:
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
     ec8:	f6 2e       	mov	r15, r22
     eca:	00 91 74 04 	lds	r16, 0x0474	; 0x800474 <xTickCount>
     ece:	10 91 75 04 	lds	r17, 0x0475	; 0x800475 <xTickCount+0x1>
     ed2:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     ed6:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     eda:	02 96       	adiw	r24, 0x02	; 2
     edc:	0e 94 a0 01 	call	0x340	; 0x340 <uxListRemove>
     ee0:	cf 3f       	cpi	r28, 0xFF	; 255
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	d8 07       	cpc	r29, r24
     ee6:	b1 f5       	brne	.+108    	; 0xf54 <prvAddCurrentTaskToDelayedList+0x98>
     ee8:	ff 20       	and	r15, r15
     eea:	a1 f1       	breq	.+104    	; 0xf54 <prvAddCurrentTaskToDelayedList+0x98>
     eec:	e7 e7       	ldi	r30, 0x77	; 119
     eee:	f4 e0       	ldi	r31, 0x04	; 4
     ef0:	a1 81       	ldd	r26, Z+1	; 0x01
     ef2:	b2 81       	ldd	r27, Z+2	; 0x02
     ef4:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <pxCurrentTCB>
     ef8:	d0 91 ce 04 	lds	r29, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     efc:	bd 83       	std	Y+5, r27	; 0x05
     efe:	ac 83       	std	Y+4, r26	; 0x04
     f00:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f04:	d0 91 ce 04 	lds	r29, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f08:	14 96       	adiw	r26, 0x04	; 4
     f0a:	8d 91       	ld	r24, X+
     f0c:	9c 91       	ld	r25, X
     f0e:	15 97       	sbiw	r26, 0x05	; 5
     f10:	9f 83       	std	Y+7, r25	; 0x07
     f12:	8e 83       	std	Y+6, r24	; 0x06
     f14:	14 96       	adiw	r26, 0x04	; 4
     f16:	cd 91       	ld	r28, X+
     f18:	dc 91       	ld	r29, X
     f1a:	15 97       	sbiw	r26, 0x05	; 5
     f1c:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f20:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f24:	02 96       	adiw	r24, 0x02	; 2
     f26:	9b 83       	std	Y+3, r25	; 0x03
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f2e:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f32:	02 96       	adiw	r24, 0x02	; 2
     f34:	15 96       	adiw	r26, 0x05	; 5
     f36:	9c 93       	st	X, r25
     f38:	8e 93       	st	-X, r24
     f3a:	14 97       	sbiw	r26, 0x04	; 4
     f3c:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f40:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f44:	1b 96       	adiw	r26, 0x0b	; 11
     f46:	fc 93       	st	X, r31
     f48:	ee 93       	st	-X, r30
     f4a:	1a 97       	sbiw	r26, 0x0a	; 10
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 5f       	subi	r24, 0xFF	; 255
     f50:	80 83       	st	Z, r24
     f52:	2f c0       	rjmp	.+94     	; 0xfb2 <prvAddCurrentTaskToDelayedList+0xf6>
     f54:	c0 0f       	add	r28, r16
     f56:	d1 1f       	adc	r29, r17
     f58:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f5c:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f60:	d3 83       	std	Z+3, r29	; 0x03
     f62:	c2 83       	std	Z+2, r28	; 0x02
     f64:	c0 17       	cp	r28, r16
     f66:	d1 07       	cpc	r29, r17
     f68:	68 f4       	brcc	.+26     	; 0xf84 <prvAddCurrentTaskToDelayedList+0xc8>
     f6a:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f6e:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f72:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <pxOverflowDelayedTaskList>
     f76:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     f7a:	6e 5f       	subi	r22, 0xFE	; 254
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	0e 94 6f 01 	call	0x2de	; 0x2de <vListInsert>
     f82:	17 c0       	rjmp	.+46     	; 0xfb2 <prvAddCurrentTaskToDelayedList+0xf6>
     f84:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
     f88:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     f8c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <pxDelayedTaskList>
     f90:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f94:	6e 5f       	subi	r22, 0xFE	; 254
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	0e 94 6f 01 	call	0x2de	; 0x2de <vListInsert>
     f9c:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <xNextTaskUnblockTime>
     fa0:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <xNextTaskUnblockTime+0x1>
     fa4:	c8 17       	cp	r28, r24
     fa6:	d9 07       	cpc	r29, r25
     fa8:	20 f4       	brcc	.+8      	; 0xfb2 <prvAddCurrentTaskToDelayedList+0xf6>
     faa:	d0 93 6c 04 	sts	0x046C, r29	; 0x80046c <xNextTaskUnblockTime+0x1>
     fae:	c0 93 6b 04 	sts	0x046B, r28	; 0x80046b <xNextTaskUnblockTime>
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	08 95       	ret

00000fbe <xTaskCreate>:
     fbe:	2f 92       	push	r2
     fc0:	3f 92       	push	r3
     fc2:	4f 92       	push	r4
     fc4:	5f 92       	push	r5
     fc6:	6f 92       	push	r6
     fc8:	7f 92       	push	r7
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	3c 01       	movw	r6, r24
     fe4:	1b 01       	movw	r2, r22
     fe6:	5a 01       	movw	r10, r20
     fe8:	29 01       	movw	r4, r18
     fea:	ca 01       	movw	r24, r20
     fec:	0e 94 36 01 	call	0x26c	; 0x26c <pvPortMalloc>
     ff0:	6c 01       	movw	r12, r24
     ff2:	89 2b       	or	r24, r25
     ff4:	71 f0       	breq	.+28     	; 0x1012 <xTaskCreate+0x54>
     ff6:	88 e2       	ldi	r24, 0x28	; 40
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 36 01 	call	0x26c	; 0x26c <pvPortMalloc>
     ffe:	ec 01       	movw	r28, r24
    1000:	89 2b       	or	r24, r25
    1002:	19 f0       	breq	.+6      	; 0x100a <xTaskCreate+0x4c>
    1004:	d8 8e       	std	Y+24, r13	; 0x18
    1006:	cf 8a       	std	Y+23, r12	; 0x17
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <xTaskCreate+0x58>
    100a:	c6 01       	movw	r24, r12
    100c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <vPortFree>
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <xTaskCreate+0x58>
    1012:	c0 e0       	ldi	r28, 0x00	; 0
    1014:	d0 e0       	ldi	r29, 0x00	; 0
    1016:	20 97       	sbiw	r28, 0x00	; 0
    1018:	91 f0       	breq	.+36     	; 0x103e <xTaskCreate+0x80>
    101a:	95 01       	movw	r18, r10
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	81 2c       	mov	r8, r1
    1022:	91 2c       	mov	r9, r1
    1024:	5e 01       	movw	r10, r28
    1026:	67 01       	movw	r12, r14
    1028:	e0 2e       	mov	r14, r16
    102a:	82 01       	movw	r16, r4
    102c:	b1 01       	movw	r22, r2
    102e:	c3 01       	movw	r24, r6
    1030:	0e 94 01 06 	call	0xc02	; 0xc02 <prvInitialiseNewTask>
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 b8 06 	call	0xd70	; 0xd70 <prvAddNewTaskToReadyList>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <xTaskCreate+0x82>
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	9f 90       	pop	r9
    1056:	8f 90       	pop	r8
    1058:	7f 90       	pop	r7
    105a:	6f 90       	pop	r6
    105c:	5f 90       	pop	r5
    105e:	4f 90       	pop	r4
    1060:	3f 90       	pop	r3
    1062:	2f 90       	pop	r2
    1064:	08 95       	ret

00001066 <vTaskStartScheduler>:
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	0f 2e       	mov	r0, r31
    106e:	f9 e6       	ldi	r31, 0x69	; 105
    1070:	ef 2e       	mov	r14, r31
    1072:	f4 e0       	ldi	r31, 0x04	; 4
    1074:	ff 2e       	mov	r15, r31
    1076:	f0 2d       	mov	r31, r0
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	46 e4       	ldi	r20, 0x46	; 70
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	62 e6       	ldi	r22, 0x62	; 98
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	8b e5       	ldi	r24, 0x5B	; 91
    1088:	97 e0       	ldi	r25, 0x07	; 7
    108a:	0e 94 df 07 	call	0xfbe	; 0xfbe <xTaskCreate>
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	81 f4       	brne	.+32     	; 0x10b2 <vTaskStartScheduler+0x4c>
    1092:	f8 94       	cli
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
    109c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <xSchedulerRunning>
    10a6:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <xTickCount+0x1>
    10aa:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <xTickCount>
    10ae:	0e 94 3c 02 	call	0x478	; 0x478 <xPortStartScheduler>
    10b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <vTaskSuspendAll>:
    10be:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <uxSchedulerSuspended>
    10c8:	08 95       	ret

000010ca <xTaskIncrementTick>:
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    10d6:	81 11       	cpse	r24, r1
    10d8:	01 c1       	rjmp	.+514    	; 0x12dc <xTaskIncrementTick+0x212>
    10da:	c0 91 74 04 	lds	r28, 0x0474	; 0x800474 <xTickCount>
    10de:	d0 91 75 04 	lds	r29, 0x0475	; 0x800475 <xTickCount+0x1>
    10e2:	8e 01       	movw	r16, r28
    10e4:	0f 5f       	subi	r16, 0xFF	; 255
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	10 93 75 04 	sts	0x0475, r17	; 0x800475 <xTickCount+0x1>
    10ec:	00 93 74 04 	sts	0x0474, r16	; 0x800474 <xTickCount>
    10f0:	01 15       	cp	r16, r1
    10f2:	11 05       	cpc	r17, r1
    10f4:	b9 f4       	brne	.+46     	; 0x1124 <xTaskIncrementTick+0x5a>
    10f6:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <pxDelayedTaskList>
    10fa:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
    10fe:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <pxOverflowDelayedTaskList>
    1102:	30 91 94 04 	lds	r19, 0x0494	; 0x800494 <pxOverflowDelayedTaskList+0x1>
    1106:	30 93 96 04 	sts	0x0496, r19	; 0x800496 <pxDelayedTaskList+0x1>
    110a:	20 93 95 04 	sts	0x0495, r18	; 0x800495 <pxDelayedTaskList>
    110e:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <pxOverflowDelayedTaskList+0x1>
    1112:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <pxOverflowDelayedTaskList>
    1116:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <xNumOfOverflows>
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <xNumOfOverflows>
    1120:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <prvResetNextTaskUnblockTime>
    1124:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <xNextTaskUnblockTime>
    1128:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <xNextTaskUnblockTime+0x1>
    112c:	08 17       	cp	r16, r24
    112e:	19 07       	cpc	r17, r25
    1130:	20 f4       	brcc	.+8      	; 0x113a <xTaskIncrementTick+0x70>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	b8 c0       	rjmp	.+368    	; 0x12a6 <xTaskIncrementTick+0x1dc>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <xTaskIncrementTick+0x72>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
    1140:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
    1144:	90 81       	ld	r25, Z
    1146:	91 11       	cpse	r25, r1
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <xTaskIncrementTick+0x8e>
    114a:	2f ef       	ldi	r18, 0xFF	; 255
    114c:	3f ef       	ldi	r19, 0xFF	; 255
    114e:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <xNextTaskUnblockTime+0x1>
    1152:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <xNextTaskUnblockTime>
    1156:	a7 c0       	rjmp	.+334    	; 0x12a6 <xTaskIncrementTick+0x1dc>
    1158:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
    115c:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
    1160:	05 80       	ldd	r0, Z+5	; 0x05
    1162:	f6 81       	ldd	r31, Z+6	; 0x06
    1164:	e0 2d       	mov	r30, r0
    1166:	06 80       	ldd	r0, Z+6	; 0x06
    1168:	f7 81       	ldd	r31, Z+7	; 0x07
    116a:	e0 2d       	mov	r30, r0
    116c:	22 81       	ldd	r18, Z+2	; 0x02
    116e:	33 81       	ldd	r19, Z+3	; 0x03
    1170:	02 17       	cp	r16, r18
    1172:	13 07       	cpc	r17, r19
    1174:	28 f4       	brcc	.+10     	; 0x1180 <xTaskIncrementTick+0xb6>
    1176:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <xNextTaskUnblockTime+0x1>
    117a:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <xNextTaskUnblockTime>
    117e:	93 c0       	rjmp	.+294    	; 0x12a6 <xTaskIncrementTick+0x1dc>
    1180:	a2 85       	ldd	r26, Z+10	; 0x0a
    1182:	b3 85       	ldd	r27, Z+11	; 0x0b
    1184:	24 81       	ldd	r18, Z+4	; 0x04
    1186:	35 81       	ldd	r19, Z+5	; 0x05
    1188:	46 81       	ldd	r20, Z+6	; 0x06
    118a:	57 81       	ldd	r21, Z+7	; 0x07
    118c:	e9 01       	movw	r28, r18
    118e:	5d 83       	std	Y+5, r21	; 0x05
    1190:	4c 83       	std	Y+4, r20	; 0x04
    1192:	26 81       	ldd	r18, Z+6	; 0x06
    1194:	37 81       	ldd	r19, Z+7	; 0x07
    1196:	44 81       	ldd	r20, Z+4	; 0x04
    1198:	55 81       	ldd	r21, Z+5	; 0x05
    119a:	e9 01       	movw	r28, r18
    119c:	5b 83       	std	Y+3, r21	; 0x03
    119e:	4a 83       	std	Y+2, r20	; 0x02
    11a0:	11 96       	adiw	r26, 0x01	; 1
    11a2:	2d 91       	ld	r18, X+
    11a4:	3c 91       	ld	r19, X
    11a6:	12 97       	sbiw	r26, 0x02	; 2
    11a8:	af 01       	movw	r20, r30
    11aa:	4e 5f       	subi	r20, 0xFE	; 254
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255
    11ae:	24 17       	cp	r18, r20
    11b0:	35 07       	cpc	r19, r21
    11b2:	31 f4       	brne	.+12     	; 0x11c0 <xTaskIncrementTick+0xf6>
    11b4:	26 81       	ldd	r18, Z+6	; 0x06
    11b6:	37 81       	ldd	r19, Z+7	; 0x07
    11b8:	12 96       	adiw	r26, 0x02	; 2
    11ba:	3c 93       	st	X, r19
    11bc:	2e 93       	st	-X, r18
    11be:	11 97       	sbiw	r26, 0x01	; 1
    11c0:	13 86       	std	Z+11, r1	; 0x0b
    11c2:	12 86       	std	Z+10, r1	; 0x0a
    11c4:	9c 91       	ld	r25, X
    11c6:	91 50       	subi	r25, 0x01	; 1
    11c8:	9c 93       	st	X, r25
    11ca:	a4 89       	ldd	r26, Z+20	; 0x14
    11cc:	b5 89       	ldd	r27, Z+21	; 0x15
    11ce:	10 97       	sbiw	r26, 0x00	; 0
    11d0:	19 f1       	breq	.+70     	; 0x1218 <xTaskIncrementTick+0x14e>
    11d2:	26 85       	ldd	r18, Z+14	; 0x0e
    11d4:	37 85       	ldd	r19, Z+15	; 0x0f
    11d6:	60 89       	ldd	r22, Z+16	; 0x10
    11d8:	71 89       	ldd	r23, Z+17	; 0x11
    11da:	e9 01       	movw	r28, r18
    11dc:	7d 83       	std	Y+5, r23	; 0x05
    11de:	6c 83       	std	Y+4, r22	; 0x04
    11e0:	20 89       	ldd	r18, Z+16	; 0x10
    11e2:	31 89       	ldd	r19, Z+17	; 0x11
    11e4:	66 85       	ldd	r22, Z+14	; 0x0e
    11e6:	77 85       	ldd	r23, Z+15	; 0x0f
    11e8:	e9 01       	movw	r28, r18
    11ea:	7b 83       	std	Y+3, r23	; 0x03
    11ec:	6a 83       	std	Y+2, r22	; 0x02
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	6d 91       	ld	r22, X+
    11f2:	7c 91       	ld	r23, X
    11f4:	12 97       	sbiw	r26, 0x02	; 2
    11f6:	9f 01       	movw	r18, r30
    11f8:	24 5f       	subi	r18, 0xF4	; 244
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	62 17       	cp	r22, r18
    11fe:	73 07       	cpc	r23, r19
    1200:	31 f4       	brne	.+12     	; 0x120e <xTaskIncrementTick+0x144>
    1202:	20 89       	ldd	r18, Z+16	; 0x10
    1204:	31 89       	ldd	r19, Z+17	; 0x11
    1206:	12 96       	adiw	r26, 0x02	; 2
    1208:	3c 93       	st	X, r19
    120a:	2e 93       	st	-X, r18
    120c:	11 97       	sbiw	r26, 0x01	; 1
    120e:	15 8a       	std	Z+21, r1	; 0x15
    1210:	14 8a       	std	Z+20, r1	; 0x14
    1212:	9c 91       	ld	r25, X
    1214:	91 50       	subi	r25, 0x01	; 1
    1216:	9c 93       	st	X, r25
    1218:	26 89       	ldd	r18, Z+22	; 0x16
    121a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    121e:	92 17       	cp	r25, r18
    1220:	10 f4       	brcc	.+4      	; 0x1226 <xTaskIncrementTick+0x15c>
    1222:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <uxTopReadyPriority>
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	d9 01       	movw	r26, r18
    122a:	aa 0f       	add	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	aa 0f       	add	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	aa 0f       	add	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	2a 0f       	add	r18, r26
    1238:	3b 1f       	adc	r19, r27
    123a:	d9 01       	movw	r26, r18
    123c:	a7 55       	subi	r26, 0x57	; 87
    123e:	bb 4f       	sbci	r27, 0xFB	; 251
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	0d 90       	ld	r0, X+
    1244:	bc 91       	ld	r27, X
    1246:	a0 2d       	mov	r26, r0
    1248:	b5 83       	std	Z+5, r27	; 0x05
    124a:	a4 83       	std	Z+4, r26	; 0x04
    124c:	14 96       	adiw	r26, 0x04	; 4
    124e:	2d 91       	ld	r18, X+
    1250:	3c 91       	ld	r19, X
    1252:	15 97       	sbiw	r26, 0x05	; 5
    1254:	37 83       	std	Z+7, r19	; 0x07
    1256:	26 83       	std	Z+6, r18	; 0x06
    1258:	14 96       	adiw	r26, 0x04	; 4
    125a:	2d 91       	ld	r18, X+
    125c:	3c 91       	ld	r19, X
    125e:	15 97       	sbiw	r26, 0x05	; 5
    1260:	e9 01       	movw	r28, r18
    1262:	5b 83       	std	Y+3, r21	; 0x03
    1264:	4a 83       	std	Y+2, r20	; 0x02
    1266:	15 96       	adiw	r26, 0x05	; 5
    1268:	5c 93       	st	X, r21
    126a:	4e 93       	st	-X, r20
    126c:	14 97       	sbiw	r26, 0x04	; 4
    126e:	a6 89       	ldd	r26, Z+22	; 0x16
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	9d 01       	movw	r18, r26
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	a2 0f       	add	r26, r18
    1282:	b3 1f       	adc	r27, r19
    1284:	a7 55       	subi	r26, 0x57	; 87
    1286:	bb 4f       	sbci	r27, 0xFB	; 251
    1288:	b3 87       	std	Z+11, r27	; 0x0b
    128a:	a2 87       	std	Z+10, r26	; 0x0a
    128c:	9c 91       	ld	r25, X
    128e:	9f 5f       	subi	r25, 0xFF	; 255
    1290:	9c 93       	st	X, r25
    1292:	26 89       	ldd	r18, Z+22	; 0x16
    1294:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1298:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    129c:	96 89       	ldd	r25, Z+22	; 0x16
    129e:	29 17       	cp	r18, r25
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <xTaskIncrementTick+0x1da>
    12a2:	49 cf       	rjmp	.-366    	; 0x1136 <xTaskIncrementTick+0x6c>
    12a4:	4b cf       	rjmp	.-362    	; 0x113c <xTaskIncrementTick+0x72>
    12a6:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    12aa:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    12ae:	26 89       	ldd	r18, Z+22	; 0x16
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	f9 01       	movw	r30, r18
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	2e 0f       	add	r18, r30
    12c2:	3f 1f       	adc	r19, r31
    12c4:	f9 01       	movw	r30, r18
    12c6:	e7 55       	subi	r30, 0x57	; 87
    12c8:	fb 4f       	sbci	r31, 0xFB	; 251
    12ca:	90 81       	ld	r25, Z
    12cc:	92 30       	cpi	r25, 0x02	; 2
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <xTaskIncrementTick+0x208>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <xYieldPending>
    12d6:	91 11       	cpse	r25, r1
    12d8:	0c c0       	rjmp	.+24     	; 0x12f2 <xTaskIncrementTick+0x228>
    12da:	0c c0       	rjmp	.+24     	; 0x12f4 <xTaskIncrementTick+0x22a>
    12dc:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <xPendedTicks>
    12e0:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <xPendedTicks+0x1>
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <xPendedTicks+0x1>
    12ea:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <xPendedTicks>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <xTaskIncrementTick+0x22a>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <xTaskResumeAll>:
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	0f 92       	push	r0
    1308:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    130c:	81 50       	subi	r24, 0x01	; 1
    130e:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <uxSchedulerSuspended>
    1312:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1316:	81 11       	cpse	r24, r1
    1318:	bf c0       	rjmp	.+382    	; 0x1498 <xTaskResumeAll+0x19a>
    131a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
    131e:	81 11       	cpse	r24, r1
    1320:	96 c0       	rjmp	.+300    	; 0x144e <xTaskResumeAll+0x150>
    1322:	bd c0       	rjmp	.+378    	; 0x149e <xTaskResumeAll+0x1a0>
    1324:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <xPendingReadyList+0x5>
    1328:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <xPendingReadyList+0x6>
    132c:	06 80       	ldd	r0, Z+6	; 0x06
    132e:	f7 81       	ldd	r31, Z+7	; 0x07
    1330:	e0 2d       	mov	r30, r0
    1332:	a4 89       	ldd	r26, Z+20	; 0x14
    1334:	b5 89       	ldd	r27, Z+21	; 0x15
    1336:	c6 85       	ldd	r28, Z+14	; 0x0e
    1338:	d7 85       	ldd	r29, Z+15	; 0x0f
    133a:	80 89       	ldd	r24, Z+16	; 0x10
    133c:	91 89       	ldd	r25, Z+17	; 0x11
    133e:	9d 83       	std	Y+5, r25	; 0x05
    1340:	8c 83       	std	Y+4, r24	; 0x04
    1342:	c0 89       	ldd	r28, Z+16	; 0x10
    1344:	d1 89       	ldd	r29, Z+17	; 0x11
    1346:	86 85       	ldd	r24, Z+14	; 0x0e
    1348:	97 85       	ldd	r25, Z+15	; 0x0f
    134a:	9b 83       	std	Y+3, r25	; 0x03
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	2d 91       	ld	r18, X+
    1352:	3c 91       	ld	r19, X
    1354:	12 97       	sbiw	r26, 0x02	; 2
    1356:	cf 01       	movw	r24, r30
    1358:	0c 96       	adiw	r24, 0x0c	; 12
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	31 f4       	brne	.+12     	; 0x136c <xTaskResumeAll+0x6e>
    1360:	80 89       	ldd	r24, Z+16	; 0x10
    1362:	91 89       	ldd	r25, Z+17	; 0x11
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	9c 93       	st	X, r25
    1368:	8e 93       	st	-X, r24
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	15 8a       	std	Z+21, r1	; 0x15
    136e:	14 8a       	std	Z+20, r1	; 0x14
    1370:	8c 91       	ld	r24, X
    1372:	81 50       	subi	r24, 0x01	; 1
    1374:	8c 93       	st	X, r24
    1376:	a2 85       	ldd	r26, Z+10	; 0x0a
    1378:	b3 85       	ldd	r27, Z+11	; 0x0b
    137a:	c4 81       	ldd	r28, Z+4	; 0x04
    137c:	d5 81       	ldd	r29, Z+5	; 0x05
    137e:	86 81       	ldd	r24, Z+6	; 0x06
    1380:	97 81       	ldd	r25, Z+7	; 0x07
    1382:	9d 83       	std	Y+5, r25	; 0x05
    1384:	8c 83       	std	Y+4, r24	; 0x04
    1386:	c6 81       	ldd	r28, Z+6	; 0x06
    1388:	d7 81       	ldd	r29, Z+7	; 0x07
    138a:	84 81       	ldd	r24, Z+4	; 0x04
    138c:	95 81       	ldd	r25, Z+5	; 0x05
    138e:	9b 83       	std	Y+3, r25	; 0x03
    1390:	8a 83       	std	Y+2, r24	; 0x02
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	8d 91       	ld	r24, X+
    1396:	9c 91       	ld	r25, X
    1398:	12 97       	sbiw	r26, 0x02	; 2
    139a:	9f 01       	movw	r18, r30
    139c:	2e 5f       	subi	r18, 0xFE	; 254
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	82 17       	cp	r24, r18
    13a2:	93 07       	cpc	r25, r19
    13a4:	31 f4       	brne	.+12     	; 0x13b2 <xTaskResumeAll+0xb4>
    13a6:	86 81       	ldd	r24, Z+6	; 0x06
    13a8:	97 81       	ldd	r25, Z+7	; 0x07
    13aa:	12 96       	adiw	r26, 0x02	; 2
    13ac:	9c 93       	st	X, r25
    13ae:	8e 93       	st	-X, r24
    13b0:	11 97       	sbiw	r26, 0x01	; 1
    13b2:	13 86       	std	Z+11, r1	; 0x0b
    13b4:	12 86       	std	Z+10, r1	; 0x0a
    13b6:	8c 91       	ld	r24, X
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	8c 93       	st	X, r24
    13bc:	86 89       	ldd	r24, Z+22	; 0x16
    13be:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    13c2:	98 17       	cp	r25, r24
    13c4:	10 f4       	brcc	.+4      	; 0x13ca <xTaskResumeAll+0xcc>
    13c6:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	dc 01       	movw	r26, r24
    13ce:	aa 0f       	add	r26, r26
    13d0:	bb 1f       	adc	r27, r27
    13d2:	aa 0f       	add	r26, r26
    13d4:	bb 1f       	adc	r27, r27
    13d6:	aa 0f       	add	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	8a 0f       	add	r24, r26
    13dc:	9b 1f       	adc	r25, r27
    13de:	dc 01       	movw	r26, r24
    13e0:	a7 55       	subi	r26, 0x57	; 87
    13e2:	bb 4f       	sbci	r27, 0xFB	; 251
    13e4:	11 96       	adiw	r26, 0x01	; 1
    13e6:	0d 90       	ld	r0, X+
    13e8:	bc 91       	ld	r27, X
    13ea:	a0 2d       	mov	r26, r0
    13ec:	b5 83       	std	Z+5, r27	; 0x05
    13ee:	a4 83       	std	Z+4, r26	; 0x04
    13f0:	14 96       	adiw	r26, 0x04	; 4
    13f2:	8d 91       	ld	r24, X+
    13f4:	9c 91       	ld	r25, X
    13f6:	15 97       	sbiw	r26, 0x05	; 5
    13f8:	97 83       	std	Z+7, r25	; 0x07
    13fa:	86 83       	std	Z+6, r24	; 0x06
    13fc:	14 96       	adiw	r26, 0x04	; 4
    13fe:	cd 91       	ld	r28, X+
    1400:	dc 91       	ld	r29, X
    1402:	15 97       	sbiw	r26, 0x05	; 5
    1404:	3b 83       	std	Y+3, r19	; 0x03
    1406:	2a 83       	std	Y+2, r18	; 0x02
    1408:	15 96       	adiw	r26, 0x05	; 5
    140a:	3c 93       	st	X, r19
    140c:	2e 93       	st	-X, r18
    140e:	14 97       	sbiw	r26, 0x04	; 4
    1410:	a6 89       	ldd	r26, Z+22	; 0x16
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	cd 01       	movw	r24, r26
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	a8 0f       	add	r26, r24
    1424:	b9 1f       	adc	r27, r25
    1426:	a7 55       	subi	r26, 0x57	; 87
    1428:	bb 4f       	sbci	r27, 0xFB	; 251
    142a:	b3 87       	std	Z+11, r27	; 0x0b
    142c:	a2 87       	std	Z+10, r26	; 0x0a
    142e:	8c 91       	ld	r24, X
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	8c 93       	st	X, r24
    1434:	96 89       	ldd	r25, Z+22	; 0x16
    1436:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    143a:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    143e:	56 96       	adiw	r26, 0x16	; 22
    1440:	8c 91       	ld	r24, X
    1442:	98 17       	cp	r25, r24
    1444:	30 f0       	brcs	.+12     	; 0x1452 <xTaskResumeAll+0x154>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <xTaskResumeAll+0x154>
    144e:	e0 e0       	ldi	r30, 0x00	; 0
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <xPendingReadyList>
    1456:	81 11       	cpse	r24, r1
    1458:	65 cf       	rjmp	.-310    	; 0x1324 <xTaskResumeAll+0x26>
    145a:	ef 2b       	or	r30, r31
    145c:	11 f0       	breq	.+4      	; 0x1462 <xTaskResumeAll+0x164>
    145e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <prvResetNextTaskUnblockTime>
    1462:	c0 91 70 04 	lds	r28, 0x0470	; 0x800470 <xPendedTicks>
    1466:	d0 91 71 04 	lds	r29, 0x0471	; 0x800471 <xPendedTicks+0x1>
    146a:	20 97       	sbiw	r28, 0x00	; 0
    146c:	69 f0       	breq	.+26     	; 0x1488 <xTaskResumeAll+0x18a>
    146e:	0e 94 65 08 	call	0x10ca	; 0x10ca <xTaskIncrementTick>
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <xTaskResumeAll+0x17e>
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    147c:	21 97       	sbiw	r28, 0x01	; 1
    147e:	b9 f7       	brne	.-18     	; 0x146e <xTaskResumeAll+0x170>
    1480:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <xPendedTicks+0x1>
    1484:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <xPendedTicks>
    1488:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <xYieldPending>
    148c:	88 23       	and	r24, r24
    148e:	31 f0       	breq	.+12     	; 0x149c <xTaskResumeAll+0x19e>
    1490:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	03 c0       	rjmp	.+6      	; 0x149e <xTaskResumeAll+0x1a0>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	01 c0       	rjmp	.+2      	; 0x149e <xTaskResumeAll+0x1a0>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <vTaskDelay>:
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	ec 01       	movw	r28, r24
    14ae:	89 2b       	or	r24, r25
    14b0:	49 f0       	breq	.+18     	; 0x14c4 <vTaskDelay+0x1c>
    14b2:	0e 94 5f 08 	call	0x10be	; 0x10be <vTaskSuspendAll>
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 94 5e 07 	call	0xebc	; 0xebc <prvAddCurrentTaskToDelayedList>
    14be:	0e 94 7f 09 	call	0x12fe	; 0x12fe <xTaskResumeAll>
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <vTaskDelay+0x1e>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	81 11       	cpse	r24, r1
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <vTaskDelay+0x26>
    14ca:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <vPortYield>
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <vTaskSwitchContext>:
    14d4:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    14d8:	88 23       	and	r24, r24
    14da:	21 f0       	breq	.+8      	; 0x14e4 <vTaskSwitchContext+0x10>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    14e2:	08 95       	ret
    14e4:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <xYieldPending>
    14e8:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <uxTopReadyPriority>
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <vTaskSwitchContext+0x1c>
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	82 2f       	mov	r24, r18
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	fc 01       	movw	r30, r24
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e8 0f       	add	r30, r24
    1504:	f9 1f       	adc	r31, r25
    1506:	e7 55       	subi	r30, 0x57	; 87
    1508:	fb 4f       	sbci	r31, 0xFB	; 251
    150a:	30 81       	ld	r19, Z
    150c:	33 23       	and	r19, r19
    150e:	79 f3       	breq	.-34     	; 0x14ee <vTaskSwitchContext+0x1a>
    1510:	ac 01       	movw	r20, r24
    1512:	44 0f       	add	r20, r20
    1514:	55 1f       	adc	r21, r21
    1516:	44 0f       	add	r20, r20
    1518:	55 1f       	adc	r21, r21
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	48 0f       	add	r20, r24
    1520:	59 1f       	adc	r21, r25
    1522:	df 01       	movw	r26, r30
    1524:	01 80       	ldd	r0, Z+1	; 0x01
    1526:	f2 81       	ldd	r31, Z+2	; 0x02
    1528:	e0 2d       	mov	r30, r0
    152a:	02 80       	ldd	r0, Z+2	; 0x02
    152c:	f3 81       	ldd	r31, Z+3	; 0x03
    152e:	e0 2d       	mov	r30, r0
    1530:	12 96       	adiw	r26, 0x02	; 2
    1532:	fc 93       	st	X, r31
    1534:	ee 93       	st	-X, r30
    1536:	11 97       	sbiw	r26, 0x01	; 1
    1538:	44 55       	subi	r20, 0x54	; 84
    153a:	5b 4f       	sbci	r21, 0xFB	; 251
    153c:	e4 17       	cp	r30, r20
    153e:	f5 07       	cpc	r31, r21
    1540:	29 f4       	brne	.+10     	; 0x154c <vTaskSwitchContext+0x78>
    1542:	42 81       	ldd	r20, Z+2	; 0x02
    1544:	53 81       	ldd	r21, Z+3	; 0x03
    1546:	fd 01       	movw	r30, r26
    1548:	52 83       	std	Z+2, r21	; 0x02
    154a:	41 83       	std	Z+1, r20	; 0x01
    154c:	fc 01       	movw	r30, r24
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	8e 0f       	add	r24, r30
    155c:	9f 1f       	adc	r25, r31
    155e:	fc 01       	movw	r30, r24
    1560:	e7 55       	subi	r30, 0x57	; 87
    1562:	fb 4f       	sbci	r31, 0xFB	; 251
    1564:	01 80       	ldd	r0, Z+1	; 0x01
    1566:	f2 81       	ldd	r31, Z+2	; 0x02
    1568:	e0 2d       	mov	r30, r0
    156a:	86 81       	ldd	r24, Z+6	; 0x06
    156c:	97 81       	ldd	r25, Z+7	; 0x07
    156e:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <pxCurrentTCB+0x1>
    1572:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <pxCurrentTCB>
    1576:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <uxTopReadyPriority>
    157a:	08 95       	ret

0000157c <vTaskPlaceOnEventList>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	eb 01       	movw	r28, r22
    1582:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1586:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    158a:	64 5f       	subi	r22, 0xF4	; 244
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	0e 94 6f 01 	call	0x2de	; 0x2de <vListInsert>
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	ce 01       	movw	r24, r28
    1596:	0e 94 5e 07 	call	0xebc	; 0xebc <prvAddCurrentTaskToDelayedList>
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <xTaskRemoveFromEventList>:
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	dc 01       	movw	r26, r24
    15a6:	15 96       	adiw	r26, 0x05	; 5
    15a8:	ed 91       	ld	r30, X+
    15aa:	fc 91       	ld	r31, X
    15ac:	16 97       	sbiw	r26, 0x06	; 6
    15ae:	06 80       	ldd	r0, Z+6	; 0x06
    15b0:	f7 81       	ldd	r31, Z+7	; 0x07
    15b2:	e0 2d       	mov	r30, r0
    15b4:	a4 89       	ldd	r26, Z+20	; 0x14
    15b6:	b5 89       	ldd	r27, Z+21	; 0x15
    15b8:	c6 85       	ldd	r28, Z+14	; 0x0e
    15ba:	d7 85       	ldd	r29, Z+15	; 0x0f
    15bc:	80 89       	ldd	r24, Z+16	; 0x10
    15be:	91 89       	ldd	r25, Z+17	; 0x11
    15c0:	9d 83       	std	Y+5, r25	; 0x05
    15c2:	8c 83       	std	Y+4, r24	; 0x04
    15c4:	c0 89       	ldd	r28, Z+16	; 0x10
    15c6:	d1 89       	ldd	r29, Z+17	; 0x11
    15c8:	86 85       	ldd	r24, Z+14	; 0x0e
    15ca:	97 85       	ldd	r25, Z+15	; 0x0f
    15cc:	9b 83       	std	Y+3, r25	; 0x03
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	8d 91       	ld	r24, X+
    15d4:	9c 91       	ld	r25, X
    15d6:	12 97       	sbiw	r26, 0x02	; 2
    15d8:	9f 01       	movw	r18, r30
    15da:	24 5f       	subi	r18, 0xF4	; 244
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	82 17       	cp	r24, r18
    15e0:	93 07       	cpc	r25, r19
    15e2:	31 f4       	brne	.+12     	; 0x15f0 <xTaskRemoveFromEventList+0x50>
    15e4:	80 89       	ldd	r24, Z+16	; 0x10
    15e6:	91 89       	ldd	r25, Z+17	; 0x11
    15e8:	12 96       	adiw	r26, 0x02	; 2
    15ea:	9c 93       	st	X, r25
    15ec:	8e 93       	st	-X, r24
    15ee:	11 97       	sbiw	r26, 0x01	; 1
    15f0:	15 8a       	std	Z+21, r1	; 0x15
    15f2:	14 8a       	std	Z+20, r1	; 0x14
    15f4:	8c 91       	ld	r24, X
    15f6:	81 50       	subi	r24, 0x01	; 1
    15f8:	8c 93       	st	X, r24
    15fa:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    15fe:	81 11       	cpse	r24, r1
    1600:	60 c0       	rjmp	.+192    	; 0x16c2 <xTaskRemoveFromEventList+0x122>
    1602:	a2 85       	ldd	r26, Z+10	; 0x0a
    1604:	b3 85       	ldd	r27, Z+11	; 0x0b
    1606:	c4 81       	ldd	r28, Z+4	; 0x04
    1608:	d5 81       	ldd	r29, Z+5	; 0x05
    160a:	86 81       	ldd	r24, Z+6	; 0x06
    160c:	97 81       	ldd	r25, Z+7	; 0x07
    160e:	9d 83       	std	Y+5, r25	; 0x05
    1610:	8c 83       	std	Y+4, r24	; 0x04
    1612:	c6 81       	ldd	r28, Z+6	; 0x06
    1614:	d7 81       	ldd	r29, Z+7	; 0x07
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	95 81       	ldd	r25, Z+5	; 0x05
    161a:	9b 83       	std	Y+3, r25	; 0x03
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	8d 91       	ld	r24, X+
    1622:	9c 91       	ld	r25, X
    1624:	12 97       	sbiw	r26, 0x02	; 2
    1626:	9f 01       	movw	r18, r30
    1628:	2e 5f       	subi	r18, 0xFE	; 254
    162a:	3f 4f       	sbci	r19, 0xFF	; 255
    162c:	82 17       	cp	r24, r18
    162e:	93 07       	cpc	r25, r19
    1630:	31 f4       	brne	.+12     	; 0x163e <xTaskRemoveFromEventList+0x9e>
    1632:	86 81       	ldd	r24, Z+6	; 0x06
    1634:	97 81       	ldd	r25, Z+7	; 0x07
    1636:	12 96       	adiw	r26, 0x02	; 2
    1638:	9c 93       	st	X, r25
    163a:	8e 93       	st	-X, r24
    163c:	11 97       	sbiw	r26, 0x01	; 1
    163e:	13 86       	std	Z+11, r1	; 0x0b
    1640:	12 86       	std	Z+10, r1	; 0x0a
    1642:	8c 91       	ld	r24, X
    1644:	81 50       	subi	r24, 0x01	; 1
    1646:	8c 93       	st	X, r24
    1648:	86 89       	ldd	r24, Z+22	; 0x16
    164a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    164e:	98 17       	cp	r25, r24
    1650:	10 f4       	brcc	.+4      	; 0x1656 <xTaskRemoveFromEventList+0xb6>
    1652:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	dc 01       	movw	r26, r24
    165a:	aa 0f       	add	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	aa 0f       	add	r26, r26
    1660:	bb 1f       	adc	r27, r27
    1662:	aa 0f       	add	r26, r26
    1664:	bb 1f       	adc	r27, r27
    1666:	8a 0f       	add	r24, r26
    1668:	9b 1f       	adc	r25, r27
    166a:	dc 01       	movw	r26, r24
    166c:	a7 55       	subi	r26, 0x57	; 87
    166e:	bb 4f       	sbci	r27, 0xFB	; 251
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	0d 90       	ld	r0, X+
    1674:	bc 91       	ld	r27, X
    1676:	a0 2d       	mov	r26, r0
    1678:	b5 83       	std	Z+5, r27	; 0x05
    167a:	a4 83       	std	Z+4, r26	; 0x04
    167c:	14 96       	adiw	r26, 0x04	; 4
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	15 97       	sbiw	r26, 0x05	; 5
    1684:	97 83       	std	Z+7, r25	; 0x07
    1686:	86 83       	std	Z+6, r24	; 0x06
    1688:	14 96       	adiw	r26, 0x04	; 4
    168a:	cd 91       	ld	r28, X+
    168c:	dc 91       	ld	r29, X
    168e:	15 97       	sbiw	r26, 0x05	; 5
    1690:	3b 83       	std	Y+3, r19	; 0x03
    1692:	2a 83       	std	Y+2, r18	; 0x02
    1694:	15 96       	adiw	r26, 0x05	; 5
    1696:	3c 93       	st	X, r19
    1698:	2e 93       	st	-X, r18
    169a:	14 97       	sbiw	r26, 0x04	; 4
    169c:	a6 89       	ldd	r26, Z+22	; 0x16
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	cd 01       	movw	r24, r26
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	a8 0f       	add	r26, r24
    16b0:	b9 1f       	adc	r27, r25
    16b2:	a7 55       	subi	r26, 0x57	; 87
    16b4:	bb 4f       	sbci	r27, 0xFB	; 251
    16b6:	b3 87       	std	Z+11, r27	; 0x0b
    16b8:	a2 87       	std	Z+10, r26	; 0x0a
    16ba:	8c 91       	ld	r24, X
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	8c 93       	st	X, r24
    16c0:	1c c0       	rjmp	.+56     	; 0x16fa <xTaskRemoveFromEventList+0x15a>
    16c2:	4a e8       	ldi	r20, 0x8A	; 138
    16c4:	54 e0       	ldi	r21, 0x04	; 4
    16c6:	da 01       	movw	r26, r20
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	cd 91       	ld	r28, X+
    16cc:	dc 91       	ld	r29, X
    16ce:	12 97       	sbiw	r26, 0x02	; 2
    16d0:	d7 87       	std	Z+15, r29	; 0x0f
    16d2:	c6 87       	std	Z+14, r28	; 0x0e
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	91 8b       	std	Z+17, r25	; 0x11
    16da:	80 8b       	std	Z+16, r24	; 0x10
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	dc 01       	movw	r26, r24
    16e2:	13 96       	adiw	r26, 0x03	; 3
    16e4:	3c 93       	st	X, r19
    16e6:	2e 93       	st	-X, r18
    16e8:	12 97       	sbiw	r26, 0x02	; 2
    16ea:	3d 83       	std	Y+5, r19	; 0x05
    16ec:	2c 83       	std	Y+4, r18	; 0x04
    16ee:	55 8b       	std	Z+21, r21	; 0x15
    16f0:	44 8b       	std	Z+20, r20	; 0x14
    16f2:	da 01       	movw	r26, r20
    16f4:	8c 91       	ld	r24, X
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	8c 93       	st	X, r24
    16fa:	96 89       	ldd	r25, Z+22	; 0x16
    16fc:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1700:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1704:	86 89       	ldd	r24, Z+22	; 0x16
    1706:	89 17       	cp	r24, r25
    1708:	20 f4       	brcc	.+8      	; 0x1712 <xTaskRemoveFromEventList+0x172>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <xTaskRemoveFromEventList+0x174>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <vTaskInternalSetTimeOutState>:
    171a:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <xNumOfOverflows>
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
    1722:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <xTickCount>
    1726:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <xTickCount+0x1>
    172a:	32 83       	std	Z+2, r19	; 0x02
    172c:	21 83       	std	Z+1, r18	; 0x01
    172e:	08 95       	ret

00001730 <xTaskCheckForTimeOut>:
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <xTickCount>
    1740:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <xTickCount+0x1>
    1744:	dc 01       	movw	r26, r24
    1746:	11 96       	adiw	r26, 0x01	; 1
    1748:	4d 91       	ld	r20, X+
    174a:	5c 91       	ld	r21, X
    174c:	12 97       	sbiw	r26, 0x02	; 2
    174e:	df 01       	movw	r26, r30
    1750:	a4 1b       	sub	r26, r20
    1752:	b5 0b       	sbc	r27, r21
    1754:	eb 01       	movw	r28, r22
    1756:	28 81       	ld	r18, Y
    1758:	39 81       	ldd	r19, Y+1	; 0x01
    175a:	2f 3f       	cpi	r18, 0xFF	; 255
    175c:	df ef       	ldi	r29, 0xFF	; 255
    175e:	3d 07       	cpc	r19, r29
    1760:	f9 f0       	breq	.+62     	; 0x17a0 <xTaskCheckForTimeOut+0x70>
    1762:	ec 01       	movw	r28, r24
    1764:	18 81       	ld	r17, Y
    1766:	c0 91 6e 04 	lds	r28, 0x046E	; 0x80046e <xNumOfOverflows>
    176a:	1c 17       	cp	r17, r28
    176c:	41 f0       	breq	.+16     	; 0x177e <xTaskCheckForTimeOut+0x4e>
    176e:	e4 17       	cp	r30, r20
    1770:	f5 07       	cpc	r31, r21
    1772:	28 f0       	brcs	.+10     	; 0x177e <xTaskCheckForTimeOut+0x4e>
    1774:	fb 01       	movw	r30, r22
    1776:	11 82       	std	Z+1, r1	; 0x01
    1778:	10 82       	st	Z, r1
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	12 c0       	rjmp	.+36     	; 0x17a2 <xTaskCheckForTimeOut+0x72>
    177e:	a2 17       	cp	r26, r18
    1780:	b3 07       	cpc	r27, r19
    1782:	48 f4       	brcc	.+18     	; 0x1796 <xTaskCheckForTimeOut+0x66>
    1784:	fb 01       	movw	r30, r22
    1786:	2a 1b       	sub	r18, r26
    1788:	3b 0b       	sbc	r19, r27
    178a:	31 83       	std	Z+1, r19	; 0x01
    178c:	20 83       	st	Z, r18
    178e:	0e 94 8d 0b 	call	0x171a	; 0x171a <vTaskInternalSetTimeOutState>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <xTaskCheckForTimeOut+0x72>
    1796:	db 01       	movw	r26, r22
    1798:	1d 92       	st	X+, r1
    179a:	1c 92       	st	X, r1
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <xTaskCheckForTimeOut+0x72>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	08 95       	ret

000017ae <vTaskMissedYield>:
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    17b4:	08 95       	ret

000017b6 <xTaskPriorityInherit>:
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	fc 01       	movw	r30, r24
    17c0:	89 2b       	or	r24, r25
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <xTaskPriorityInherit+0x10>
    17c4:	84 c0       	rjmp	.+264    	; 0x18ce <xTaskPriorityInherit+0x118>
    17c6:	26 89       	ldd	r18, Z+22	; 0x16
    17c8:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    17cc:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    17d0:	56 96       	adiw	r26, 0x16	; 22
    17d2:	8c 91       	ld	r24, X
    17d4:	28 17       	cp	r18, r24
    17d6:	08 f0       	brcs	.+2      	; 0x17da <xTaskPriorityInherit+0x24>
    17d8:	70 c0       	rjmp	.+224    	; 0x18ba <xTaskPriorityInherit+0x104>
    17da:	84 85       	ldd	r24, Z+12	; 0x0c
    17dc:	95 85       	ldd	r25, Z+13	; 0x0d
    17de:	99 23       	and	r25, r25
    17e0:	64 f0       	brlt	.+24     	; 0x17fa <xTaskPriorityInherit+0x44>
    17e2:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    17e6:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    17ea:	56 96       	adiw	r26, 0x16	; 22
    17ec:	3c 91       	ld	r19, X
    17ee:	84 e0       	ldi	r24, 0x04	; 4
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	83 1b       	sub	r24, r19
    17f4:	91 09       	sbc	r25, r1
    17f6:	95 87       	std	Z+13, r25	; 0x0d
    17f8:	84 87       	std	Z+12, r24	; 0x0c
    17fa:	82 85       	ldd	r24, Z+10	; 0x0a
    17fc:	93 85       	ldd	r25, Z+11	; 0x0b
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	44 0f       	add	r20, r20
    1804:	55 1f       	adc	r21, r21
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	44 0f       	add	r20, r20
    180c:	55 1f       	adc	r21, r21
    180e:	24 0f       	add	r18, r20
    1810:	35 1f       	adc	r19, r21
    1812:	27 55       	subi	r18, 0x57	; 87
    1814:	3b 4f       	sbci	r19, 0xFB	; 251
    1816:	82 17       	cp	r24, r18
    1818:	93 07       	cpc	r25, r19
    181a:	09 f0       	breq	.+2      	; 0x181e <xTaskPriorityInherit+0x68>
    181c:	45 c0       	rjmp	.+138    	; 0x18a8 <xTaskPriorityInherit+0xf2>
    181e:	ef 01       	movw	r28, r30
    1820:	8f 01       	movw	r16, r30
    1822:	0e 5f       	subi	r16, 0xFE	; 254
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	c8 01       	movw	r24, r16
    1828:	0e 94 a0 01 	call	0x340	; 0x340 <uxListRemove>
    182c:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1830:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1834:	86 89       	ldd	r24, Z+22	; 0x16
    1836:	8e 8b       	std	Y+22, r24	; 0x16
    1838:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    183c:	98 17       	cp	r25, r24
    183e:	10 f4       	brcc	.+4      	; 0x1844 <xTaskPriorityInherit+0x8e>
    1840:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	8e 0f       	add	r24, r30
    1856:	9f 1f       	adc	r25, r31
    1858:	fc 01       	movw	r30, r24
    185a:	e7 55       	subi	r30, 0x57	; 87
    185c:	fb 4f       	sbci	r31, 0xFB	; 251
    185e:	01 80       	ldd	r0, Z+1	; 0x01
    1860:	f2 81       	ldd	r31, Z+2	; 0x02
    1862:	e0 2d       	mov	r30, r0
    1864:	fd 83       	std	Y+5, r31	; 0x05
    1866:	ec 83       	std	Y+4, r30	; 0x04
    1868:	84 81       	ldd	r24, Z+4	; 0x04
    186a:	95 81       	ldd	r25, Z+5	; 0x05
    186c:	9f 83       	std	Y+7, r25	; 0x07
    186e:	8e 83       	std	Y+6, r24	; 0x06
    1870:	a4 81       	ldd	r26, Z+4	; 0x04
    1872:	b5 81       	ldd	r27, Z+5	; 0x05
    1874:	13 96       	adiw	r26, 0x03	; 3
    1876:	1c 93       	st	X, r17
    1878:	0e 93       	st	-X, r16
    187a:	12 97       	sbiw	r26, 0x02	; 2
    187c:	15 83       	std	Z+5, r17	; 0x05
    187e:	04 83       	std	Z+4, r16	; 0x04
    1880:	8e 89       	ldd	r24, Y+22	; 0x16
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	ee 0f       	add	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	e8 0f       	add	r30, r24
    1894:	f9 1f       	adc	r31, r25
    1896:	e7 55       	subi	r30, 0x57	; 87
    1898:	fb 4f       	sbci	r31, 0xFB	; 251
    189a:	fb 87       	std	Y+11, r31	; 0x0b
    189c:	ea 87       	std	Y+10, r30	; 0x0a
    189e:	80 81       	ld	r24, Z
    18a0:	8f 5f       	subi	r24, 0xFF	; 255
    18a2:	80 83       	st	Z, r24
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	16 c0       	rjmp	.+44     	; 0x18d4 <xTaskPriorityInherit+0x11e>
    18a8:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18ac:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    18b0:	56 96       	adiw	r26, 0x16	; 22
    18b2:	8c 91       	ld	r24, X
    18b4:	86 8b       	std	Z+22, r24	; 0x16
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <xTaskPriorityInherit+0x11e>
    18ba:	91 a1       	ldd	r25, Z+33	; 0x21
    18bc:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18c0:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    18c4:	86 89       	ldd	r24, Z+22	; 0x16
    18c6:	98 17       	cp	r25, r24
    18c8:	20 f0       	brcs	.+8      	; 0x18d2 <xTaskPriorityInherit+0x11c>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <xTaskPriorityInherit+0x11e>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <xTaskPriorityInherit+0x11e>
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <xTaskPriorityDisinherit>:
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	fc 01       	movw	r30, r24
    18e8:	89 2b       	or	r24, r25
    18ea:	09 f4       	brne	.+2      	; 0x18ee <xTaskPriorityDisinherit+0x10>
    18ec:	51 c0       	rjmp	.+162    	; 0x1990 <xTaskPriorityDisinherit+0xb2>
    18ee:	82 a1       	ldd	r24, Z+34	; 0x22
    18f0:	81 50       	subi	r24, 0x01	; 1
    18f2:	82 a3       	std	Z+34, r24	; 0x22
    18f4:	26 89       	ldd	r18, Z+22	; 0x16
    18f6:	91 a1       	ldd	r25, Z+33	; 0x21
    18f8:	29 17       	cp	r18, r25
    18fa:	09 f4       	brne	.+2      	; 0x18fe <xTaskPriorityDisinherit+0x20>
    18fc:	4b c0       	rjmp	.+150    	; 0x1994 <xTaskPriorityDisinherit+0xb6>
    18fe:	81 11       	cpse	r24, r1
    1900:	4b c0       	rjmp	.+150    	; 0x1998 <xTaskPriorityDisinherit+0xba>
    1902:	ef 01       	movw	r28, r30
    1904:	8f 01       	movw	r16, r30
    1906:	0e 5f       	subi	r16, 0xFE	; 254
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	c8 01       	movw	r24, r16
    190c:	0e 94 a0 01 	call	0x340	; 0x340 <uxListRemove>
    1910:	89 a1       	ldd	r24, Y+33	; 0x21
    1912:	8e 8b       	std	Y+22, r24	; 0x16
    1914:	24 e0       	ldi	r18, 0x04	; 4
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	28 1b       	sub	r18, r24
    191a:	31 09       	sbc	r19, r1
    191c:	3d 87       	std	Y+13, r19	; 0x0d
    191e:	2c 87       	std	Y+12, r18	; 0x0c
    1920:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1924:	98 17       	cp	r25, r24
    1926:	10 f4       	brcc	.+4      	; 0x192c <xTaskPriorityDisinherit+0x4e>
    1928:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	fc 01       	movw	r30, r24
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	8e 0f       	add	r24, r30
    193e:	9f 1f       	adc	r25, r31
    1940:	fc 01       	movw	r30, r24
    1942:	e7 55       	subi	r30, 0x57	; 87
    1944:	fb 4f       	sbci	r31, 0xFB	; 251
    1946:	01 80       	ldd	r0, Z+1	; 0x01
    1948:	f2 81       	ldd	r31, Z+2	; 0x02
    194a:	e0 2d       	mov	r30, r0
    194c:	fd 83       	std	Y+5, r31	; 0x05
    194e:	ec 83       	std	Y+4, r30	; 0x04
    1950:	84 81       	ldd	r24, Z+4	; 0x04
    1952:	95 81       	ldd	r25, Z+5	; 0x05
    1954:	9f 83       	std	Y+7, r25	; 0x07
    1956:	8e 83       	std	Y+6, r24	; 0x06
    1958:	a4 81       	ldd	r26, Z+4	; 0x04
    195a:	b5 81       	ldd	r27, Z+5	; 0x05
    195c:	13 96       	adiw	r26, 0x03	; 3
    195e:	1c 93       	st	X, r17
    1960:	0e 93       	st	-X, r16
    1962:	12 97       	sbiw	r26, 0x02	; 2
    1964:	15 83       	std	Z+5, r17	; 0x05
    1966:	04 83       	std	Z+4, r16	; 0x04
    1968:	ee 89       	ldd	r30, Y+22	; 0x16
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	cf 01       	movw	r24, r30
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	e8 0f       	add	r30, r24
    197c:	f9 1f       	adc	r31, r25
    197e:	e7 55       	subi	r30, 0x57	; 87
    1980:	fb 4f       	sbci	r31, 0xFB	; 251
    1982:	fb 87       	std	Y+11, r31	; 0x0b
    1984:	ea 87       	std	Y+10, r30	; 0x0a
    1986:	80 81       	ld	r24, Z
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 83       	st	Z, r24
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	05 c0       	rjmp	.+10     	; 0x199a <xTaskPriorityDisinherit+0xbc>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	03 c0       	rjmp	.+6      	; 0x199a <xTaskPriorityDisinherit+0xbc>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	01 c0       	rjmp	.+2      	; 0x199a <xTaskPriorityDisinherit+0xbc>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <vTaskPriorityDisinheritAfterTimeout>:
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	fc 01       	movw	r30, r24
    19ae:	89 2b       	or	r24, r25
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    19b2:	66 c0       	rjmp	.+204    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19b4:	91 a1       	ldd	r25, Z+33	; 0x21
    19b6:	96 17       	cp	r25, r22
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <vTaskPriorityDisinheritAfterTimeout+0x18>
    19ba:	96 2f       	mov	r25, r22
    19bc:	86 89       	ldd	r24, Z+22	; 0x16
    19be:	98 17       	cp	r25, r24
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <vTaskPriorityDisinheritAfterTimeout+0x20>
    19c2:	5e c0       	rjmp	.+188    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19c4:	22 a1       	ldd	r18, Z+34	; 0x22
    19c6:	21 30       	cpi	r18, 0x01	; 1
    19c8:	09 f0       	breq	.+2      	; 0x19cc <vTaskPriorityDisinheritAfterTimeout+0x28>
    19ca:	5a c0       	rjmp	.+180    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19cc:	96 8b       	std	Z+22, r25	; 0x16
    19ce:	24 85       	ldd	r18, Z+12	; 0x0c
    19d0:	35 85       	ldd	r19, Z+13	; 0x0d
    19d2:	33 23       	and	r19, r19
    19d4:	34 f0       	brlt	.+12     	; 0x19e2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    19d6:	24 e0       	ldi	r18, 0x04	; 4
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	29 1b       	sub	r18, r25
    19dc:	31 09       	sbc	r19, r1
    19de:	35 87       	std	Z+13, r19	; 0x0d
    19e0:	24 87       	std	Z+12, r18	; 0x0c
    19e2:	22 85       	ldd	r18, Z+10	; 0x0a
    19e4:	33 85       	ldd	r19, Z+11	; 0x0b
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	ac 01       	movw	r20, r24
    19ea:	44 0f       	add	r20, r20
    19ec:	55 1f       	adc	r21, r21
    19ee:	44 0f       	add	r20, r20
    19f0:	55 1f       	adc	r21, r21
    19f2:	44 0f       	add	r20, r20
    19f4:	55 1f       	adc	r21, r21
    19f6:	84 0f       	add	r24, r20
    19f8:	95 1f       	adc	r25, r21
    19fa:	87 55       	subi	r24, 0x57	; 87
    19fc:	9b 4f       	sbci	r25, 0xFB	; 251
    19fe:	28 17       	cp	r18, r24
    1a00:	39 07       	cpc	r19, r25
    1a02:	f1 f5       	brne	.+124    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1a04:	ef 01       	movw	r28, r30
    1a06:	8f 01       	movw	r16, r30
    1a08:	0e 5f       	subi	r16, 0xFE	; 254
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	0e 94 a0 01 	call	0x340	; 0x340 <uxListRemove>
    1a12:	8e 89       	ldd	r24, Y+22	; 0x16
    1a14:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1a18:	98 17       	cp	r25, r24
    1a1a:	10 f4       	brcc	.+4      	; 0x1a20 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1a1c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	fc 01       	movw	r30, r24
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	ee 0f       	add	r30, r30
    1a2e:	ff 1f       	adc	r31, r31
    1a30:	8e 0f       	add	r24, r30
    1a32:	9f 1f       	adc	r25, r31
    1a34:	fc 01       	movw	r30, r24
    1a36:	e7 55       	subi	r30, 0x57	; 87
    1a38:	fb 4f       	sbci	r31, 0xFB	; 251
    1a3a:	01 80       	ldd	r0, Z+1	; 0x01
    1a3c:	f2 81       	ldd	r31, Z+2	; 0x02
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	fd 83       	std	Y+5, r31	; 0x05
    1a42:	ec 83       	std	Y+4, r30	; 0x04
    1a44:	84 81       	ldd	r24, Z+4	; 0x04
    1a46:	95 81       	ldd	r25, Z+5	; 0x05
    1a48:	9f 83       	std	Y+7, r25	; 0x07
    1a4a:	8e 83       	std	Y+6, r24	; 0x06
    1a4c:	a4 81       	ldd	r26, Z+4	; 0x04
    1a4e:	b5 81       	ldd	r27, Z+5	; 0x05
    1a50:	13 96       	adiw	r26, 0x03	; 3
    1a52:	1c 93       	st	X, r17
    1a54:	0e 93       	st	-X, r16
    1a56:	12 97       	sbiw	r26, 0x02	; 2
    1a58:	15 83       	std	Z+5, r17	; 0x05
    1a5a:	04 83       	std	Z+4, r16	; 0x04
    1a5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	ee 0f       	add	r30, r30
    1a6c:	ff 1f       	adc	r31, r31
    1a6e:	e8 0f       	add	r30, r24
    1a70:	f9 1f       	adc	r31, r25
    1a72:	e7 55       	subi	r30, 0x57	; 87
    1a74:	fb 4f       	sbci	r31, 0xFB	; 251
    1a76:	fb 87       	std	Y+11, r31	; 0x0b
    1a78:	ea 87       	std	Y+10, r30	; 0x0a
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 5f       	subi	r24, 0xFF	; 255
    1a7e:	80 83       	st	Z, r24
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1a8a:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1a8e:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1a92:	89 2b       	or	r24, r25
    1a94:	39 f0       	breq	.+14     	; 0x1aa4 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1a96:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1a9a:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1a9e:	82 a1       	ldd	r24, Z+34	; 0x22
    1aa0:	8f 5f       	subi	r24, 0xFF	; 255
    1aa2:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1aa4:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1aa8:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    }
    1aac:	08 95       	ret

00001aae <COUNTER_States>:
}


void COUNTER_States(void* pvParameters)
{
	vTaskDelay(1000);
    1aae:	88 ee       	ldi	r24, 0xE8	; 232
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
	if( xSemaphore_Seconds != NULL )
    1ab6:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1aba:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	99 f1       	breq	.+102    	; 0x1b28 <COUNTER_States+0x7a>
	{
		if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 30 ) == pdTRUE )
    1ac2:	6e e1       	ldi	r22, 0x1E	; 30
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	0e 94 27 05 	call	0xa4e	; 0xa4e <xQueueSemaphoreTake>
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	69 f5       	brne	.+90     	; 0x1b28 <COUNTER_States+0x7a>
		{
          if(Total_sec_counter == 0)
    1ace:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <COUNTER_States+0x2e>
           {
        	   seconds=90; //RED STATE
    1ad6:	9a e5       	ldi	r25, 0x5A	; 90
    1ad8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <seconds>
           }
          if(Total_sec_counter == 91)
    1adc:	8b 35       	cpi	r24, 0x5B	; 91
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <COUNTER_States+0x38>
		  {
		     seconds=60; //GREEN STATE
    1ae0:	9c e3       	ldi	r25, 0x3C	; 60
    1ae2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <seconds>
		  }
          if(Total_sec_counter == 152)
    1ae6:	88 39       	cpi	r24, 0x98	; 152
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <COUNTER_States+0x42>
		  {
		   seconds=10; //Yellow STATE
    1aea:	9a e0       	ldi	r25, 0x0A	; 10
    1aec:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <seconds>
		  }
          if(Total_sec_counter == 163)
    1af0:	83 3a       	cpi	r24, 0xA3	; 163
    1af2:	29 f4       	brne	.+10     	; 0x1afe <COUNTER_States+0x50>
		  {
		   seconds=90; //RED STATE---re enter
    1af4:	8a e5       	ldi	r24, 0x5A	; 90
    1af6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <seconds>
		   Total_sec_counter = 0;
    1afa:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <Total_sec_counter>
		  }
          seconds--;
    1afe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
    1b02:	81 50       	subi	r24, 0x01	; 1
    1b04:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <seconds>
          Total_sec_counter++;
    1b08:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <Total_sec_counter>
		  xSemaphoreGive(xSemaphore_Seconds);
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1b20:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1b24:	0e 94 95 04 	call	0x92a	; 0x92a <xQueueGenericSend>
    1b28:	08 95       	ret

00001b2a <main>:
u8 Total_sec_counter = 0;

SemaphoreHandle_t xSemaphore_Seconds = NULL;
int main()
{
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, 0xff);//Red
    1b2a:	4f ef       	ldi	r20, 0xFF	; 255
    1b2c:	67 e0       	ldi	r22, 0x07	; 7
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN4, 0xff); //yellow
    1b34:	4f ef       	ldi	r20, 0xFF	; 255
    1b36:	64 e0       	ldi	r22, 0x04	; 4
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN5, 0xff);//green
    1b3e:	4f ef       	ldi	r20, 0xFF	; 255
    1b40:	65 e0       	ldi	r22, 0x05	; 5
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
	
	SevenSegmentCommonAnode_INIT();
    1b48:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <SevenSegmentCommonAnode_INIT>
	vSemaphoreCreateBinary(xSemaphore_Seconds);
    1b4c:	43 e0       	ldi	r20, 0x03	; 3
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 54 04 	call	0x8a8	; 0x8a8 <xQueueGenericCreate>
    1b56:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1b5a:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <xSemaphore_Seconds>
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	39 f0       	breq	.+14     	; 0x1b70 <main+0x46>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	0e 94 95 04 	call	0x92a	; 0x92a <xQueueGenericSend>
	
	xTaskCreate(COUNTER_States,(const char*)"COUNT",100,NULL,TASK1_PRIORITY,&xTask1_H);
    1b70:	0f 2e       	mov	r0, r31
    1b72:	f8 ed       	ldi	r31, 0xD8	; 216
    1b74:	ef 2e       	mov	r14, r31
    1b76:	f4 e0       	ldi	r31, 0x04	; 4
    1b78:	ff 2e       	mov	r15, r31
    1b7a:	f0 2d       	mov	r31, r0
    1b7c:	01 e0       	ldi	r16, 0x01	; 1
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	44 e6       	ldi	r20, 0x64	; 100
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	67 e6       	ldi	r22, 0x67	; 103
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	87 e5       	ldi	r24, 0x57	; 87
    1b8c:	9d e0       	ldi	r25, 0x0D	; 13
    1b8e:	0e 94 df 07 	call	0xfbe	; 0xfbe <xTaskCreate>
	xTaskCreate(RED_LIGHT,(const char*)"RED",80,NULL,TASK2_PRIORITY,&xTask2_H);
    1b92:	0f 2e       	mov	r0, r31
    1b94:	f6 ed       	ldi	r31, 0xD6	; 214
    1b96:	ef 2e       	mov	r14, r31
    1b98:	f4 e0       	ldi	r31, 0x04	; 4
    1b9a:	ff 2e       	mov	r15, r31
    1b9c:	f0 2d       	mov	r31, r0
    1b9e:	02 e0       	ldi	r16, 0x02	; 2
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e5       	ldi	r20, 0x50	; 80
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	6d e6       	ldi	r22, 0x6D	; 109
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	88 e2       	ldi	r24, 0x28	; 40
    1bae:	9e e0       	ldi	r25, 0x0E	; 14
    1bb0:	0e 94 df 07 	call	0xfbe	; 0xfbe <xTaskCreate>
	xTaskCreate(YELLOW_LIGHT,(const char*)"YELLO",80,NULL,TASK3_PRIORITY,&xTask3_H);
    1bb4:	0f 2e       	mov	r0, r31
    1bb6:	f4 ed       	ldi	r31, 0xD4	; 212
    1bb8:	ef 2e       	mov	r14, r31
    1bba:	f4 e0       	ldi	r31, 0x04	; 4
    1bbc:	ff 2e       	mov	r15, r31
    1bbe:	f0 2d       	mov	r31, r0
    1bc0:	03 e0       	ldi	r16, 0x03	; 3
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e5       	ldi	r20, 0x50	; 80
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	61 e7       	ldi	r22, 0x71	; 113
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	8e e5       	ldi	r24, 0x5E	; 94
    1bd0:	9e e0       	ldi	r25, 0x0E	; 14
    1bd2:	0e 94 df 07 	call	0xfbe	; 0xfbe <xTaskCreate>
	xTaskCreate(GREEN_LIGHT,(const char*)"GREEN",80,NULL,TASK3_PRIORITY,&xTask4_H);
    1bd6:	0f 2e       	mov	r0, r31
    1bd8:	f2 ed       	ldi	r31, 0xD2	; 210
    1bda:	ef 2e       	mov	r14, r31
    1bdc:	f4 e0       	ldi	r31, 0x04	; 4
    1bde:	ff 2e       	mov	r15, r31
    1be0:	f0 2d       	mov	r31, r0
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e5       	ldi	r20, 0x50	; 80
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	67 e7       	ldi	r22, 0x77	; 119
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	85 e9       	ldi	r24, 0x95	; 149
    1bf0:	9e e0       	ldi	r25, 0x0E	; 14
    1bf2:	0e 94 df 07 	call	0xfbe	; 0xfbe <xTaskCreate>

	 vTaskStartScheduler();
    1bf6:	0e 94 33 08 	call	0x1066	; 0x1066 <vTaskStartScheduler>
    1bfa:	ff cf       	rjmp	.-2      	; 0x1bfa <main+0xd0>

00001bfc <SS_DISP>:

	}
}

void SS_DISP(u8 seconds)
{
    1bfc:	cf 93       	push	r28
	 if(seconds>9)
    1bfe:	8a 30       	cpi	r24, 0x0A	; 10
    1c00:	f0 f0       	brcs	.+60     	; 0x1c3e <SS_DISP+0x42>
	 {
		 SevenSegmentCommonAnode((u8)(seconds-((seconds/10)*10)),1); //units
    1c02:	cd ec       	ldi	r28, 0xCD	; 205
    1c04:	8c 9f       	mul	r24, r28
    1c06:	c1 2d       	mov	r28, r1
    1c08:	11 24       	eor	r1, r1
    1c0a:	c6 95       	lsr	r28
    1c0c:	c6 95       	lsr	r28
    1c0e:	c6 95       	lsr	r28
    1c10:	2c 2f       	mov	r18, r28
    1c12:	22 0f       	add	r18, r18
    1c14:	92 2f       	mov	r25, r18
    1c16:	99 0f       	add	r25, r25
    1c18:	99 0f       	add	r25, r25
    1c1a:	92 0f       	add	r25, r18
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	89 1b       	sub	r24, r25
    1c20:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <SevenSegmentCommonAnode>
		 vTaskDelay(20);
    1c24:	84 e1       	ldi	r24, 0x14	; 20
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
		 SevenSegmentCommonAnode(seconds/10,2);//tens
    1c2c:	62 e0       	ldi	r22, 0x02	; 2
    1c2e:	8c 2f       	mov	r24, r28
    1c30:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <SevenSegmentCommonAnode>
		 vTaskDelay(20);
    1c34:	84 e1       	ldi	r24, 0x14	; 20
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
    1c3c:	07 c0       	rjmp	.+14     	; 0x1c4c <SS_DISP+0x50>

	 }else
	 {
		 SevenSegmentCommonAnode(seconds,1);//units
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <SevenSegmentCommonAnode>
		 SevenSegmentCommonAnode(0,2);//tens
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <SevenSegmentCommonAnode>
		// vTaskDelay(80);
	 }

}
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <RED_LIGHT>:
	}
}

void RED_LIGHT(void* pvParameters)       //called every 1 sec...through callback concept
{
	vTaskDelay(100);                     //Task Periodicity
    1c50:	84 e6       	ldi	r24, 0x64	; 100
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
	while(1)
	{
		if( xSemaphore_Seconds != NULL )
    1c58:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1c5c:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	d1 f3       	breq	.-12     	; 0x1c58 <RED_LIGHT+0x8>
		{
			if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 10 ) == pdTRUE )
    1c64:	6a e0       	ldi	r22, 0x0A	; 10
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0e 94 27 05 	call	0xa4e	; 0xa4e <xQueueSemaphoreTake>
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f7       	brne	.-24     	; 0x1c58 <RED_LIGHT+0x8>
			{
				if( Total_sec_counter < 91)
    1c70:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1c74:	8b 35       	cpi	r24, 0x5B	; 91
    1c76:	70 f4       	brcc	.+28     	; 0x1c94 <RED_LIGHT+0x44>
				{
					DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 1);
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	67 e0       	ldi	r22, 0x07	; 7
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
					SS_DISP(seconds);
    1c82:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
    1c86:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SS_DISP>
					vTaskDelay(10);
    1c8a:	8a e0       	ldi	r24, 0x0A	; 10
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <RED_LIGHT+0x54>
			    }
				else
				{
					DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, 0);
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	67 e0       	ldi	r22, 0x07	; 7
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
					CLR_BIT(PORTB, 7);
    1c9e:	88 b3       	in	r24, 0x18	; 24
    1ca0:	8f 77       	andi	r24, 0x7F	; 127
    1ca2:	88 bb       	out	0x18, r24	; 24
				//	vTaskDelay(10);
				}
			  xSemaphoreGive(xSemaphore_Seconds);
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1cb2:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1cb6:	0e 94 95 04 	call	0x92a	; 0x92a <xQueueGenericSend>
    1cba:	ce cf       	rjmp	.-100    	; 0x1c58 <RED_LIGHT+0x8>

00001cbc <YELLOW_LIGHT>:

	}
}
void YELLOW_LIGHT(void* pvParameters)
{
	vTaskDelay(200);
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
	while(1)
	{
		if( xSemaphore_Seconds != NULL )
    1cc4:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1cc8:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	d1 f3       	breq	.-12     	; 0x1cc4 <YELLOW_LIGHT+0x8>
		{
			if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 10 ) == pdTRUE )
    1cd0:	6a e0       	ldi	r22, 0x0A	; 10
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	0e 94 27 05 	call	0xa4e	; 0xa4e <xQueueSemaphoreTake>
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	a1 f7       	brne	.-24     	; 0x1cc4 <YELLOW_LIGHT+0x8>
			{
				if((Total_sec_counter >=152)&&(Total_sec_counter < 163))
    1cdc:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1ce0:	88 59       	subi	r24, 0x98	; 152
    1ce2:	8b 30       	cpi	r24, 0x0B	; 11
    1ce4:	70 f4       	brcc	.+28     	; 0x1d02 <YELLOW_LIGHT+0x46>
				{
				    DIO_voidSetPinValue(DIO_PORTA, DIO_PIN4, 1);
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	64 e0       	ldi	r22, 0x04	; 4
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
				    vTaskDelay(20);
    1cf0:	84 e1       	ldi	r24, 0x14	; 20
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
					SS_DISP(seconds);
    1cf8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
    1cfc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SS_DISP>
    1d00:	08 c0       	rjmp	.+16     	; 0x1d12 <YELLOW_LIGHT+0x56>

				}
				else
				{
					DIO_voidSetPinValue(DIO_PORTA, DIO_PIN4, 0);
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	64 e0       	ldi	r22, 0x04	; 4
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
					CLR_BIT(PORTA, 4);
    1d0c:	8b b3       	in	r24, 0x1b	; 27
    1d0e:	8f 7e       	andi	r24, 0xEF	; 239
    1d10:	8b bb       	out	0x1b, r24	; 27
				//	 vTaskDelay(20);
				}
				xSemaphoreGive(xSemaphore_Seconds );
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1d20:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1d24:	0e 94 95 04 	call	0x92a	; 0x92a <xQueueGenericSend>
    1d28:	cd cf       	rjmp	.-102    	; 0x1cc4 <YELLOW_LIGHT+0x8>

00001d2a <GREEN_LIGHT>:

	}
}
void GREEN_LIGHT(void* pvParameters)
{
	vTaskDelay(300);
    1d2a:	8c e2       	ldi	r24, 0x2C	; 44
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
	while(1)
	{
		if( xSemaphore_Seconds != NULL )
    1d32:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1d36:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	d1 f3       	breq	.-12     	; 0x1d32 <GREEN_LIGHT+0x8>
		{
			if( xSemaphoreTake(xSemaphore_Seconds, ( TickType_t ) 10 ) == pdTRUE )
    1d3e:	6a e0       	ldi	r22, 0x0A	; 10
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	0e 94 27 05 	call	0xa4e	; 0xa4e <xQueueSemaphoreTake>
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	a1 f7       	brne	.-24     	; 0x1d32 <GREEN_LIGHT+0x8>
			{
				if((Total_sec_counter >=91)&&(Total_sec_counter < 152))
    1d4a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Total_sec_counter>
    1d4e:	8b 55       	subi	r24, 0x5B	; 91
    1d50:	8d 33       	cpi	r24, 0x3D	; 61
    1d52:	70 f4       	brcc	.+28     	; 0x1d70 <GREEN_LIGHT+0x46>
				{	
					DIO_voidSetPinValue(DIO_PORTA, DIO_PIN5, 1);
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
					SS_DISP(seconds);
    1d5e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
    1d62:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <SS_DISP>
					vTaskDelay(20);
    1d66:	84 e1       	ldi	r24, 0x14	; 20
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <vTaskDelay>
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <GREEN_LIGHT+0x56>
				}
				else
				{
					DIO_voidSetPinValue(DIO_PORTA, DIO_PIN5, 0);
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	65 e0       	ldi	r22, 0x05	; 5
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
					CLR_BIT(PORTA, 5);
    1d7a:	8b b3       	in	r24, 0x1b	; 27
    1d7c:	8f 7d       	andi	r24, 0xDF	; 223
    1d7e:	8b bb       	out	0x1b, r24	; 27
				//	vTaskDelay(20);
				}
				xSemaphoreGive(xSemaphore_Seconds );
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <xSemaphore_Seconds>
    1d8e:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <xSemaphore_Seconds+0x1>
    1d92:	0e 94 95 04 	call	0x92a	; 0x92a <xQueueGenericSend>
    1d96:	cd cf       	rjmp	.-102    	; 0x1d32 <GREEN_LIGHT+0x8>

00001d98 <SevenSegmentCommonAnode_INIT>:

#include "seven_segment.h"

void SevenSegmentCommonAnode_INIT(void)
{
	SET_BIT(DDRB, 0);
    1d98:	87 b3       	in	r24, 0x17	; 23
    1d9a:	81 60       	ori	r24, 0x01	; 1
    1d9c:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 1);
    1d9e:	87 b3       	in	r24, 0x17	; 23
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 2);
    1da4:	87 b3       	in	r24, 0x17	; 23
    1da6:	84 60       	ori	r24, 0x04	; 4
    1da8:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 4);
    1daa:	87 b3       	in	r24, 0x17	; 23
    1dac:	80 61       	ori	r24, 0x10	; 16
    1dae:	87 bb       	out	0x17, r24	; 23

	SET_BIT(DDRB, 5);
    1db0:	87 b3       	in	r24, 0x17	; 23
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 6);
    1db6:	87 b3       	in	r24, 0x17	; 23
    1db8:	80 64       	ori	r24, 0x40	; 64
    1dba:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA, 2);
    1dbc:	8a b3       	in	r24, 0x1a	; 26
    1dbe:	84 60       	ori	r24, 0x04	; 4
    1dc0:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA, 3);
    1dc2:	8a b3       	in	r24, 0x1a	; 26
    1dc4:	88 60       	ori	r24, 0x08	; 8
    1dc6:	8a bb       	out	0x1a, r24	; 26
    1dc8:	08 95       	ret

00001dca <SevenSegmentCommonAnode>:
}

void SevenSegmentCommonAnode(u8 num,u8 EN)
{	
    1dca:	e8 2f       	mov	r30, r24
      switch(EN)
    1dcc:	63 30       	cpi	r22, 0x03	; 3
    1dce:	29 f1       	breq	.+74     	; 0x1e1a <SevenSegmentCommonAnode+0x50>
    1dd0:	28 f4       	brcc	.+10     	; 0x1ddc <SevenSegmentCommonAnode+0x12>
    1dd2:	61 30       	cpi	r22, 0x01	; 1
    1dd4:	41 f0       	breq	.+16     	; 0x1de6 <SevenSegmentCommonAnode+0x1c>
    1dd6:	62 30       	cpi	r22, 0x02	; 2
    1dd8:	99 f0       	breq	.+38     	; 0x1e00 <SevenSegmentCommonAnode+0x36>
    1dda:	45 c0       	rjmp	.+138    	; 0x1e66 <SevenSegmentCommonAnode+0x9c>
    1ddc:	64 30       	cpi	r22, 0x04	; 4
    1dde:	51 f1       	breq	.+84     	; 0x1e34 <SevenSegmentCommonAnode+0x6a>
    1de0:	65 30       	cpi	r22, 0x05	; 5
    1de2:	a9 f1       	breq	.+106    	; 0x1e4e <SevenSegmentCommonAnode+0x84>
    1de4:	40 c0       	rjmp	.+128    	; 0x1e66 <SevenSegmentCommonAnode+0x9c>
      {
      case 1:
		 SET_BIT(PORTB, 5);
    1de6:	88 b3       	in	r24, 0x18	; 24
    1de8:	80 62       	ori	r24, 0x20	; 32
    1dea:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 6);
    1dec:	88 b3       	in	r24, 0x18	; 24
    1dee:	8f 7b       	andi	r24, 0xBF	; 191
    1df0:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTA, 2);
    1df2:	8b b3       	in	r24, 0x1b	; 27
    1df4:	84 60       	ori	r24, 0x04	; 4
    1df6:	8b bb       	out	0x1b, r24	; 27
		 SET_BIT(PORTA, 3);
    1df8:	8b b3       	in	r24, 0x1b	; 27
    1dfa:	88 60       	ori	r24, 0x08	; 8
    1dfc:	8b bb       	out	0x1b, r24	; 27
      	 
		 break;
    1dfe:	33 c0       	rjmp	.+102    	; 0x1e66 <SevenSegmentCommonAnode+0x9c>
      case 2:
       	 CLR_BIT(PORTB, 5);
    1e00:	88 b3       	in	r24, 0x18	; 24
    1e02:	8f 7d       	andi	r24, 0xDF	; 223
    1e04:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 6);
    1e06:	88 b3       	in	r24, 0x18	; 24
    1e08:	80 64       	ori	r24, 0x40	; 64
    1e0a:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTA, 2);
    1e0c:	8b b3       	in	r24, 0x1b	; 27
    1e0e:	84 60       	ori	r24, 0x04	; 4
    1e10:	8b bb       	out	0x1b, r24	; 27
		 SET_BIT(PORTA, 3);
    1e12:	8b b3       	in	r24, 0x1b	; 27
    1e14:	88 60       	ori	r24, 0x08	; 8
    1e16:	8b bb       	out	0x1b, r24	; 27
       	 break;
    1e18:	26 c0       	rjmp	.+76     	; 0x1e66 <SevenSegmentCommonAnode+0x9c>
      case 3:
       	 SET_BIT(PORTB, 5);
    1e1a:	88 b3       	in	r24, 0x18	; 24
    1e1c:	80 62       	ori	r24, 0x20	; 32
    1e1e:	88 bb       	out	0x18, r24	; 24
       	 SET_BIT(PORTB, 6);
    1e20:	88 b3       	in	r24, 0x18	; 24
    1e22:	80 64       	ori	r24, 0x40	; 64
    1e24:	88 bb       	out	0x18, r24	; 24
       	 CLR_BIT(PORTA, 2);
    1e26:	8b b3       	in	r24, 0x1b	; 27
    1e28:	8b 7f       	andi	r24, 0xFB	; 251
    1e2a:	8b bb       	out	0x1b, r24	; 27
       	 SET_BIT(PORTA, 3);
    1e2c:	8b b3       	in	r24, 0x1b	; 27
    1e2e:	88 60       	ori	r24, 0x08	; 8
    1e30:	8b bb       	out	0x1b, r24	; 27
		break;
    1e32:	19 c0       	rjmp	.+50     	; 0x1e66 <SevenSegmentCommonAnode+0x9c>
      case 4:
       	 SET_BIT(PORTB, 5);
    1e34:	88 b3       	in	r24, 0x18	; 24
    1e36:	80 62       	ori	r24, 0x20	; 32
    1e38:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 6);
    1e3a:	88 b3       	in	r24, 0x18	; 24
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTA, 2);
    1e40:	8b b3       	in	r24, 0x1b	; 27
    1e42:	84 60       	ori	r24, 0x04	; 4
    1e44:	8b bb       	out	0x1b, r24	; 27
		 CLR_BIT(PORTA, 3);
    1e46:	8b b3       	in	r24, 0x1b	; 27
    1e48:	87 7f       	andi	r24, 0xF7	; 247
    1e4a:	8b bb       	out	0x1b, r24	; 27
       	 break;
    1e4c:	0c c0       	rjmp	.+24     	; 0x1e66 <SevenSegmentCommonAnode+0x9c>
      case 5:
        SET_BIT(PORTB, 5);
    1e4e:	88 b3       	in	r24, 0x18	; 24
    1e50:	80 62       	ori	r24, 0x20	; 32
    1e52:	88 bb       	out	0x18, r24	; 24
   	    SET_BIT(PORTB, 6);
    1e54:	88 b3       	in	r24, 0x18	; 24
    1e56:	80 64       	ori	r24, 0x40	; 64
    1e58:	88 bb       	out	0x18, r24	; 24
  	    SET_BIT(PORTA, 2);
    1e5a:	8b b3       	in	r24, 0x1b	; 27
    1e5c:	84 60       	ori	r24, 0x04	; 4
    1e5e:	8b bb       	out	0x1b, r24	; 27
		SET_BIT(PORTA, 3);
    1e60:	8b b3       	in	r24, 0x1b	; 27
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	8b bb       	out	0x1b, r24	; 27
      	break;
      }
      switch(num)
    1e66:	8e 2f       	mov	r24, r30
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	8a 30       	cpi	r24, 0x0A	; 10
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <SevenSegmentCommonAnode+0xa8>
    1e70:	86 c0       	rjmp	.+268    	; 0x1f7e <SevenSegmentCommonAnode+0x1b4>
    1e72:	fc 01       	movw	r30, r24
    1e74:	e6 5d       	subi	r30, 0xD6	; 214
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__tablejump2__>
      {
      case 0:
     	 CLR_BIT(PORTB, 0);
    1e7c:	88 b3       	in	r24, 0x18	; 24
    1e7e:	8e 7f       	andi	r24, 0xFE	; 254
    1e80:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    1e82:	88 b3       	in	r24, 0x18	; 24
    1e84:	8d 7f       	andi	r24, 0xFD	; 253
    1e86:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    1e88:	88 b3       	in	r24, 0x18	; 24
    1e8a:	8b 7f       	andi	r24, 0xFB	; 251
    1e8c:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    1e8e:	88 b3       	in	r24, 0x18	; 24
    1e90:	8f 7e       	andi	r24, 0xEF	; 239
    1e92:	88 bb       	out	0x18, r24	; 24
		 
         break;
    1e94:	08 95       	ret
      case 1:
     	 SET_BIT(PORTB, 0);
    1e96:	88 b3       	in	r24, 0x18	; 24
    1e98:	81 60       	ori	r24, 0x01	; 1
    1e9a:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    1e9c:	88 b3       	in	r24, 0x18	; 24
    1e9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ea0:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    1ea2:	88 b3       	in	r24, 0x18	; 24
    1ea4:	8b 7f       	andi	r24, 0xFB	; 251
    1ea6:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    1ea8:	88 b3       	in	r24, 0x18	; 24
    1eaa:	8f 7e       	andi	r24, 0xEF	; 239
    1eac:	88 bb       	out	0x18, r24	; 24
         break;
    1eae:	08 95       	ret
      case 2:
     	 CLR_BIT(PORTB, 0);
    1eb0:	88 b3       	in	r24, 0x18	; 24
    1eb2:	8e 7f       	andi	r24, 0xFE	; 254
    1eb4:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    1eb6:	88 b3       	in	r24, 0x18	; 24
    1eb8:	82 60       	ori	r24, 0x02	; 2
    1eba:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    1ebc:	88 b3       	in	r24, 0x18	; 24
    1ebe:	8b 7f       	andi	r24, 0xFB	; 251
    1ec0:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    1ec2:	88 b3       	in	r24, 0x18	; 24
    1ec4:	8f 7e       	andi	r24, 0xEF	; 239
    1ec6:	88 bb       	out	0x18, r24	; 24
         break;
    1ec8:	08 95       	ret
      case 3:
     	 SET_BIT(PORTB, 0);
    1eca:	88 b3       	in	r24, 0x18	; 24
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    1ed0:	88 b3       	in	r24, 0x18	; 24
    1ed2:	82 60       	ori	r24, 0x02	; 2
    1ed4:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    1ed6:	88 b3       	in	r24, 0x18	; 24
    1ed8:	8b 7f       	andi	r24, 0xFB	; 251
    1eda:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    1edc:	88 b3       	in	r24, 0x18	; 24
    1ede:	8f 7e       	andi	r24, 0xEF	; 239
    1ee0:	88 bb       	out	0x18, r24	; 24
         break;
    1ee2:	08 95       	ret
      case 4:
     	 CLR_BIT(PORTB, 0);
    1ee4:	88 b3       	in	r24, 0x18	; 24
    1ee6:	8e 7f       	andi	r24, 0xFE	; 254
    1ee8:	88 bb       	out	0x18, r24	; 24
         CLR_BIT(PORTB, 1);
    1eea:	88 b3       	in	r24, 0x18	; 24
    1eec:	8d 7f       	andi	r24, 0xFD	; 253
    1eee:	88 bb       	out	0x18, r24	; 24
         SET_BIT(PORTB, 2);
    1ef0:	88 b3       	in	r24, 0x18	; 24
    1ef2:	84 60       	ori	r24, 0x04	; 4
    1ef4:	88 bb       	out	0x18, r24	; 24
         CLR_BIT(PORTB, 4);
    1ef6:	88 b3       	in	r24, 0x18	; 24
    1ef8:	8f 7e       	andi	r24, 0xEF	; 239
    1efa:	88 bb       	out	0x18, r24	; 24
		 break;
    1efc:	08 95       	ret
      case 5:
     	 SET_BIT(PORTB, 0);
    1efe:	88 b3       	in	r24, 0x18	; 24
    1f00:	81 60       	ori	r24, 0x01	; 1
    1f02:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    1f04:	88 b3       	in	r24, 0x18	; 24
    1f06:	8d 7f       	andi	r24, 0xFD	; 253
    1f08:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 2);
    1f0a:	88 b3       	in	r24, 0x18	; 24
    1f0c:	84 60       	ori	r24, 0x04	; 4
    1f0e:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    1f10:	88 b3       	in	r24, 0x18	; 24
    1f12:	8f 7e       	andi	r24, 0xEF	; 239
    1f14:	88 bb       	out	0x18, r24	; 24
         break;
    1f16:	08 95       	ret
      case 6:
     	 CLR_BIT(PORTB, 0);
    1f18:	88 b3       	in	r24, 0x18	; 24
    1f1a:	8e 7f       	andi	r24, 0xFE	; 254
    1f1c:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    1f1e:	88 b3       	in	r24, 0x18	; 24
    1f20:	82 60       	ori	r24, 0x02	; 2
    1f22:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 2);
    1f24:	88 b3       	in	r24, 0x18	; 24
    1f26:	84 60       	ori	r24, 0x04	; 4
    1f28:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 4);
    1f2a:	88 b3       	in	r24, 0x18	; 24
    1f2c:	8f 7e       	andi	r24, 0xEF	; 239
    1f2e:	88 bb       	out	0x18, r24	; 24
         break;
    1f30:	08 95       	ret
      case 7:
     	 SET_BIT(PORTB, 0);
    1f32:	88 b3       	in	r24, 0x18	; 24
    1f34:	81 60       	ori	r24, 0x01	; 1
    1f36:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 1);
    1f38:	88 b3       	in	r24, 0x18	; 24
    1f3a:	82 60       	ori	r24, 0x02	; 2
    1f3c:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 2);
    1f3e:	88 b3       	in	r24, 0x18	; 24
    1f40:	84 60       	ori	r24, 0x04	; 4
    1f42:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT
    1f44:	88 b3       	in	r24, 0x18	; 24
    1f46:	8f 7e       	andi	r24, 0xEF	; 239
    1f48:	88 bb       	out	0x18, r24	; 24
		 (PORTB, 4);
         break;
    1f4a:	08 95       	ret
      case 8:
     	 CLR_BIT(PORTB, 0);
    1f4c:	88 b3       	in	r24, 0x18	; 24
    1f4e:	8e 7f       	andi	r24, 0xFE	; 254
    1f50:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    1f52:	88 b3       	in	r24, 0x18	; 24
    1f54:	8d 7f       	andi	r24, 0xFD	; 253
    1f56:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    1f58:	88 b3       	in	r24, 0x18	; 24
    1f5a:	8b 7f       	andi	r24, 0xFB	; 251
    1f5c:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 4);
    1f5e:	88 b3       	in	r24, 0x18	; 24
    1f60:	80 61       	ori	r24, 0x10	; 16
    1f62:	88 bb       	out	0x18, r24	; 24
         break;
    1f64:	08 95       	ret
      case 9:
     	 SET_BIT(PORTB, 0);
    1f66:	88 b3       	in	r24, 0x18	; 24
    1f68:	81 60       	ori	r24, 0x01	; 1
    1f6a:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 1);
    1f6c:	88 b3       	in	r24, 0x18	; 24
    1f6e:	8d 7f       	andi	r24, 0xFD	; 253
    1f70:	88 bb       	out	0x18, r24	; 24
		 CLR_BIT(PORTB, 2);
    1f72:	88 b3       	in	r24, 0x18	; 24
    1f74:	8b 7f       	andi	r24, 0xFB	; 251
    1f76:	88 bb       	out	0x18, r24	; 24
		 SET_BIT(PORTB, 4);
    1f78:	88 b3       	in	r24, 0x18	; 24
    1f7a:	80 61       	ori	r24, 0x10	; 16
    1f7c:	88 bb       	out	0x18, r24	; 24
    1f7e:	08 95       	ret

00001f80 <__udivmodhi4>:
    1f80:	aa 1b       	sub	r26, r26
    1f82:	bb 1b       	sub	r27, r27
    1f84:	51 e1       	ldi	r21, 0x11	; 17
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <__udivmodhi4_ep>

00001f88 <__udivmodhi4_loop>:
    1f88:	aa 1f       	adc	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	a6 17       	cp	r26, r22
    1f8e:	b7 07       	cpc	r27, r23
    1f90:	10 f0       	brcs	.+4      	; 0x1f96 <__udivmodhi4_ep>
    1f92:	a6 1b       	sub	r26, r22
    1f94:	b7 0b       	sbc	r27, r23

00001f96 <__udivmodhi4_ep>:
    1f96:	88 1f       	adc	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	5a 95       	dec	r21
    1f9c:	a9 f7       	brne	.-22     	; 0x1f88 <__udivmodhi4_loop>
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	08 95       	ret

00001fa8 <__tablejump2__>:
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	05 90       	lpm	r0, Z+
    1fae:	f4 91       	lpm	r31, Z
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	09 94       	ijmp

00001fb4 <memcpy>:
    1fb4:	fb 01       	movw	r30, r22
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <memcpy+0xa>
    1fba:	01 90       	ld	r0, Z+
    1fbc:	0d 92       	st	X+, r0
    1fbe:	41 50       	subi	r20, 0x01	; 1
    1fc0:	50 40       	sbci	r21, 0x00	; 0
    1fc2:	d8 f7       	brcc	.-10     	; 0x1fba <memcpy+0x6>
    1fc4:	08 95       	ret

00001fc6 <_exit>:
    1fc6:	f8 94       	cli

00001fc8 <__stop_program>:
    1fc8:	ff cf       	rjmp	.-2      	; 0x1fc8 <__stop_program>
