
RTOS3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001db0  00001e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000459  0080007e  0080007e  00001e62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000507e  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010af  00000000  00000000  00007386  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f6e  00000000  00000000  00008435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d38  00000000  00000000  0000b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001765  00000000  00000000  0000c0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052fe  00000000  00000000  0000d841  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  00012b3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3d       	cpi	r26, 0xD7	; 215
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <main>
      8a:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      98:	0e 94 72 07 	call	0xee4	; 0xee4 <vTaskSuspendAll>
	{
		/* Check_Password there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      9c:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <__data_end>
      a0:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <__data_end+0x1>
      a4:	c9 01       	movw	r24, r18
      a6:	8c 0f       	add	r24, r28
      a8:	9d 1f       	adc	r25, r29
      aa:	88 3e       	cpi	r24, 0xE8	; 232
      ac:	43 e0       	ldi	r20, 0x03	; 3
      ae:	94 07       	cpc	r25, r20
      b0:	58 f4       	brcc	.+22     	; 0xc8 <pvPortMalloc+0x36>
      b2:	28 17       	cp	r18, r24
      b4:	39 07       	cpc	r19, r25
      b6:	58 f4       	brcc	.+22     	; 0xce <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check_Password for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      b8:	e9 01       	movw	r28, r18
      ba:	c0 58       	subi	r28, 0x80	; 128
      bc:	df 4f       	sbci	r29, 0xFF	; 255
			xNextFreeByte += xWantedSize;			
      be:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
      c2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
      c6:	05 c0       	rjmp	.+10     	; 0xd2 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      c8:	c0 e0       	ldi	r28, 0x00	; 0
      ca:	d0 e0       	ldi	r29, 0x00	; 0
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <pvPortMalloc+0x40>
      ce:	c0 e0       	ldi	r28, 0x00	; 0
      d0:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
      d2:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
      d6:	ce 01       	movw	r24, r28
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
      de:	08 95       	ret

000000e0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      e0:	fc 01       	movw	r30, r24
      e2:	03 96       	adiw	r24, 0x03	; 3
      e4:	92 83       	std	Z+2, r25	; 0x02
      e6:	81 83       	std	Z+1, r24	; 0x01
      e8:	2f ef       	ldi	r18, 0xFF	; 255
      ea:	3f ef       	ldi	r19, 0xFF	; 255
      ec:	34 83       	std	Z+4, r19	; 0x04
      ee:	23 83       	std	Z+3, r18	; 0x03
      f0:	96 83       	std	Z+6, r25	; 0x06
      f2:	85 83       	std	Z+5, r24	; 0x05
      f4:	90 87       	std	Z+8, r25	; 0x08
      f6:	87 83       	std	Z+7, r24	; 0x07
      f8:	10 82       	st	Z, r1
      fa:	08 95       	ret

000000fc <vListInitialiseItem>:
      fc:	fc 01       	movw	r30, r24
      fe:	11 86       	std	Z+9, r1	; 0x09
     100:	10 86       	std	Z+8, r1	; 0x08
     102:	08 95       	ret

00000104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     10a:	48 81       	ld	r20, Y
     10c:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     10e:	4f 3f       	cpi	r20, 0xFF	; 255
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	52 07       	cpc	r21, r18
     114:	21 f4       	brne	.+8      	; 0x11e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     116:	fc 01       	movw	r30, r24
     118:	a7 81       	ldd	r26, Z+7	; 0x07
     11a:	b0 85       	ldd	r27, Z+8	; 0x08
     11c:	0d c0       	rjmp	.+26     	; 0x138 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     11e:	dc 01       	movw	r26, r24
     120:	13 96       	adiw	r26, 0x03	; 3
     122:	01 c0       	rjmp	.+2      	; 0x126 <vListInsert+0x22>
     124:	df 01       	movw	r26, r30
     126:	12 96       	adiw	r26, 0x02	; 2
     128:	ed 91       	ld	r30, X+
     12a:	fc 91       	ld	r31, X
     12c:	13 97       	sbiw	r26, 0x03	; 3
     12e:	20 81       	ld	r18, Z
     130:	31 81       	ldd	r19, Z+1	; 0x01
     132:	42 17       	cp	r20, r18
     134:	53 07       	cpc	r21, r19
     136:	b0 f7       	brcc	.-20     	; 0x124 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     138:	12 96       	adiw	r26, 0x02	; 2
     13a:	ed 91       	ld	r30, X+
     13c:	fc 91       	ld	r31, X
     13e:	13 97       	sbiw	r26, 0x03	; 3
     140:	fb 83       	std	Y+3, r31	; 0x03
     142:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     144:	d5 83       	std	Z+5, r29	; 0x05
     146:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     148:	bd 83       	std	Y+5, r27	; 0x05
     14a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     14c:	13 96       	adiw	r26, 0x03	; 3
     14e:	dc 93       	st	X, r29
     150:	ce 93       	st	-X, r28
     152:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     154:	99 87       	std	Y+9, r25	; 0x09
     156:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     158:	fc 01       	movw	r30, r24
     15a:	20 81       	ld	r18, Z
     15c:	2f 5f       	subi	r18, 0xFF	; 255
     15e:	20 83       	st	Z, r18
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     16c:	a0 85       	ldd	r26, Z+8	; 0x08
     16e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     170:	c2 81       	ldd	r28, Z+2	; 0x02
     172:	d3 81       	ldd	r29, Z+3	; 0x03
     174:	84 81       	ldd	r24, Z+4	; 0x04
     176:	95 81       	ldd	r25, Z+5	; 0x05
     178:	9d 83       	std	Y+5, r25	; 0x05
     17a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     17c:	c4 81       	ldd	r28, Z+4	; 0x04
     17e:	d5 81       	ldd	r29, Z+5	; 0x05
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	93 81       	ldd	r25, Z+3	; 0x03
     184:	9b 83       	std	Y+3, r25	; 0x03
     186:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     188:	11 96       	adiw	r26, 0x01	; 1
     18a:	8d 91       	ld	r24, X+
     18c:	9c 91       	ld	r25, X
     18e:	12 97       	sbiw	r26, 0x02	; 2
     190:	e8 17       	cp	r30, r24
     192:	f9 07       	cpc	r31, r25
     194:	31 f4       	brne	.+12     	; 0x1a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     196:	84 81       	ldd	r24, Z+4	; 0x04
     198:	95 81       	ldd	r25, Z+5	; 0x05
     19a:	12 96       	adiw	r26, 0x02	; 2
     19c:	9c 93       	st	X, r25
     19e:	8e 93       	st	-X, r24
     1a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1a2:	11 86       	std	Z+9, r1	; 0x09
     1a4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1a6:	8c 91       	ld	r24, X
     1a8:	81 50       	subi	r24, 0x01	; 1
     1aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1ac:	8c 91       	ld	r24, X
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     1b4:	1b bc       	out	0x2b, r1	; 43
     1b6:	89 ef       	ldi	r24, 0xF9	; 249
     1b8:	8a bd       	out	0x2a, r24	; 42
     1ba:	8b e0       	ldi	r24, 0x0B	; 11
     1bc:	8e bd       	out	0x2e, r24	; 46
     1be:	89 b7       	in	r24, 0x39	; 57
     1c0:	80 61       	ori	r24, 0x10	; 16
     1c2:	89 bf       	out	0x39, r24	; 57
     1c4:	08 95       	ret

000001c6 <pxPortInitialiseStack>:
     1c6:	31 e1       	ldi	r19, 0x11	; 17
     1c8:	fc 01       	movw	r30, r24
     1ca:	30 83       	st	Z, r19
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	22 e2       	ldi	r18, 0x22	; 34
     1d0:	20 83       	st	Z, r18
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	a3 e3       	ldi	r26, 0x33	; 51
     1d6:	a0 83       	st	Z, r26
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 83       	st	Z, r22
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	70 83       	st	Z, r23
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	10 82       	st	Z, r1
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	60 e8       	ldi	r22, 0x80	; 128
     1e8:	60 83       	st	Z, r22
     1ea:	31 97       	sbiw	r30, 0x01	; 1
     1ec:	10 82       	st	Z, r1
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	63 e0       	ldi	r22, 0x03	; 3
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	64 e0       	ldi	r22, 0x04	; 4
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	65 e0       	ldi	r22, 0x05	; 5
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	66 e0       	ldi	r22, 0x06	; 6
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	67 e0       	ldi	r22, 0x07	; 7
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	68 e0       	ldi	r22, 0x08	; 8
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	69 e0       	ldi	r22, 0x09	; 9
     21c:	60 83       	st	Z, r22
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	60 e1       	ldi	r22, 0x10	; 16
     222:	60 83       	st	Z, r22
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	32 e1       	ldi	r19, 0x12	; 18
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	33 e1       	ldi	r19, 0x13	; 19
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	34 e1       	ldi	r19, 0x14	; 20
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	35 e1       	ldi	r19, 0x15	; 21
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	36 e1       	ldi	r19, 0x16	; 22
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	37 e1       	ldi	r19, 0x17	; 23
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	38 e1       	ldi	r19, 0x18	; 24
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	39 e1       	ldi	r19, 0x19	; 25
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	30 e2       	ldi	r19, 0x20	; 32
     25c:	30 83       	st	Z, r19
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	31 e2       	ldi	r19, 0x21	; 33
     262:	30 83       	st	Z, r19
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	20 83       	st	Z, r18
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	23 e2       	ldi	r18, 0x23	; 35
     26c:	20 83       	st	Z, r18
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	40 83       	st	Z, r20
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	50 83       	st	Z, r21
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	26 e2       	ldi	r18, 0x26	; 38
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	27 e2       	ldi	r18, 0x27	; 39
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	28 e2       	ldi	r18, 0x28	; 40
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	29 e2       	ldi	r18, 0x29	; 41
     28c:	20 83       	st	Z, r18
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	20 e3       	ldi	r18, 0x30	; 48
     292:	20 83       	st	Z, r18
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	21 e3       	ldi	r18, 0x31	; 49
     298:	20 83       	st	Z, r18
     29a:	86 97       	sbiw	r24, 0x26	; 38
     29c:	08 95       	ret

0000029e <xPortStartScheduler>:
     29e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <prvSetupTimerInterrupt>
     2a2:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     2a6:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     2aa:	cd 91       	ld	r28, X+
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	dd 91       	ld	r29, X+
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	bf 90       	pop	r11
     2dc:	af 90       	pop	r10
     2de:	9f 90       	pop	r9
     2e0:	8f 90       	pop	r8
     2e2:	7f 90       	pop	r7
     2e4:	6f 90       	pop	r6
     2e6:	5f 90       	pop	r5
     2e8:	4f 90       	pop	r4
     2ea:	3f 90       	pop	r3
     2ec:	2f 90       	pop	r2
     2ee:	1f 90       	pop	r1
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	08 95       	ret
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	0f 92       	push	r0
     304:	1f 92       	push	r1
     306:	11 24       	eor	r1, r1
     308:	2f 92       	push	r2
     30a:	3f 92       	push	r3
     30c:	4f 92       	push	r4
     30e:	5f 92       	push	r5
     310:	6f 92       	push	r6
     312:	7f 92       	push	r7
     314:	8f 92       	push	r8
     316:	9f 92       	push	r9
     318:	af 92       	push	r10
     31a:	bf 92       	push	r11
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
     344:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     348:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     34c:	0d b6       	in	r0, 0x3d	; 61
     34e:	0d 92       	st	X+, r0
     350:	0e b6       	in	r0, 0x3e	; 62
     352:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     354:	0e 94 7d 09 	call	0x12fa	; 0x12fa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     358:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     35c:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     360:	cd 91       	ld	r28, X+
     362:	cd bf       	out	0x3d, r28	; 61
     364:	dd 91       	ld	r29, X+
     366:	de bf       	out	0x3e, r29	; 62
     368:	ff 91       	pop	r31
     36a:	ef 91       	pop	r30
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	7f 91       	pop	r23
     37a:	6f 91       	pop	r22
     37c:	5f 91       	pop	r21
     37e:	4f 91       	pop	r20
     380:	3f 91       	pop	r19
     382:	2f 91       	pop	r18
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	3f 90       	pop	r3
     3a2:	2f 90       	pop	r2
     3a4:	1f 90       	pop	r1
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0

	asm volatile ( "ret" );
     3ac:	08 95       	ret

000003ae <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	0f 92       	push	r0
     3b6:	1f 92       	push	r1
     3b8:	11 24       	eor	r1, r1
     3ba:	2f 92       	push	r2
     3bc:	3f 92       	push	r3
     3be:	4f 92       	push	r4
     3c0:	5f 92       	push	r5
     3c2:	6f 92       	push	r6
     3c4:	7f 92       	push	r7
     3c6:	8f 92       	push	r8
     3c8:	9f 92       	push	r9
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	ef 93       	push	r30
     3f4:	ff 93       	push	r31
     3f6:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     3fa:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     3fe:	0d b6       	in	r0, 0x3d	; 61
     400:	0d 92       	st	X+, r0
     402:	0e b6       	in	r0, 0x3e	; 62
     404:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     406:	0e 94 78 07 	call	0xef0	; 0xef0 <xTaskIncrementTick>
     40a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     40c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     410:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     414:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     418:	cd 91       	ld	r28, X+
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	dd 91       	ld	r29, X+
     41e:	de bf       	out	0x3e, r29	; 62
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	1f 90       	pop	r1
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0

	asm volatile ( "ret" );
     464:	08 95       	ret

00000466 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     466:	0e 94 d7 01 	call	0x3ae	; 0x3ae <vPortYieldFromTick>
		asm volatile ( "reti" );
     46a:	18 95       	reti

0000046c <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     46c:	dc 01       	movw	r26, r24
     46e:	51 96       	adiw	r26, 0x11	; 17
     470:	2c 91       	ld	r18, X
     472:	51 97       	sbiw	r26, 0x11	; 17
     474:	22 23       	and	r18, r18
     476:	41 f0       	breq	.+16     	; 0x488 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     478:	56 96       	adiw	r26, 0x16	; 22
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	57 97       	sbiw	r26, 0x17	; 23
     480:	90 81       	ld	r25, Z
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	89 1b       	sub	r24, r25
     486:	08 95       	ret
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	08 95       	ret

0000048c <prvIsQueueEmpty>:
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	0f 92       	push	r0
     492:	fc 01       	movw	r30, r24
     494:	82 8d       	ldd	r24, Z+26	; 0x1a
     496:	81 11       	cpse	r24, r1
     498:	02 c0       	rjmp	.+4      	; 0x49e <prvIsQueueEmpty+0x12>
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	01 c0       	rjmp	.+2      	; 0x4a0 <prvIsQueueEmpty+0x14>
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	08 95       	ret

000004a6 <prvIsQueueFull>:
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	0f 92       	push	r0
     4ac:	fc 01       	movw	r30, r24
     4ae:	22 8d       	ldd	r18, Z+26	; 0x1a
     4b0:	83 8d       	ldd	r24, Z+27	; 0x1b
     4b2:	28 13       	cpse	r18, r24
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <prvIsQueueFull+0x14>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <prvIsQueueFull+0x16>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	08 95       	ret

000004c2 <prvCopyDataToQueue>:
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	ec 01       	movw	r28, r24
     4cc:	04 2f       	mov	r16, r20
     4ce:	1a 8d       	ldd	r17, Y+26	; 0x1a
     4d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4d2:	41 11       	cpse	r20, r1
     4d4:	0c c0       	rjmp	.+24     	; 0x4ee <prvCopyDataToQueue+0x2c>
     4d6:	88 81       	ld	r24, Y
     4d8:	99 81       	ldd	r25, Y+1	; 0x01
     4da:	89 2b       	or	r24, r25
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <prvCopyDataToQueue+0x1e>
     4de:	42 c0       	rjmp	.+132    	; 0x564 <prvCopyDataToQueue+0xa2>
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	9d 81       	ldd	r25, Y+5	; 0x05
     4e4:	0e 94 82 0b 	call	0x1704	; 0x1704 <xTaskPriorityDisinherit>
     4e8:	1d 82       	std	Y+5, r1	; 0x05
     4ea:	1c 82       	std	Y+4, r1	; 0x04
     4ec:	42 c0       	rjmp	.+132    	; 0x572 <prvCopyDataToQueue+0xb0>
     4ee:	01 11       	cpse	r16, r1
     4f0:	17 c0       	rjmp	.+46     	; 0x520 <prvCopyDataToQueue+0x5e>
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	9b 81       	ldd	r25, Y+3	; 0x03
     4f8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <memcpy>
     4fc:	2c 8d       	ldd	r18, Y+28	; 0x1c
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	9b 81       	ldd	r25, Y+3	; 0x03
     502:	82 0f       	add	r24, r18
     504:	91 1d       	adc	r25, r1
     506:	9b 83       	std	Y+3, r25	; 0x03
     508:	8a 83       	std	Y+2, r24	; 0x02
     50a:	2c 81       	ldd	r18, Y+4	; 0x04
     50c:	3d 81       	ldd	r19, Y+5	; 0x05
     50e:	82 17       	cp	r24, r18
     510:	93 07       	cpc	r25, r19
     512:	50 f1       	brcs	.+84     	; 0x568 <prvCopyDataToQueue+0xa6>
     514:	88 81       	ld	r24, Y
     516:	99 81       	ldd	r25, Y+1	; 0x01
     518:	9b 83       	std	Y+3, r25	; 0x03
     51a:	8a 83       	std	Y+2, r24	; 0x02
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	29 c0       	rjmp	.+82     	; 0x572 <prvCopyDataToQueue+0xb0>
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	8e 81       	ldd	r24, Y+6	; 0x06
     524:	9f 81       	ldd	r25, Y+7	; 0x07
     526:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <memcpy>
     52a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	91 95       	neg	r25
     530:	81 95       	neg	r24
     532:	91 09       	sbc	r25, r1
     534:	2e 81       	ldd	r18, Y+6	; 0x06
     536:	3f 81       	ldd	r19, Y+7	; 0x07
     538:	28 0f       	add	r18, r24
     53a:	39 1f       	adc	r19, r25
     53c:	3f 83       	std	Y+7, r19	; 0x07
     53e:	2e 83       	std	Y+6, r18	; 0x06
     540:	48 81       	ld	r20, Y
     542:	59 81       	ldd	r21, Y+1	; 0x01
     544:	24 17       	cp	r18, r20
     546:	35 07       	cpc	r19, r21
     548:	30 f4       	brcc	.+12     	; 0x556 <prvCopyDataToQueue+0x94>
     54a:	2c 81       	ldd	r18, Y+4	; 0x04
     54c:	3d 81       	ldd	r19, Y+5	; 0x05
     54e:	82 0f       	add	r24, r18
     550:	93 1f       	adc	r25, r19
     552:	9f 83       	std	Y+7, r25	; 0x07
     554:	8e 83       	std	Y+6, r24	; 0x06
     556:	02 30       	cpi	r16, 0x02	; 2
     558:	49 f4       	brne	.+18     	; 0x56c <prvCopyDataToQueue+0xaa>
     55a:	11 23       	and	r17, r17
     55c:	49 f0       	breq	.+18     	; 0x570 <prvCopyDataToQueue+0xae>
     55e:	11 50       	subi	r17, 0x01	; 1
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	07 c0       	rjmp	.+14     	; 0x572 <prvCopyDataToQueue+0xb0>
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	05 c0       	rjmp	.+10     	; 0x572 <prvCopyDataToQueue+0xb0>
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	03 c0       	rjmp	.+6      	; 0x572 <prvCopyDataToQueue+0xb0>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	01 c0       	rjmp	.+2      	; 0x572 <prvCopyDataToQueue+0xb0>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	1f 5f       	subi	r17, 0xFF	; 255
     574:	1a 8f       	std	Y+26, r17	; 0x1a
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <prvUnlockQueue>:
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	0f 92       	push	r0
     58e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     590:	0b c0       	rjmp	.+22     	; 0x5a8 <prvUnlockQueue+0x28>
     592:	89 89       	ldd	r24, Y+17	; 0x11
     594:	88 23       	and	r24, r24
     596:	51 f0       	breq	.+20     	; 0x5ac <prvUnlockQueue+0x2c>
     598:	ce 01       	movw	r24, r28
     59a:	41 96       	adiw	r24, 0x11	; 17
     59c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <xTaskRemoveFromEventList>
     5a0:	81 11       	cpse	r24, r1
     5a2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <vTaskMissedYield>
     5a6:	11 50       	subi	r17, 0x01	; 1
     5a8:	11 16       	cp	r1, r17
     5aa:	9c f3       	brlt	.-26     	; 0x592 <prvUnlockQueue+0x12>
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	8e 8f       	std	Y+30, r24	; 0x1e
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	0f 92       	push	r0
     5ba:	1d 8d       	ldd	r17, Y+29	; 0x1d
     5bc:	0b c0       	rjmp	.+22     	; 0x5d4 <prvUnlockQueue+0x54>
     5be:	88 85       	ldd	r24, Y+8	; 0x08
     5c0:	88 23       	and	r24, r24
     5c2:	51 f0       	breq	.+20     	; 0x5d8 <prvUnlockQueue+0x58>
     5c4:	ce 01       	movw	r24, r28
     5c6:	08 96       	adiw	r24, 0x08	; 8
     5c8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <xTaskRemoveFromEventList>
     5cc:	81 11       	cpse	r24, r1
     5ce:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <vTaskMissedYield>
     5d2:	11 50       	subi	r17, 0x01	; 1
     5d4:	11 16       	cp	r1, r17
     5d6:	9c f3       	brlt	.-26     	; 0x5be <prvUnlockQueue+0x3e>
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	8d 8f       	std	Y+29, r24	; 0x1d
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	08 95       	ret

000005e8 <xQueueGenericReset>:
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	fc 01       	movw	r30, r24
     5f2:	36 2f       	mov	r19, r22
     5f4:	89 2b       	or	r24, r25
     5f6:	09 f4       	brne	.+2      	; 0x5fa <xQueueGenericReset+0x12>
     5f8:	4d c0       	rjmp	.+154    	; 0x694 <xQueueGenericReset+0xac>
     5fa:	23 8d       	ldd	r18, Z+27	; 0x1b
     5fc:	22 23       	and	r18, r18
     5fe:	09 f4       	brne	.+2      	; 0x602 <xQueueGenericReset+0x1a>
     600:	4b c0       	rjmp	.+150    	; 0x698 <xQueueGenericReset+0xb0>
     602:	02 2f       	mov	r16, r18
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	9f ef       	ldi	r25, 0xFF	; 255
     60a:	b8 01       	movw	r22, r16
     60c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__udivmodhi4>
     610:	44 8d       	ldd	r20, Z+28	; 0x1c
     612:	84 2f       	mov	r24, r20
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	68 17       	cp	r22, r24
     618:	79 07       	cpc	r23, r25
     61a:	08 f4       	brcc	.+2      	; 0x61e <xQueueGenericReset+0x36>
     61c:	3f c0       	rjmp	.+126    	; 0x69c <xQueueGenericReset+0xb4>
     61e:	ef 01       	movw	r28, r30
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	0f 92       	push	r0
     626:	60 81       	ld	r22, Z
     628:	71 81       	ldd	r23, Z+1	; 0x01
     62a:	fb 01       	movw	r30, r22
     62c:	24 9f       	mul	r18, r20
     62e:	e0 0d       	add	r30, r0
     630:	f1 1d       	adc	r31, r1
     632:	11 24       	eor	r1, r1
     634:	fd 83       	std	Y+5, r31	; 0x05
     636:	ec 83       	std	Y+4, r30	; 0x04
     638:	1a 8e       	std	Y+26, r1	; 0x1a
     63a:	7b 83       	std	Y+3, r23	; 0x03
     63c:	6a 83       	std	Y+2, r22	; 0x02
     63e:	01 50       	subi	r16, 0x01	; 1
     640:	11 09       	sbc	r17, r1
     642:	80 9f       	mul	r24, r16
     644:	a0 01       	movw	r20, r0
     646:	81 9f       	mul	r24, r17
     648:	50 0d       	add	r21, r0
     64a:	90 9f       	mul	r25, r16
     64c:	50 0d       	add	r21, r0
     64e:	11 24       	eor	r1, r1
     650:	cb 01       	movw	r24, r22
     652:	84 0f       	add	r24, r20
     654:	95 1f       	adc	r25, r21
     656:	9f 83       	std	Y+7, r25	; 0x07
     658:	8e 83       	std	Y+6, r24	; 0x06
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	8d 8f       	std	Y+29, r24	; 0x1d
     65e:	8e 8f       	std	Y+30, r24	; 0x1e
     660:	31 11       	cpse	r19, r1
     662:	0c c0       	rjmp	.+24     	; 0x67c <xQueueGenericReset+0x94>
     664:	88 85       	ldd	r24, Y+8	; 0x08
     666:	88 23       	and	r24, r24
     668:	89 f0       	breq	.+34     	; 0x68c <xQueueGenericReset+0xa4>
     66a:	ce 01       	movw	r24, r28
     66c:	08 96       	adiw	r24, 0x08	; 8
     66e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <xTaskRemoveFromEventList>
     672:	88 23       	and	r24, r24
     674:	59 f0       	breq	.+22     	; 0x68c <xQueueGenericReset+0xa4>
     676:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     67a:	08 c0       	rjmp	.+16     	; 0x68c <xQueueGenericReset+0xa4>
     67c:	ce 01       	movw	r24, r28
     67e:	08 96       	adiw	r24, 0x08	; 8
     680:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     684:	ce 01       	movw	r24, r28
     686:	41 96       	adiw	r24, 0x11	; 17
     688:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	05 c0       	rjmp	.+10     	; 0x69e <xQueueGenericReset+0xb6>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	03 c0       	rjmp	.+6      	; 0x69e <xQueueGenericReset+0xb6>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	01 c0       	rjmp	.+2      	; 0x69e <xQueueGenericReset+0xb6>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	08 95       	ret

000006a8 <prvInitialiseNewQueue>:
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	f8 01       	movw	r30, r16
     6ae:	61 11       	cpse	r22, r1
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <prvInitialiseNewQueue+0x10>
     6b2:	11 83       	std	Z+1, r17	; 0x01
     6b4:	00 83       	st	Z, r16
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <prvInitialiseNewQueue+0x14>
     6b8:	51 83       	std	Z+1, r21	; 0x01
     6ba:	40 83       	st	Z, r20
     6bc:	83 8f       	std	Z+27, r24	; 0x1b
     6be:	64 8f       	std	Z+28, r22	; 0x1c
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	cf 01       	movw	r24, r30
     6c4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <xQueueGenericReset>
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <xQueueGenericCreate>:
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	38 2f       	mov	r19, r24
     6de:	e6 2f       	mov	r30, r22
     6e0:	88 23       	and	r24, r24
     6e2:	29 f1       	breq	.+74     	; 0x72e <xQueueGenericCreate+0x60>
     6e4:	68 2f       	mov	r22, r24
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__udivmodhi4>
     6f0:	8e 2f       	mov	r24, r30
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	68 17       	cp	r22, r24
     6f6:	79 07       	cpc	r23, r25
     6f8:	e8 f0       	brcs	.+58     	; 0x734 <xQueueGenericCreate+0x66>
     6fa:	3e 9f       	mul	r19, r30
     6fc:	c0 01       	movw	r24, r0
     6fe:	11 24       	eor	r1, r1
     700:	81 3e       	cpi	r24, 0xE1	; 225
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	92 07       	cpc	r25, r18
     706:	c8 f4       	brcc	.+50     	; 0x73a <xQueueGenericCreate+0x6c>
     708:	d4 2e       	mov	r13, r20
     70a:	de 2f       	mov	r29, r30
     70c:	c3 2f       	mov	r28, r19
     70e:	4f 96       	adiw	r24, 0x1f	; 31
     710:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     714:	7c 01       	movw	r14, r24
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	91 f0       	breq	.+36     	; 0x73e <xQueueGenericCreate+0x70>
     71a:	8c 01       	movw	r16, r24
     71c:	2d 2d       	mov	r18, r13
     71e:	ac 01       	movw	r20, r24
     720:	41 5e       	subi	r20, 0xE1	; 225
     722:	5f 4f       	sbci	r21, 0xFF	; 255
     724:	6d 2f       	mov	r22, r29
     726:	8c 2f       	mov	r24, r28
     728:	0e 94 54 03 	call	0x6a8	; 0x6a8 <prvInitialiseNewQueue>
     72c:	08 c0       	rjmp	.+16     	; 0x73e <xQueueGenericCreate+0x70>
     72e:	e1 2c       	mov	r14, r1
     730:	f1 2c       	mov	r15, r1
     732:	05 c0       	rjmp	.+10     	; 0x73e <xQueueGenericCreate+0x70>
     734:	e1 2c       	mov	r14, r1
     736:	f1 2c       	mov	r15, r1
     738:	02 c0       	rjmp	.+4      	; 0x73e <xQueueGenericCreate+0x70>
     73a:	e1 2c       	mov	r14, r1
     73c:	f1 2c       	mov	r15, r1
     73e:	c7 01       	movw	r24, r14
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	08 95       	ret

00000750 <xQueueGenericSend>:
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	00 d0       	rcall	.+0      	; 0x762 <xQueueGenericSend+0x12>
     762:	00 d0       	rcall	.+0      	; 0x764 <xQueueGenericSend+0x14>
     764:	1f 92       	push	r1
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	8c 01       	movw	r16, r24
     76c:	7b 01       	movw	r14, r22
     76e:	5d 83       	std	Y+5, r21	; 0x05
     770:	4c 83       	std	Y+4, r20	; 0x04
     772:	c2 2e       	mov	r12, r18
     774:	d1 2c       	mov	r13, r1
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	0f 92       	push	r0
     77c:	f8 01       	movw	r30, r16
     77e:	92 8d       	ldd	r25, Z+26	; 0x1a
     780:	83 8d       	ldd	r24, Z+27	; 0x1b
     782:	98 17       	cp	r25, r24
     784:	18 f0       	brcs	.+6      	; 0x78c <xQueueGenericSend+0x3c>
     786:	f2 e0       	ldi	r31, 0x02	; 2
     788:	cf 12       	cpse	r12, r31
     78a:	19 c0       	rjmp	.+50     	; 0x7be <xQueueGenericSend+0x6e>
     78c:	4c 2d       	mov	r20, r12
     78e:	b7 01       	movw	r22, r14
     790:	c8 01       	movw	r24, r16
     792:	0e 94 61 02 	call	0x4c2	; 0x4c2 <prvCopyDataToQueue>
     796:	f8 01       	movw	r30, r16
     798:	91 89       	ldd	r25, Z+17	; 0x11
     79a:	99 23       	and	r25, r25
     79c:	49 f0       	breq	.+18     	; 0x7b0 <xQueueGenericSend+0x60>
     79e:	c8 01       	movw	r24, r16
     7a0:	41 96       	adiw	r24, 0x11	; 17
     7a2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <xTaskRemoveFromEventList>
     7a6:	88 23       	and	r24, r24
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <xQueueGenericSend+0x66>
     7aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <xQueueGenericSend+0x66>
     7b0:	81 11       	cpse	r24, r1
     7b2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	4d c0       	rjmp	.+154    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	89 2b       	or	r24, r25
     7c4:	21 f4       	brne	.+8      	; 0x7ce <xQueueGenericSend+0x7e>
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	45 c0       	rjmp	.+138    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7ce:	d1 10       	cpse	r13, r1
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <xQueueGenericSend+0x8e>
     7d2:	ce 01       	movw	r24, r28
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <vTaskInternalSetTimeOutState>
     7da:	dd 24       	eor	r13, r13
     7dc:	d3 94       	inc	r13
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0e 94 72 07 	call	0xee4	; 0xee4 <vTaskSuspendAll>
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	0f 92       	push	r0
     7ec:	f8 01       	movw	r30, r16
     7ee:	85 8d       	ldd	r24, Z+29	; 0x1d
     7f0:	8f 3f       	cpi	r24, 0xFF	; 255
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <xQueueGenericSend+0xa6>
     7f4:	15 8e       	std	Z+29, r1	; 0x1d
     7f6:	f8 01       	movw	r30, r16
     7f8:	86 8d       	ldd	r24, Z+30	; 0x1e
     7fa:	8f 3f       	cpi	r24, 0xFF	; 255
     7fc:	09 f4       	brne	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	16 8e       	std	Z+30, r1	; 0x1e
     800:	0f 90       	pop	r0
     802:	0f be       	out	0x3f, r0	; 63
     804:	be 01       	movw	r22, r28
     806:	6c 5f       	subi	r22, 0xFC	; 252
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <xTaskCheckForTimeOut>
     812:	81 11       	cpse	r24, r1
     814:	1b c0       	rjmp	.+54     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     816:	c8 01       	movw	r24, r16
     818:	0e 94 53 02 	call	0x4a6	; 0x4a6 <prvIsQueueFull>
     81c:	88 23       	and	r24, r24
     81e:	81 f0       	breq	.+32     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     820:	6c 81       	ldd	r22, Y+4	; 0x04
     822:	7d 81       	ldd	r23, Y+5	; 0x05
     824:	c8 01       	movw	r24, r16
     826:	08 96       	adiw	r24, 0x08	; 8
     828:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <vTaskPlaceOnEventList>
     82c:	c8 01       	movw	r24, r16
     82e:	0e 94 c0 02 	call	0x580	; 0x580 <prvUnlockQueue>
     832:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
     836:	81 11       	cpse	r24, r1
     838:	9e cf       	rjmp	.-196    	; 0x776 <xQueueGenericSend+0x26>
     83a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     83e:	9b cf       	rjmp	.-202    	; 0x776 <xQueueGenericSend+0x26>
     840:	c8 01       	movw	r24, r16
     842:	0e 94 c0 02 	call	0x580	; 0x580 <prvUnlockQueue>
     846:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
     84a:	95 cf       	rjmp	.-214    	; 0x776 <xQueueGenericSend+0x26>
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 c0 02 	call	0x580	; 0x580 <prvUnlockQueue>
     852:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <xQueueSemaphoreTake+0xe>
     882:	00 d0       	rcall	.+0      	; 0x884 <xQueueSemaphoreTake+0x10>
     884:	1f 92       	push	r1
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8c 01       	movw	r16, r24
     88c:	7d 83       	std	Y+5, r23	; 0x05
     88e:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     890:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     892:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     89a:	f8 01       	movw	r30, r16
     89c:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     89e:	88 23       	and	r24, r24
     8a0:	d1 f0       	breq	.+52     	; 0x8d6 <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     8a2:	81 50       	subi	r24, 0x01	; 1
     8a4:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	89 2b       	or	r24, r25
     8ac:	29 f4       	brne	.+10     	; 0x8b8 <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     8ae:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <pvTaskIncrementMutexHeldCount>
     8b2:	f8 01       	movw	r30, r16
     8b4:	95 83       	std	Z+5, r25	; 0x05
     8b6:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check_Password to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8b8:	f8 01       	movw	r30, r16
     8ba:	80 85       	ldd	r24, Z+8	; 0x08
     8bc:	88 23       	and	r24, r24
     8be:	39 f0       	breq	.+14     	; 0x8ce <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     8c0:	c8 01       	movw	r24, r16
     8c2:	08 96       	adiw	r24, 0x08	; 8
     8c4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <xTaskRemoveFromEventList>
     8c8:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     8ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	74 c0       	rjmp	.+232    	; 0x9be <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     8d6:	8c 81       	ldd	r24, Y+4	; 0x04
     8d8:	9d 81       	ldd	r25, Y+5	; 0x05
     8da:	89 2b       	or	r24, r25
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	6c c0       	rjmp	.+216    	; 0x9be <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     8e6:	f1 10       	cpse	r15, r1
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 a0 0a 	call	0x1540	; 0x1540 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     8f2:	ff 24       	eor	r15, r15
     8f4:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     8fa:	0e 94 72 07 	call	0xee4	; 0xee4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	0f 92       	push	r0
     904:	f8 01       	movw	r30, r16
     906:	85 8d       	ldd	r24, Z+29	; 0x1d
     908:	8f 3f       	cpi	r24, 0xFF	; 255
     90a:	09 f4       	brne	.+2      	; 0x90e <xQueueSemaphoreTake+0x9a>
     90c:	15 8e       	std	Z+29, r1	; 0x1d
     90e:	f8 01       	movw	r30, r16
     910:	86 8d       	ldd	r24, Z+30	; 0x1e
     912:	8f 3f       	cpi	r24, 0xFF	; 255
     914:	09 f4       	brne	.+2      	; 0x918 <xQueueSemaphoreTake+0xa4>
     916:	16 8e       	std	Z+30, r1	; 0x1e
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     91c:	be 01       	movw	r22, r28
     91e:	6c 5f       	subi	r22, 0xFC	; 252
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 ab 0a 	call	0x1556	; 0x1556 <xTaskCheckForTimeOut>
     92a:	81 11       	cpse	r24, r1
     92c:	2a c0       	rjmp	.+84     	; 0x982 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     92e:	c8 01       	movw	r24, r16
     930:	0e 94 46 02 	call	0x48c	; 0x48c <prvIsQueueEmpty>
     934:	88 23       	and	r24, r24
     936:	f9 f0       	breq	.+62     	; 0x976 <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     938:	f8 01       	movw	r30, r16
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	89 2b       	or	r24, r25
     940:	51 f4       	brne	.+20     	; 0x956 <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     948:	84 81       	ldd	r24, Z+4	; 0x04
     94a:	95 81       	ldd	r25, Z+5	; 0x05
     94c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <xTaskPriorityInherit>
     950:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     956:	6c 81       	ldd	r22, Y+4	; 0x04
     958:	7d 81       	ldd	r23, Y+5	; 0x05
     95a:	c8 01       	movw	r24, r16
     95c:	41 96       	adiw	r24, 0x11	; 17
     95e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     962:	c8 01       	movw	r24, r16
     964:	0e 94 c0 02 	call	0x580	; 0x580 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     968:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
     96c:	81 11       	cpse	r24, r1
     96e:	92 cf       	rjmp	.-220    	; 0x894 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     970:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     974:	8f cf       	rjmp	.-226    	; 0x894 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     976:	c8 01       	movw	r24, r16
     978:	0e 94 c0 02 	call	0x580	; 0x580 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     97c:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
     980:	89 cf       	rjmp	.-238    	; 0x894 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     982:	c8 01       	movw	r24, r16
     984:	0e 94 c0 02 	call	0x580	; 0x580 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     988:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     98c:	c8 01       	movw	r24, r16
     98e:	0e 94 46 02 	call	0x48c	; 0x48c <prvIsQueueEmpty>
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <xQueueSemaphoreTake+0x124>
     996:	7e cf       	rjmp	.-260    	; 0x894 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to Check_Password it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     998:	ee 20       	and	r14, r14
     99a:	81 f0       	breq	.+32     	; 0x9bc <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     9a2:	c8 01       	movw	r24, r16
     9a4:	0e 94 36 02 	call	0x46c	; 0x46c <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     9a8:	68 2f       	mov	r22, r24
     9aa:	f8 01       	movw	r30, r16
     9ac:	84 81       	ldd	r24, Z+4	; 0x04
     9ae:	95 81       	ldd	r25, Z+5	; 0x05
     9b0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <xQueueSemaphoreTake+0x14a>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	08 95       	ret

000009d6 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     9d6:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     9da:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     9de:	80 81       	ld	r24, Z
     9e0:	81 11       	cpse	r24, r1
     9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <prvResetNextTaskUnblockTime+0x1c>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	9f ef       	ldi	r25, 0xFF	; 255
     9e8:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     9ec:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     9f0:	08 95       	ret
     9f2:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     9f6:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     9fa:	05 80       	ldd	r0, Z+5	; 0x05
     9fc:	f6 81       	ldd	r31, Z+6	; 0x06
     9fe:	e0 2d       	mov	r30, r0
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     a08:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     a0c:	08 95       	ret

00000a0e <prvDeleteTCB>:
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	ec 01       	movw	r28, r24
     a14:	8f 89       	ldd	r24, Y+23	; 0x17
     a16:	98 8d       	ldd	r25, Y+24	; 0x18
     a18:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <prvInitialiseNewTask>:
     a28:	6f 92       	push	r6
     a2a:	7f 92       	push	r7
     a2c:	8f 92       	push	r8
     a2e:	9f 92       	push	r9
     a30:	af 92       	push	r10
     a32:	bf 92       	push	r11
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	4c 01       	movw	r8, r24
     a48:	d5 01       	movw	r26, r10
     a4a:	57 96       	adiw	r26, 0x17	; 23
     a4c:	8d 91       	ld	r24, X+
     a4e:	9c 91       	ld	r25, X
     a50:	58 97       	sbiw	r26, 0x18	; 24
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	31 09       	sbc	r19, r1
     a56:	3c 01       	movw	r6, r24
     a58:	62 0e       	add	r6, r18
     a5a:	73 1e       	adc	r7, r19
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	89 f4       	brne	.+34     	; 0xa84 <prvInitialiseNewTask+0x5c>
     a62:	16 c0       	rjmp	.+44     	; 0xa90 <prvInitialiseNewTask+0x68>
     a64:	82 2f       	mov	r24, r18
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fb 01       	movw	r30, r22
     a6a:	e8 0f       	add	r30, r24
     a6c:	f9 1f       	adc	r31, r25
     a6e:	30 81       	ld	r19, Z
     a70:	d5 01       	movw	r26, r10
     a72:	a8 0f       	add	r26, r24
     a74:	b9 1f       	adc	r27, r25
     a76:	59 96       	adiw	r26, 0x19	; 25
     a78:	3c 93       	st	X, r19
     a7a:	80 81       	ld	r24, Z
     a7c:	88 23       	and	r24, r24
     a7e:	29 f0       	breq	.+10     	; 0xa8a <prvInitialiseNewTask+0x62>
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <prvInitialiseNewTask+0x5e>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	28 30       	cpi	r18, 0x08	; 8
     a88:	68 f3       	brcs	.-38     	; 0xa64 <prvInitialiseNewTask+0x3c>
     a8a:	f5 01       	movw	r30, r10
     a8c:	10 a2       	std	Z+32, r1	; 0x20
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <prvInitialiseNewTask+0x6e>
     a90:	d5 01       	movw	r26, r10
     a92:	59 96       	adiw	r26, 0x19	; 25
     a94:	1c 92       	st	X, r1
     a96:	b3 e0       	ldi	r27, 0x03	; 3
     a98:	be 15       	cp	r27, r14
     a9a:	20 f4       	brcc	.+8      	; 0xaa4 <prvInitialiseNewTask+0x7c>
     a9c:	0f 2e       	mov	r0, r31
     a9e:	f3 e0       	ldi	r31, 0x03	; 3
     aa0:	ef 2e       	mov	r14, r31
     aa2:	f0 2d       	mov	r31, r0
     aa4:	f5 01       	movw	r30, r10
     aa6:	e6 8a       	std	Z+22, r14	; 0x16
     aa8:	e1 a2       	std	Z+33, r14	; 0x21
     aaa:	12 a2       	std	Z+34, r1	; 0x22
     aac:	c5 01       	movw	r24, r10
     aae:	02 96       	adiw	r24, 0x02	; 2
     ab0:	0e 94 7e 00 	call	0xfc	; 0xfc <vListInitialiseItem>
     ab4:	c5 01       	movw	r24, r10
     ab6:	0c 96       	adiw	r24, 0x0c	; 12
     ab8:	0e 94 7e 00 	call	0xfc	; 0xfc <vListInitialiseItem>
     abc:	d5 01       	movw	r26, r10
     abe:	19 96       	adiw	r26, 0x09	; 9
     ac0:	bc 92       	st	X, r11
     ac2:	ae 92       	st	-X, r10
     ac4:	18 97       	sbiw	r26, 0x08	; 8
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	8e 19       	sub	r24, r14
     acc:	91 09       	sbc	r25, r1
     ace:	1d 96       	adiw	r26, 0x0d	; 13
     ad0:	9c 93       	st	X, r25
     ad2:	8e 93       	st	-X, r24
     ad4:	1c 97       	sbiw	r26, 0x0c	; 12
     ad6:	53 96       	adiw	r26, 0x13	; 19
     ad8:	bc 92       	st	X, r11
     ada:	ae 92       	st	-X, r10
     adc:	52 97       	sbiw	r26, 0x12	; 18
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	f5 01       	movw	r30, r10
     ae2:	b3 96       	adiw	r30, 0x23	; 35
     ae4:	df 01       	movw	r26, r30
     ae6:	1d 92       	st	X+, r1
     ae8:	8a 95       	dec	r24
     aea:	e9 f7       	brne	.-6      	; 0xae6 <prvInitialiseNewTask+0xbe>
     aec:	f5 01       	movw	r30, r10
     aee:	17 a2       	std	Z+39, r1	; 0x27
     af0:	a8 01       	movw	r20, r16
     af2:	b4 01       	movw	r22, r8
     af4:	c3 01       	movw	r24, r6
     af6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <pxPortInitialiseStack>
     afa:	d5 01       	movw	r26, r10
     afc:	8d 93       	st	X+, r24
     afe:	9c 93       	st	X, r25
     b00:	c1 14       	cp	r12, r1
     b02:	d1 04       	cpc	r13, r1
     b04:	19 f0       	breq	.+6      	; 0xb0c <prvInitialiseNewTask+0xe4>
     b06:	f6 01       	movw	r30, r12
     b08:	b1 82       	std	Z+1, r11	; 0x01
     b0a:	a0 82       	st	Z, r10
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	08 95       	ret

00000b28 <prvInitialiseTaskLists>:
     b28:	cf 93       	push	r28
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	10 c0       	rjmp	.+32     	; 0xb4e <prvInitialiseTaskLists+0x26>
     b2e:	8c 2f       	mov	r24, r28
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9c 01       	movw	r18, r24
     b34:	22 0f       	add	r18, r18
     b36:	33 1f       	adc	r19, r19
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	87 55       	subi	r24, 0x57	; 87
     b46:	9b 4f       	sbci	r25, 0xFB	; 251
     b48:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     b4c:	cf 5f       	subi	r28, 0xFF	; 255
     b4e:	c4 30       	cpi	r28, 0x04	; 4
     b50:	70 f3       	brcs	.-36     	; 0xb2e <prvInitialiseTaskLists+0x6>
     b52:	80 ea       	ldi	r24, 0xA0	; 160
     b54:	94 e0       	ldi	r25, 0x04	; 4
     b56:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     b5a:	87 e9       	ldi	r24, 0x97	; 151
     b5c:	94 e0       	ldi	r25, 0x04	; 4
     b5e:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     b62:	8a e8       	ldi	r24, 0x8A	; 138
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     b6a:	81 e8       	ldi	r24, 0x81	; 129
     b6c:	94 e0       	ldi	r25, 0x04	; 4
     b6e:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     b72:	87 e7       	ldi	r24, 0x77	; 119
     b74:	94 e0       	ldi	r25, 0x04	; 4
     b76:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     b7a:	80 ea       	ldi	r24, 0xA0	; 160
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <pxDelayedTaskList+0x1>
     b82:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <pxDelayedTaskList>
     b86:	87 e9       	ldi	r24, 0x97	; 151
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     b8e:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <pxOverflowDelayedTaskList>
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <prvAddNewTaskToReadyList>:
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	0f 92       	push	r0
     ba2:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <uxCurrentNumberOfTasks>
     bac:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     bb0:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     bb4:	89 2b       	or	r24, r25
     bb6:	59 f4       	brne	.+22     	; 0xbce <prvAddNewTaskToReadyList+0x38>
     bb8:	d0 93 ce 04 	sts	0x04CE, r29	; 0x8004ce <pxCurrentTCB+0x1>
     bbc:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <pxCurrentTCB>
     bc0:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	99 f4       	brne	.+38     	; 0xbee <prvAddNewTaskToReadyList+0x58>
     bc8:	0e 94 94 05 	call	0xb28	; 0xb28 <prvInitialiseTaskLists>
     bcc:	10 c0       	rjmp	.+32     	; 0xbee <prvAddNewTaskToReadyList+0x58>
     bce:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xSchedulerRunning>
     bd2:	81 11       	cpse	r24, r1
     bd4:	0c c0       	rjmp	.+24     	; 0xbee <prvAddNewTaskToReadyList+0x58>
     bd6:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     bda:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     bde:	96 89       	ldd	r25, Z+22	; 0x16
     be0:	8e 89       	ldd	r24, Y+22	; 0x16
     be2:	89 17       	cp	r24, r25
     be4:	20 f0       	brcs	.+8      	; 0xbee <prvAddNewTaskToReadyList+0x58>
     be6:	d0 93 ce 04 	sts	0x04CE, r29	; 0x8004ce <pxCurrentTCB+0x1>
     bea:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <pxCurrentTCB>
     bee:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <uxTaskNumber>
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <uxTaskNumber>
     bf8:	8e 89       	ldd	r24, Y+22	; 0x16
     bfa:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
     bfe:	98 17       	cp	r25, r24
     c00:	10 f4       	brcc	.+4      	; 0xc06 <prvAddNewTaskToReadyList+0x70>
     c02:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	fc 01       	movw	r30, r24
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	8e 0f       	add	r24, r30
     c18:	9f 1f       	adc	r25, r31
     c1a:	fc 01       	movw	r30, r24
     c1c:	e7 55       	subi	r30, 0x57	; 87
     c1e:	fb 4f       	sbci	r31, 0xFB	; 251
     c20:	01 80       	ldd	r0, Z+1	; 0x01
     c22:	f2 81       	ldd	r31, Z+2	; 0x02
     c24:	e0 2d       	mov	r30, r0
     c26:	fd 83       	std	Y+5, r31	; 0x05
     c28:	ec 83       	std	Y+4, r30	; 0x04
     c2a:	84 81       	ldd	r24, Z+4	; 0x04
     c2c:	95 81       	ldd	r25, Z+5	; 0x05
     c2e:	9f 83       	std	Y+7, r25	; 0x07
     c30:	8e 83       	std	Y+6, r24	; 0x06
     c32:	a4 81       	ldd	r26, Z+4	; 0x04
     c34:	b5 81       	ldd	r27, Z+5	; 0x05
     c36:	ce 01       	movw	r24, r28
     c38:	02 96       	adiw	r24, 0x02	; 2
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	95 83       	std	Z+5, r25	; 0x05
     c44:	84 83       	std	Z+4, r24	; 0x04
     c46:	ee 89       	ldd	r30, Y+22	; 0x16
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	cf 01       	movw	r24, r30
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	e7 55       	subi	r30, 0x57	; 87
     c5e:	fb 4f       	sbci	r31, 0xFB	; 251
     c60:	fb 87       	std	Y+11, r31	; 0x0b
     c62:	ea 87       	std	Y+10, r30	; 0x0a
     c64:	80 81       	ld	r24, Z
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	80 83       	st	Z, r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xSchedulerRunning>
     c72:	88 23       	and	r24, r24
     c74:	51 f0       	breq	.+20     	; 0xc8a <prvAddNewTaskToReadyList+0xf4>
     c76:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     c7a:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     c7e:	96 89       	ldd	r25, Z+22	; 0x16
     c80:	8e 89       	ldd	r24, Y+22	; 0x16
     c82:	98 17       	cp	r25, r24
     c84:	10 f4       	brcc	.+4      	; 0xc8a <prvAddNewTaskToReadyList+0xf4>
     c86:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <prvCheckTasksWaitingTermination>:
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	1c c0       	rjmp	.+56     	; 0xcce <prvCheckTasksWaitingTermination+0x3e>
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	0f 92       	push	r0
     c9c:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <xTasksWaitingTermination+0x5>
     ca0:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <xTasksWaitingTermination+0x6>
     ca4:	c6 81       	ldd	r28, Z+6	; 0x06
     ca6:	d7 81       	ldd	r29, Z+7	; 0x07
     ca8:	ce 01       	movw	r24, r28
     caa:	02 96       	adiw	r24, 0x02	; 2
     cac:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
     cb0:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
     cb4:	81 50       	subi	r24, 0x01	; 1
     cb6:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <uxCurrentNumberOfTasks>
     cba:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	ce 01       	movw	r24, r28
     cca:	0e 94 07 05 	call	0xa0e	; 0xa0e <prvDeleteTCB>
     cce:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <uxDeletedTasksWaitingCleanUp>
     cd2:	81 11       	cpse	r24, r1
     cd4:	e0 cf       	rjmp	.-64     	; 0xc96 <prvCheckTasksWaitingTermination+0x6>
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <prvIdleTask>:
     cdc:	0e 94 48 06 	call	0xc90	; 0xc90 <prvCheckTasksWaitingTermination>
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <prvIdleTask>

00000ce2 <prvAddCurrentTaskToDelayedList>:
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	f6 2e       	mov	r15, r22
     cf0:	00 91 74 04 	lds	r16, 0x0474	; 0x800474 <xTickCount>
     cf4:	10 91 75 04 	lds	r17, 0x0475	; 0x800475 <xTickCount+0x1>
     cf8:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     cfc:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d00:	02 96       	adiw	r24, 0x02	; 2
     d02:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
     d06:	cf 3f       	cpi	r28, 0xFF	; 255
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	d8 07       	cpc	r29, r24
     d0c:	b1 f5       	brne	.+108    	; 0xd7a <prvAddCurrentTaskToDelayedList+0x98>
     d0e:	ff 20       	and	r15, r15
     d10:	a1 f1       	breq	.+104    	; 0xd7a <prvAddCurrentTaskToDelayedList+0x98>
     d12:	e7 e7       	ldi	r30, 0x77	; 119
     d14:	f4 e0       	ldi	r31, 0x04	; 4
     d16:	a1 81       	ldd	r26, Z+1	; 0x01
     d18:	b2 81       	ldd	r27, Z+2	; 0x02
     d1a:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d1e:	d0 91 ce 04 	lds	r29, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d22:	bd 83       	std	Y+5, r27	; 0x05
     d24:	ac 83       	std	Y+4, r26	; 0x04
     d26:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d2a:	d0 91 ce 04 	lds	r29, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d2e:	14 96       	adiw	r26, 0x04	; 4
     d30:	8d 91       	ld	r24, X+
     d32:	9c 91       	ld	r25, X
     d34:	15 97       	sbiw	r26, 0x05	; 5
     d36:	9f 83       	std	Y+7, r25	; 0x07
     d38:	8e 83       	std	Y+6, r24	; 0x06
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	cd 91       	ld	r28, X+
     d3e:	dc 91       	ld	r29, X
     d40:	15 97       	sbiw	r26, 0x05	; 5
     d42:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d46:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d4a:	02 96       	adiw	r24, 0x02	; 2
     d4c:	9b 83       	std	Y+3, r25	; 0x03
     d4e:	8a 83       	std	Y+2, r24	; 0x02
     d50:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d54:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d58:	02 96       	adiw	r24, 0x02	; 2
     d5a:	15 96       	adiw	r26, 0x05	; 5
     d5c:	9c 93       	st	X, r25
     d5e:	8e 93       	st	-X, r24
     d60:	14 97       	sbiw	r26, 0x04	; 4
     d62:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d66:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d6a:	1b 96       	adiw	r26, 0x0b	; 11
     d6c:	fc 93       	st	X, r31
     d6e:	ee 93       	st	-X, r30
     d70:	1a 97       	sbiw	r26, 0x0a	; 10
     d72:	80 81       	ld	r24, Z
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 83       	st	Z, r24
     d78:	2f c0       	rjmp	.+94     	; 0xdd8 <prvAddCurrentTaskToDelayedList+0xf6>
     d7a:	c0 0f       	add	r28, r16
     d7c:	d1 1f       	adc	r29, r17
     d7e:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d82:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d86:	d3 83       	std	Z+3, r29	; 0x03
     d88:	c2 83       	std	Z+2, r28	; 0x02
     d8a:	c0 17       	cp	r28, r16
     d8c:	d1 07       	cpc	r29, r17
     d8e:	68 f4       	brcc	.+26     	; 0xdaa <prvAddCurrentTaskToDelayedList+0xc8>
     d90:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
     d94:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     d98:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <pxOverflowDelayedTaskList>
     d9c:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     da0:	6e 5f       	subi	r22, 0xFE	; 254
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	0e 94 82 00 	call	0x104	; 0x104 <vListInsert>
     da8:	17 c0       	rjmp	.+46     	; 0xdd8 <prvAddCurrentTaskToDelayedList+0xf6>
     daa:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
     dae:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
     db2:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <pxDelayedTaskList>
     db6:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     dba:	6e 5f       	subi	r22, 0xFE	; 254
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
     dbe:	0e 94 82 00 	call	0x104	; 0x104 <vListInsert>
     dc2:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <xNextTaskUnblockTime>
     dc6:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <xNextTaskUnblockTime+0x1>
     dca:	c8 17       	cp	r28, r24
     dcc:	d9 07       	cpc	r29, r25
     dce:	20 f4       	brcc	.+8      	; 0xdd8 <prvAddCurrentTaskToDelayedList+0xf6>
     dd0:	d0 93 6c 04 	sts	0x046C, r29	; 0x80046c <xNextTaskUnblockTime+0x1>
     dd4:	c0 93 6b 04 	sts	0x046B, r28	; 0x80046b <xNextTaskUnblockTime>
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	08 95       	ret

00000de4 <xTaskCreate>:
     de4:	2f 92       	push	r2
     de6:	3f 92       	push	r3
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	6f 92       	push	r6
     dee:	7f 92       	push	r7
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	3c 01       	movw	r6, r24
     e0a:	1b 01       	movw	r2, r22
     e0c:	5a 01       	movw	r10, r20
     e0e:	29 01       	movw	r4, r18
     e10:	ca 01       	movw	r24, r20
     e12:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     e16:	6c 01       	movw	r12, r24
     e18:	89 2b       	or	r24, r25
     e1a:	71 f0       	breq	.+28     	; 0xe38 <xTaskCreate+0x54>
     e1c:	88 e2       	ldi	r24, 0x28	; 40
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     e24:	ec 01       	movw	r28, r24
     e26:	89 2b       	or	r24, r25
     e28:	19 f0       	breq	.+6      	; 0xe30 <xTaskCreate+0x4c>
     e2a:	d8 8e       	std	Y+24, r13	; 0x18
     e2c:	cf 8a       	std	Y+23, r12	; 0x17
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <xTaskCreate+0x58>
     e30:	c6 01       	movw	r24, r12
     e32:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <xTaskCreate+0x58>
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	d0 e0       	ldi	r29, 0x00	; 0
     e3c:	20 97       	sbiw	r28, 0x00	; 0
     e3e:	91 f0       	breq	.+36     	; 0xe64 <xTaskCreate+0x80>
     e40:	95 01       	movw	r18, r10
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	81 2c       	mov	r8, r1
     e48:	91 2c       	mov	r9, r1
     e4a:	5e 01       	movw	r10, r28
     e4c:	67 01       	movw	r12, r14
     e4e:	e0 2e       	mov	r14, r16
     e50:	82 01       	movw	r16, r4
     e52:	b1 01       	movw	r22, r2
     e54:	c3 01       	movw	r24, r6
     e56:	0e 94 14 05 	call	0xa28	; 0xa28 <prvInitialiseNewTask>
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvAddNewTaskToReadyList>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <xTaskCreate+0x82>
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	7f 90       	pop	r7
     e80:	6f 90       	pop	r6
     e82:	5f 90       	pop	r5
     e84:	4f 90       	pop	r4
     e86:	3f 90       	pop	r3
     e88:	2f 90       	pop	r2
     e8a:	08 95       	ret

00000e8c <vTaskStartScheduler>:
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	0f 2e       	mov	r0, r31
     e94:	f9 e6       	ldi	r31, 0x69	; 105
     e96:	ef 2e       	mov	r14, r31
     e98:	f4 e0       	ldi	r31, 0x04	; 4
     e9a:	ff 2e       	mov	r15, r31
     e9c:	f0 2d       	mov	r31, r0
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	46 e4       	ldi	r20, 0x46	; 70
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	61 e6       	ldi	r22, 0x61	; 97
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	8e e6       	ldi	r24, 0x6E	; 110
     eae:	96 e0       	ldi	r25, 0x06	; 6
     eb0:	0e 94 f2 06 	call	0xde4	; 0xde4 <xTaskCreate>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	81 f4       	brne	.+32     	; 0xed8 <vTaskStartScheduler+0x4c>
     eb8:	f8 94       	cli
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	9f ef       	ldi	r25, 0xFF	; 255
     ebe:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <xNextTaskUnblockTime+0x1>
     ec2:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <xNextTaskUnblockTime>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <xSchedulerRunning>
     ecc:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <xTickCount+0x1>
     ed0:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <xTickCount>
     ed4:	0e 94 4f 01 	call	0x29e	; 0x29e <xPortStartScheduler>
     ed8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret

00000ee4 <vTaskSuspendAll>:
     ee4:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <uxSchedulerSuspended>
     eee:	08 95       	ret

00000ef0 <xTaskIncrementTick>:
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
     efc:	81 11       	cpse	r24, r1
     efe:	01 c1       	rjmp	.+514    	; 0x1102 <xTaskIncrementTick+0x212>
     f00:	c0 91 74 04 	lds	r28, 0x0474	; 0x800474 <xTickCount>
     f04:	d0 91 75 04 	lds	r29, 0x0475	; 0x800475 <xTickCount+0x1>
     f08:	8e 01       	movw	r16, r28
     f0a:	0f 5f       	subi	r16, 0xFF	; 255
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	10 93 75 04 	sts	0x0475, r17	; 0x800475 <xTickCount+0x1>
     f12:	00 93 74 04 	sts	0x0474, r16	; 0x800474 <xTickCount>
     f16:	01 15       	cp	r16, r1
     f18:	11 05       	cpc	r17, r1
     f1a:	b9 f4       	brne	.+46     	; 0xf4a <xTaskIncrementTick+0x5a>
     f1c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <pxDelayedTaskList>
     f20:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f24:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <pxOverflowDelayedTaskList>
     f28:	30 91 94 04 	lds	r19, 0x0494	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     f2c:	30 93 96 04 	sts	0x0496, r19	; 0x800496 <pxDelayedTaskList+0x1>
     f30:	20 93 95 04 	sts	0x0495, r18	; 0x800495 <pxDelayedTaskList>
     f34:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <pxOverflowDelayedTaskList+0x1>
     f38:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <pxOverflowDelayedTaskList>
     f3c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <xNumOfOverflows>
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <xNumOfOverflows>
     f46:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <prvResetNextTaskUnblockTime>
     f4a:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <xNextTaskUnblockTime>
     f4e:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <xNextTaskUnblockTime+0x1>
     f52:	08 17       	cp	r16, r24
     f54:	19 07       	cpc	r17, r25
     f56:	20 f4       	brcc	.+8      	; 0xf60 <xTaskIncrementTick+0x70>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	b8 c0       	rjmp	.+368    	; 0x10cc <xTaskIncrementTick+0x1dc>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <xTaskIncrementTick+0x72>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     f66:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f6a:	90 81       	ld	r25, Z
     f6c:	91 11       	cpse	r25, r1
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <xTaskIncrementTick+0x8e>
     f70:	2f ef       	ldi	r18, 0xFF	; 255
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <xNextTaskUnblockTime+0x1>
     f78:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <xNextTaskUnblockTime>
     f7c:	a7 c0       	rjmp	.+334    	; 0x10cc <xTaskIncrementTick+0x1dc>
     f7e:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <pxDelayedTaskList>
     f82:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <pxDelayedTaskList+0x1>
     f86:	05 80       	ldd	r0, Z+5	; 0x05
     f88:	f6 81       	ldd	r31, Z+6	; 0x06
     f8a:	e0 2d       	mov	r30, r0
     f8c:	06 80       	ldd	r0, Z+6	; 0x06
     f8e:	f7 81       	ldd	r31, Z+7	; 0x07
     f90:	e0 2d       	mov	r30, r0
     f92:	22 81       	ldd	r18, Z+2	; 0x02
     f94:	33 81       	ldd	r19, Z+3	; 0x03
     f96:	02 17       	cp	r16, r18
     f98:	13 07       	cpc	r17, r19
     f9a:	28 f4       	brcc	.+10     	; 0xfa6 <xTaskIncrementTick+0xb6>
     f9c:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <xNextTaskUnblockTime+0x1>
     fa0:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <xNextTaskUnblockTime>
     fa4:	93 c0       	rjmp	.+294    	; 0x10cc <xTaskIncrementTick+0x1dc>
     fa6:	a2 85       	ldd	r26, Z+10	; 0x0a
     fa8:	b3 85       	ldd	r27, Z+11	; 0x0b
     faa:	24 81       	ldd	r18, Z+4	; 0x04
     fac:	35 81       	ldd	r19, Z+5	; 0x05
     fae:	46 81       	ldd	r20, Z+6	; 0x06
     fb0:	57 81       	ldd	r21, Z+7	; 0x07
     fb2:	e9 01       	movw	r28, r18
     fb4:	5d 83       	std	Y+5, r21	; 0x05
     fb6:	4c 83       	std	Y+4, r20	; 0x04
     fb8:	26 81       	ldd	r18, Z+6	; 0x06
     fba:	37 81       	ldd	r19, Z+7	; 0x07
     fbc:	44 81       	ldd	r20, Z+4	; 0x04
     fbe:	55 81       	ldd	r21, Z+5	; 0x05
     fc0:	e9 01       	movw	r28, r18
     fc2:	5b 83       	std	Y+3, r21	; 0x03
     fc4:	4a 83       	std	Y+2, r20	; 0x02
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	2d 91       	ld	r18, X+
     fca:	3c 91       	ld	r19, X
     fcc:	12 97       	sbiw	r26, 0x02	; 2
     fce:	af 01       	movw	r20, r30
     fd0:	4e 5f       	subi	r20, 0xFE	; 254
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	24 17       	cp	r18, r20
     fd6:	35 07       	cpc	r19, r21
     fd8:	31 f4       	brne	.+12     	; 0xfe6 <xTaskIncrementTick+0xf6>
     fda:	26 81       	ldd	r18, Z+6	; 0x06
     fdc:	37 81       	ldd	r19, Z+7	; 0x07
     fde:	12 96       	adiw	r26, 0x02	; 2
     fe0:	3c 93       	st	X, r19
     fe2:	2e 93       	st	-X, r18
     fe4:	11 97       	sbiw	r26, 0x01	; 1
     fe6:	13 86       	std	Z+11, r1	; 0x0b
     fe8:	12 86       	std	Z+10, r1	; 0x0a
     fea:	9c 91       	ld	r25, X
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	9c 93       	st	X, r25
     ff0:	a4 89       	ldd	r26, Z+20	; 0x14
     ff2:	b5 89       	ldd	r27, Z+21	; 0x15
     ff4:	10 97       	sbiw	r26, 0x00	; 0
     ff6:	19 f1       	breq	.+70     	; 0x103e <xTaskIncrementTick+0x14e>
     ff8:	26 85       	ldd	r18, Z+14	; 0x0e
     ffa:	37 85       	ldd	r19, Z+15	; 0x0f
     ffc:	60 89       	ldd	r22, Z+16	; 0x10
     ffe:	71 89       	ldd	r23, Z+17	; 0x11
    1000:	e9 01       	movw	r28, r18
    1002:	7d 83       	std	Y+5, r23	; 0x05
    1004:	6c 83       	std	Y+4, r22	; 0x04
    1006:	20 89       	ldd	r18, Z+16	; 0x10
    1008:	31 89       	ldd	r19, Z+17	; 0x11
    100a:	66 85       	ldd	r22, Z+14	; 0x0e
    100c:	77 85       	ldd	r23, Z+15	; 0x0f
    100e:	e9 01       	movw	r28, r18
    1010:	7b 83       	std	Y+3, r23	; 0x03
    1012:	6a 83       	std	Y+2, r22	; 0x02
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	6d 91       	ld	r22, X+
    1018:	7c 91       	ld	r23, X
    101a:	12 97       	sbiw	r26, 0x02	; 2
    101c:	9f 01       	movw	r18, r30
    101e:	24 5f       	subi	r18, 0xF4	; 244
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	62 17       	cp	r22, r18
    1024:	73 07       	cpc	r23, r19
    1026:	31 f4       	brne	.+12     	; 0x1034 <xTaskIncrementTick+0x144>
    1028:	20 89       	ldd	r18, Z+16	; 0x10
    102a:	31 89       	ldd	r19, Z+17	; 0x11
    102c:	12 96       	adiw	r26, 0x02	; 2
    102e:	3c 93       	st	X, r19
    1030:	2e 93       	st	-X, r18
    1032:	11 97       	sbiw	r26, 0x01	; 1
    1034:	15 8a       	std	Z+21, r1	; 0x15
    1036:	14 8a       	std	Z+20, r1	; 0x14
    1038:	9c 91       	ld	r25, X
    103a:	91 50       	subi	r25, 0x01	; 1
    103c:	9c 93       	st	X, r25
    103e:	26 89       	ldd	r18, Z+22	; 0x16
    1040:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1044:	92 17       	cp	r25, r18
    1046:	10 f4       	brcc	.+4      	; 0x104c <xTaskIncrementTick+0x15c>
    1048:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <uxTopReadyPriority>
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	d9 01       	movw	r26, r18
    1050:	aa 0f       	add	r26, r26
    1052:	bb 1f       	adc	r27, r27
    1054:	aa 0f       	add	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	aa 0f       	add	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	2a 0f       	add	r18, r26
    105e:	3b 1f       	adc	r19, r27
    1060:	d9 01       	movw	r26, r18
    1062:	a7 55       	subi	r26, 0x57	; 87
    1064:	bb 4f       	sbci	r27, 0xFB	; 251
    1066:	11 96       	adiw	r26, 0x01	; 1
    1068:	0d 90       	ld	r0, X+
    106a:	bc 91       	ld	r27, X
    106c:	a0 2d       	mov	r26, r0
    106e:	b5 83       	std	Z+5, r27	; 0x05
    1070:	a4 83       	std	Z+4, r26	; 0x04
    1072:	14 96       	adiw	r26, 0x04	; 4
    1074:	2d 91       	ld	r18, X+
    1076:	3c 91       	ld	r19, X
    1078:	15 97       	sbiw	r26, 0x05	; 5
    107a:	37 83       	std	Z+7, r19	; 0x07
    107c:	26 83       	std	Z+6, r18	; 0x06
    107e:	14 96       	adiw	r26, 0x04	; 4
    1080:	2d 91       	ld	r18, X+
    1082:	3c 91       	ld	r19, X
    1084:	15 97       	sbiw	r26, 0x05	; 5
    1086:	e9 01       	movw	r28, r18
    1088:	5b 83       	std	Y+3, r21	; 0x03
    108a:	4a 83       	std	Y+2, r20	; 0x02
    108c:	15 96       	adiw	r26, 0x05	; 5
    108e:	5c 93       	st	X, r21
    1090:	4e 93       	st	-X, r20
    1092:	14 97       	sbiw	r26, 0x04	; 4
    1094:	a6 89       	ldd	r26, Z+22	; 0x16
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	9d 01       	movw	r18, r26
    109a:	22 0f       	add	r18, r18
    109c:	33 1f       	adc	r19, r19
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	a2 0f       	add	r26, r18
    10a8:	b3 1f       	adc	r27, r19
    10aa:	a7 55       	subi	r26, 0x57	; 87
    10ac:	bb 4f       	sbci	r27, 0xFB	; 251
    10ae:	b3 87       	std	Z+11, r27	; 0x0b
    10b0:	a2 87       	std	Z+10, r26	; 0x0a
    10b2:	9c 91       	ld	r25, X
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	9c 93       	st	X, r25
    10b8:	26 89       	ldd	r18, Z+22	; 0x16
    10ba:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    10be:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    10c2:	96 89       	ldd	r25, Z+22	; 0x16
    10c4:	29 17       	cp	r18, r25
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <xTaskIncrementTick+0x1da>
    10c8:	49 cf       	rjmp	.-366    	; 0xf5c <xTaskIncrementTick+0x6c>
    10ca:	4b cf       	rjmp	.-362    	; 0xf62 <xTaskIncrementTick+0x72>
    10cc:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    10d0:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    10d4:	26 89       	ldd	r18, Z+22	; 0x16
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	f9 01       	movw	r30, r18
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	2e 0f       	add	r18, r30
    10e8:	3f 1f       	adc	r19, r31
    10ea:	f9 01       	movw	r30, r18
    10ec:	e7 55       	subi	r30, 0x57	; 87
    10ee:	fb 4f       	sbci	r31, 0xFB	; 251
    10f0:	90 81       	ld	r25, Z
    10f2:	92 30       	cpi	r25, 0x02	; 2
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <xTaskIncrementTick+0x208>
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <xYieldPending>
    10fc:	91 11       	cpse	r25, r1
    10fe:	0c c0       	rjmp	.+24     	; 0x1118 <xTaskIncrementTick+0x228>
    1100:	0c c0       	rjmp	.+24     	; 0x111a <xTaskIncrementTick+0x22a>
    1102:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <xPendedTicks>
    1106:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <xPendedTicks+0x1>
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <xPendedTicks+0x1>
    1110:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <xPendedTicks>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	01 c0       	rjmp	.+2      	; 0x111a <xTaskIncrementTick+0x22a>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <xTaskResumeAll>:
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	0f 92       	push	r0
    112e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <uxSchedulerSuspended>
    1138:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    113c:	81 11       	cpse	r24, r1
    113e:	bf c0       	rjmp	.+382    	; 0x12be <xTaskResumeAll+0x19a>
    1140:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uxCurrentNumberOfTasks>
    1144:	81 11       	cpse	r24, r1
    1146:	96 c0       	rjmp	.+300    	; 0x1274 <xTaskResumeAll+0x150>
    1148:	bd c0       	rjmp	.+378    	; 0x12c4 <xTaskResumeAll+0x1a0>
    114a:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <xPendingReadyList+0x5>
    114e:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <xPendingReadyList+0x6>
    1152:	06 80       	ldd	r0, Z+6	; 0x06
    1154:	f7 81       	ldd	r31, Z+7	; 0x07
    1156:	e0 2d       	mov	r30, r0
    1158:	a4 89       	ldd	r26, Z+20	; 0x14
    115a:	b5 89       	ldd	r27, Z+21	; 0x15
    115c:	c6 85       	ldd	r28, Z+14	; 0x0e
    115e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1160:	80 89       	ldd	r24, Z+16	; 0x10
    1162:	91 89       	ldd	r25, Z+17	; 0x11
    1164:	9d 83       	std	Y+5, r25	; 0x05
    1166:	8c 83       	std	Y+4, r24	; 0x04
    1168:	c0 89       	ldd	r28, Z+16	; 0x10
    116a:	d1 89       	ldd	r29, Z+17	; 0x11
    116c:	86 85       	ldd	r24, Z+14	; 0x0e
    116e:	97 85       	ldd	r25, Z+15	; 0x0f
    1170:	9b 83       	std	Y+3, r25	; 0x03
    1172:	8a 83       	std	Y+2, r24	; 0x02
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	2d 91       	ld	r18, X+
    1178:	3c 91       	ld	r19, X
    117a:	12 97       	sbiw	r26, 0x02	; 2
    117c:	cf 01       	movw	r24, r30
    117e:	0c 96       	adiw	r24, 0x0c	; 12
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	31 f4       	brne	.+12     	; 0x1192 <xTaskResumeAll+0x6e>
    1186:	80 89       	ldd	r24, Z+16	; 0x10
    1188:	91 89       	ldd	r25, Z+17	; 0x11
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	9c 93       	st	X, r25
    118e:	8e 93       	st	-X, r24
    1190:	11 97       	sbiw	r26, 0x01	; 1
    1192:	15 8a       	std	Z+21, r1	; 0x15
    1194:	14 8a       	std	Z+20, r1	; 0x14
    1196:	8c 91       	ld	r24, X
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	8c 93       	st	X, r24
    119c:	a2 85       	ldd	r26, Z+10	; 0x0a
    119e:	b3 85       	ldd	r27, Z+11	; 0x0b
    11a0:	c4 81       	ldd	r28, Z+4	; 0x04
    11a2:	d5 81       	ldd	r29, Z+5	; 0x05
    11a4:	86 81       	ldd	r24, Z+6	; 0x06
    11a6:	97 81       	ldd	r25, Z+7	; 0x07
    11a8:	9d 83       	std	Y+5, r25	; 0x05
    11aa:	8c 83       	std	Y+4, r24	; 0x04
    11ac:	c6 81       	ldd	r28, Z+6	; 0x06
    11ae:	d7 81       	ldd	r29, Z+7	; 0x07
    11b0:	84 81       	ldd	r24, Z+4	; 0x04
    11b2:	95 81       	ldd	r25, Z+5	; 0x05
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	8d 91       	ld	r24, X+
    11bc:	9c 91       	ld	r25, X
    11be:	12 97       	sbiw	r26, 0x02	; 2
    11c0:	9f 01       	movw	r18, r30
    11c2:	2e 5f       	subi	r18, 0xFE	; 254
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	82 17       	cp	r24, r18
    11c8:	93 07       	cpc	r25, r19
    11ca:	31 f4       	brne	.+12     	; 0x11d8 <xTaskResumeAll+0xb4>
    11cc:	86 81       	ldd	r24, Z+6	; 0x06
    11ce:	97 81       	ldd	r25, Z+7	; 0x07
    11d0:	12 96       	adiw	r26, 0x02	; 2
    11d2:	9c 93       	st	X, r25
    11d4:	8e 93       	st	-X, r24
    11d6:	11 97       	sbiw	r26, 0x01	; 1
    11d8:	13 86       	std	Z+11, r1	; 0x0b
    11da:	12 86       	std	Z+10, r1	; 0x0a
    11dc:	8c 91       	ld	r24, X
    11de:	81 50       	subi	r24, 0x01	; 1
    11e0:	8c 93       	st	X, r24
    11e2:	86 89       	ldd	r24, Z+22	; 0x16
    11e4:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    11e8:	98 17       	cp	r25, r24
    11ea:	10 f4       	brcc	.+4      	; 0x11f0 <xTaskResumeAll+0xcc>
    11ec:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	dc 01       	movw	r26, r24
    11f4:	aa 0f       	add	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	aa 0f       	add	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	aa 0f       	add	r26, r26
    11fe:	bb 1f       	adc	r27, r27
    1200:	8a 0f       	add	r24, r26
    1202:	9b 1f       	adc	r25, r27
    1204:	dc 01       	movw	r26, r24
    1206:	a7 55       	subi	r26, 0x57	; 87
    1208:	bb 4f       	sbci	r27, 0xFB	; 251
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	0d 90       	ld	r0, X+
    120e:	bc 91       	ld	r27, X
    1210:	a0 2d       	mov	r26, r0
    1212:	b5 83       	std	Z+5, r27	; 0x05
    1214:	a4 83       	std	Z+4, r26	; 0x04
    1216:	14 96       	adiw	r26, 0x04	; 4
    1218:	8d 91       	ld	r24, X+
    121a:	9c 91       	ld	r25, X
    121c:	15 97       	sbiw	r26, 0x05	; 5
    121e:	97 83       	std	Z+7, r25	; 0x07
    1220:	86 83       	std	Z+6, r24	; 0x06
    1222:	14 96       	adiw	r26, 0x04	; 4
    1224:	cd 91       	ld	r28, X+
    1226:	dc 91       	ld	r29, X
    1228:	15 97       	sbiw	r26, 0x05	; 5
    122a:	3b 83       	std	Y+3, r19	; 0x03
    122c:	2a 83       	std	Y+2, r18	; 0x02
    122e:	15 96       	adiw	r26, 0x05	; 5
    1230:	3c 93       	st	X, r19
    1232:	2e 93       	st	-X, r18
    1234:	14 97       	sbiw	r26, 0x04	; 4
    1236:	a6 89       	ldd	r26, Z+22	; 0x16
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	cd 01       	movw	r24, r26
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	a8 0f       	add	r26, r24
    124a:	b9 1f       	adc	r27, r25
    124c:	a7 55       	subi	r26, 0x57	; 87
    124e:	bb 4f       	sbci	r27, 0xFB	; 251
    1250:	b3 87       	std	Z+11, r27	; 0x0b
    1252:	a2 87       	std	Z+10, r26	; 0x0a
    1254:	8c 91       	ld	r24, X
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8c 93       	st	X, r24
    125a:	96 89       	ldd	r25, Z+22	; 0x16
    125c:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1260:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1264:	56 96       	adiw	r26, 0x16	; 22
    1266:	8c 91       	ld	r24, X
    1268:	98 17       	cp	r25, r24
    126a:	30 f0       	brcs	.+12     	; 0x1278 <xTaskResumeAll+0x154>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <xTaskResumeAll+0x154>
    1274:	e0 e0       	ldi	r30, 0x00	; 0
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <xPendingReadyList>
    127c:	81 11       	cpse	r24, r1
    127e:	65 cf       	rjmp	.-310    	; 0x114a <xTaskResumeAll+0x26>
    1280:	ef 2b       	or	r30, r31
    1282:	11 f0       	breq	.+4      	; 0x1288 <xTaskResumeAll+0x164>
    1284:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <prvResetNextTaskUnblockTime>
    1288:	c0 91 70 04 	lds	r28, 0x0470	; 0x800470 <xPendedTicks>
    128c:	d0 91 71 04 	lds	r29, 0x0471	; 0x800471 <xPendedTicks+0x1>
    1290:	20 97       	sbiw	r28, 0x00	; 0
    1292:	69 f0       	breq	.+26     	; 0x12ae <xTaskResumeAll+0x18a>
    1294:	0e 94 78 07 	call	0xef0	; 0xef0 <xTaskIncrementTick>
    1298:	88 23       	and	r24, r24
    129a:	19 f0       	breq	.+6      	; 0x12a2 <xTaskResumeAll+0x17e>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    12a2:	21 97       	sbiw	r28, 0x01	; 1
    12a4:	b9 f7       	brne	.-18     	; 0x1294 <xTaskResumeAll+0x170>
    12a6:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <xPendedTicks+0x1>
    12aa:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <xPendedTicks>
    12ae:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <xYieldPending>
    12b2:	88 23       	and	r24, r24
    12b4:	31 f0       	breq	.+12     	; 0x12c2 <xTaskResumeAll+0x19e>
    12b6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <xTaskResumeAll+0x1a0>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <xTaskResumeAll+0x1a0>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <vTaskDelay>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
    12d4:	89 2b       	or	r24, r25
    12d6:	49 f0       	breq	.+18     	; 0x12ea <vTaskDelay+0x1c>
    12d8:	0e 94 72 07 	call	0xee4	; 0xee4 <vTaskSuspendAll>
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 71 06 	call	0xce2	; 0xce2 <prvAddCurrentTaskToDelayedList>
    12e4:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskResumeAll>
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <vTaskDelay+0x1e>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	81 11       	cpse	r24, r1
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vTaskDelay+0x26>
    12f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <vTaskSwitchContext>:
    12fa:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    12fe:	88 23       	and	r24, r24
    1300:	21 f0       	breq	.+8      	; 0x130a <vTaskSwitchContext+0x10>
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    1308:	08 95       	ret
    130a:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <xYieldPending>
    130e:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <uxTopReadyPriority>
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <vTaskSwitchContext+0x1c>
    1314:	21 50       	subi	r18, 0x01	; 1
    1316:	82 2f       	mov	r24, r18
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	fc 01       	movw	r30, r24
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	e8 0f       	add	r30, r24
    132a:	f9 1f       	adc	r31, r25
    132c:	e7 55       	subi	r30, 0x57	; 87
    132e:	fb 4f       	sbci	r31, 0xFB	; 251
    1330:	30 81       	ld	r19, Z
    1332:	33 23       	and	r19, r19
    1334:	79 f3       	breq	.-34     	; 0x1314 <vTaskSwitchContext+0x1a>
    1336:	ac 01       	movw	r20, r24
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	44 0f       	add	r20, r20
    1342:	55 1f       	adc	r21, r21
    1344:	48 0f       	add	r20, r24
    1346:	59 1f       	adc	r21, r25
    1348:	df 01       	movw	r26, r30
    134a:	01 80       	ldd	r0, Z+1	; 0x01
    134c:	f2 81       	ldd	r31, Z+2	; 0x02
    134e:	e0 2d       	mov	r30, r0
    1350:	02 80       	ldd	r0, Z+2	; 0x02
    1352:	f3 81       	ldd	r31, Z+3	; 0x03
    1354:	e0 2d       	mov	r30, r0
    1356:	12 96       	adiw	r26, 0x02	; 2
    1358:	fc 93       	st	X, r31
    135a:	ee 93       	st	-X, r30
    135c:	11 97       	sbiw	r26, 0x01	; 1
    135e:	44 55       	subi	r20, 0x54	; 84
    1360:	5b 4f       	sbci	r21, 0xFB	; 251
    1362:	e4 17       	cp	r30, r20
    1364:	f5 07       	cpc	r31, r21
    1366:	29 f4       	brne	.+10     	; 0x1372 <vTaskSwitchContext+0x78>
    1368:	42 81       	ldd	r20, Z+2	; 0x02
    136a:	53 81       	ldd	r21, Z+3	; 0x03
    136c:	fd 01       	movw	r30, r26
    136e:	52 83       	std	Z+2, r21	; 0x02
    1370:	41 83       	std	Z+1, r20	; 0x01
    1372:	fc 01       	movw	r30, r24
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	8e 0f       	add	r24, r30
    1382:	9f 1f       	adc	r25, r31
    1384:	fc 01       	movw	r30, r24
    1386:	e7 55       	subi	r30, 0x57	; 87
    1388:	fb 4f       	sbci	r31, 0xFB	; 251
    138a:	01 80       	ldd	r0, Z+1	; 0x01
    138c:	f2 81       	ldd	r31, Z+2	; 0x02
    138e:	e0 2d       	mov	r30, r0
    1390:	86 81       	ldd	r24, Z+6	; 0x06
    1392:	97 81       	ldd	r25, Z+7	; 0x07
    1394:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <pxCurrentTCB+0x1>
    1398:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <pxCurrentTCB>
    139c:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <uxTopReadyPriority>
    13a0:	08 95       	ret

000013a2 <vTaskPlaceOnEventList>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	eb 01       	movw	r28, r22
    13a8:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <pxCurrentTCB>
    13ac:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    13b0:	64 5f       	subi	r22, 0xF4	; 244
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	0e 94 82 00 	call	0x104	; 0x104 <vListInsert>
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 71 06 	call	0xce2	; 0xce2 <prvAddCurrentTaskToDelayedList>
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <xTaskRemoveFromEventList>:
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	dc 01       	movw	r26, r24
    13cc:	15 96       	adiw	r26, 0x05	; 5
    13ce:	ed 91       	ld	r30, X+
    13d0:	fc 91       	ld	r31, X
    13d2:	16 97       	sbiw	r26, 0x06	; 6
    13d4:	06 80       	ldd	r0, Z+6	; 0x06
    13d6:	f7 81       	ldd	r31, Z+7	; 0x07
    13d8:	e0 2d       	mov	r30, r0
    13da:	a4 89       	ldd	r26, Z+20	; 0x14
    13dc:	b5 89       	ldd	r27, Z+21	; 0x15
    13de:	c6 85       	ldd	r28, Z+14	; 0x0e
    13e0:	d7 85       	ldd	r29, Z+15	; 0x0f
    13e2:	80 89       	ldd	r24, Z+16	; 0x10
    13e4:	91 89       	ldd	r25, Z+17	; 0x11
    13e6:	9d 83       	std	Y+5, r25	; 0x05
    13e8:	8c 83       	std	Y+4, r24	; 0x04
    13ea:	c0 89       	ldd	r28, Z+16	; 0x10
    13ec:	d1 89       	ldd	r29, Z+17	; 0x11
    13ee:	86 85       	ldd	r24, Z+14	; 0x0e
    13f0:	97 85       	ldd	r25, Z+15	; 0x0f
    13f2:	9b 83       	std	Y+3, r25	; 0x03
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	8d 91       	ld	r24, X+
    13fa:	9c 91       	ld	r25, X
    13fc:	12 97       	sbiw	r26, 0x02	; 2
    13fe:	9f 01       	movw	r18, r30
    1400:	24 5f       	subi	r18, 0xF4	; 244
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	82 17       	cp	r24, r18
    1406:	93 07       	cpc	r25, r19
    1408:	31 f4       	brne	.+12     	; 0x1416 <xTaskRemoveFromEventList+0x50>
    140a:	80 89       	ldd	r24, Z+16	; 0x10
    140c:	91 89       	ldd	r25, Z+17	; 0x11
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	9c 93       	st	X, r25
    1412:	8e 93       	st	-X, r24
    1414:	11 97       	sbiw	r26, 0x01	; 1
    1416:	15 8a       	std	Z+21, r1	; 0x15
    1418:	14 8a       	std	Z+20, r1	; 0x14
    141a:	8c 91       	ld	r24, X
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	8c 93       	st	X, r24
    1420:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <uxSchedulerSuspended>
    1424:	81 11       	cpse	r24, r1
    1426:	60 c0       	rjmp	.+192    	; 0x14e8 <xTaskRemoveFromEventList+0x122>
    1428:	a2 85       	ldd	r26, Z+10	; 0x0a
    142a:	b3 85       	ldd	r27, Z+11	; 0x0b
    142c:	c4 81       	ldd	r28, Z+4	; 0x04
    142e:	d5 81       	ldd	r29, Z+5	; 0x05
    1430:	86 81       	ldd	r24, Z+6	; 0x06
    1432:	97 81       	ldd	r25, Z+7	; 0x07
    1434:	9d 83       	std	Y+5, r25	; 0x05
    1436:	8c 83       	std	Y+4, r24	; 0x04
    1438:	c6 81       	ldd	r28, Z+6	; 0x06
    143a:	d7 81       	ldd	r29, Z+7	; 0x07
    143c:	84 81       	ldd	r24, Z+4	; 0x04
    143e:	95 81       	ldd	r25, Z+5	; 0x05
    1440:	9b 83       	std	Y+3, r25	; 0x03
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	8d 91       	ld	r24, X+
    1448:	9c 91       	ld	r25, X
    144a:	12 97       	sbiw	r26, 0x02	; 2
    144c:	9f 01       	movw	r18, r30
    144e:	2e 5f       	subi	r18, 0xFE	; 254
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	82 17       	cp	r24, r18
    1454:	93 07       	cpc	r25, r19
    1456:	31 f4       	brne	.+12     	; 0x1464 <xTaskRemoveFromEventList+0x9e>
    1458:	86 81       	ldd	r24, Z+6	; 0x06
    145a:	97 81       	ldd	r25, Z+7	; 0x07
    145c:	12 96       	adiw	r26, 0x02	; 2
    145e:	9c 93       	st	X, r25
    1460:	8e 93       	st	-X, r24
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	13 86       	std	Z+11, r1	; 0x0b
    1466:	12 86       	std	Z+10, r1	; 0x0a
    1468:	8c 91       	ld	r24, X
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	8c 93       	st	X, r24
    146e:	86 89       	ldd	r24, Z+22	; 0x16
    1470:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1474:	98 17       	cp	r25, r24
    1476:	10 f4       	brcc	.+4      	; 0x147c <xTaskRemoveFromEventList+0xb6>
    1478:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	dc 01       	movw	r26, r24
    1480:	aa 0f       	add	r26, r26
    1482:	bb 1f       	adc	r27, r27
    1484:	aa 0f       	add	r26, r26
    1486:	bb 1f       	adc	r27, r27
    1488:	aa 0f       	add	r26, r26
    148a:	bb 1f       	adc	r27, r27
    148c:	8a 0f       	add	r24, r26
    148e:	9b 1f       	adc	r25, r27
    1490:	dc 01       	movw	r26, r24
    1492:	a7 55       	subi	r26, 0x57	; 87
    1494:	bb 4f       	sbci	r27, 0xFB	; 251
    1496:	11 96       	adiw	r26, 0x01	; 1
    1498:	0d 90       	ld	r0, X+
    149a:	bc 91       	ld	r27, X
    149c:	a0 2d       	mov	r26, r0
    149e:	b5 83       	std	Z+5, r27	; 0x05
    14a0:	a4 83       	std	Z+4, r26	; 0x04
    14a2:	14 96       	adiw	r26, 0x04	; 4
    14a4:	8d 91       	ld	r24, X+
    14a6:	9c 91       	ld	r25, X
    14a8:	15 97       	sbiw	r26, 0x05	; 5
    14aa:	97 83       	std	Z+7, r25	; 0x07
    14ac:	86 83       	std	Z+6, r24	; 0x06
    14ae:	14 96       	adiw	r26, 0x04	; 4
    14b0:	cd 91       	ld	r28, X+
    14b2:	dc 91       	ld	r29, X
    14b4:	15 97       	sbiw	r26, 0x05	; 5
    14b6:	3b 83       	std	Y+3, r19	; 0x03
    14b8:	2a 83       	std	Y+2, r18	; 0x02
    14ba:	15 96       	adiw	r26, 0x05	; 5
    14bc:	3c 93       	st	X, r19
    14be:	2e 93       	st	-X, r18
    14c0:	14 97       	sbiw	r26, 0x04	; 4
    14c2:	a6 89       	ldd	r26, Z+22	; 0x16
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	cd 01       	movw	r24, r26
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	a8 0f       	add	r26, r24
    14d6:	b9 1f       	adc	r27, r25
    14d8:	a7 55       	subi	r26, 0x57	; 87
    14da:	bb 4f       	sbci	r27, 0xFB	; 251
    14dc:	b3 87       	std	Z+11, r27	; 0x0b
    14de:	a2 87       	std	Z+10, r26	; 0x0a
    14e0:	8c 91       	ld	r24, X
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	8c 93       	st	X, r24
    14e6:	1c c0       	rjmp	.+56     	; 0x1520 <xTaskRemoveFromEventList+0x15a>
    14e8:	4a e8       	ldi	r20, 0x8A	; 138
    14ea:	54 e0       	ldi	r21, 0x04	; 4
    14ec:	da 01       	movw	r26, r20
    14ee:	11 96       	adiw	r26, 0x01	; 1
    14f0:	cd 91       	ld	r28, X+
    14f2:	dc 91       	ld	r29, X
    14f4:	12 97       	sbiw	r26, 0x02	; 2
    14f6:	d7 87       	std	Z+15, r29	; 0x0f
    14f8:	c6 87       	std	Z+14, r28	; 0x0e
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	91 8b       	std	Z+17, r25	; 0x11
    1500:	80 8b       	std	Z+16, r24	; 0x10
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	dc 01       	movw	r26, r24
    1508:	13 96       	adiw	r26, 0x03	; 3
    150a:	3c 93       	st	X, r19
    150c:	2e 93       	st	-X, r18
    150e:	12 97       	sbiw	r26, 0x02	; 2
    1510:	3d 83       	std	Y+5, r19	; 0x05
    1512:	2c 83       	std	Y+4, r18	; 0x04
    1514:	55 8b       	std	Z+21, r21	; 0x15
    1516:	44 8b       	std	Z+20, r20	; 0x14
    1518:	da 01       	movw	r26, r20
    151a:	8c 91       	ld	r24, X
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	8c 93       	st	X, r24
    1520:	96 89       	ldd	r25, Z+22	; 0x16
    1522:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1526:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    152a:	86 89       	ldd	r24, Z+22	; 0x16
    152c:	89 17       	cp	r24, r25
    152e:	20 f4       	brcc	.+8      	; 0x1538 <xTaskRemoveFromEventList+0x172>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    1536:	01 c0       	rjmp	.+2      	; 0x153a <xTaskRemoveFromEventList+0x174>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <vTaskInternalSetTimeOutState>:
    1540:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <xNumOfOverflows>
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <xTickCount>
    154c:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <xTickCount+0x1>
    1550:	32 83       	std	Z+2, r19	; 0x02
    1552:	21 83       	std	Z+1, r18	; 0x01
    1554:	08 95       	ret

00001556 <xTaskCheckForTimeOut>:
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	0f 92       	push	r0
    1562:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <xTickCount>
    1566:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <xTickCount+0x1>
    156a:	dc 01       	movw	r26, r24
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	4d 91       	ld	r20, X+
    1570:	5c 91       	ld	r21, X
    1572:	12 97       	sbiw	r26, 0x02	; 2
    1574:	df 01       	movw	r26, r30
    1576:	a4 1b       	sub	r26, r20
    1578:	b5 0b       	sbc	r27, r21
    157a:	eb 01       	movw	r28, r22
    157c:	28 81       	ld	r18, Y
    157e:	39 81       	ldd	r19, Y+1	; 0x01
    1580:	2f 3f       	cpi	r18, 0xFF	; 255
    1582:	df ef       	ldi	r29, 0xFF	; 255
    1584:	3d 07       	cpc	r19, r29
    1586:	f9 f0       	breq	.+62     	; 0x15c6 <xTaskCheckForTimeOut+0x70>
    1588:	ec 01       	movw	r28, r24
    158a:	18 81       	ld	r17, Y
    158c:	c0 91 6e 04 	lds	r28, 0x046E	; 0x80046e <xNumOfOverflows>
    1590:	1c 17       	cp	r17, r28
    1592:	41 f0       	breq	.+16     	; 0x15a4 <xTaskCheckForTimeOut+0x4e>
    1594:	e4 17       	cp	r30, r20
    1596:	f5 07       	cpc	r31, r21
    1598:	28 f0       	brcs	.+10     	; 0x15a4 <xTaskCheckForTimeOut+0x4e>
    159a:	fb 01       	movw	r30, r22
    159c:	11 82       	std	Z+1, r1	; 0x01
    159e:	10 82       	st	Z, r1
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	12 c0       	rjmp	.+36     	; 0x15c8 <xTaskCheckForTimeOut+0x72>
    15a4:	a2 17       	cp	r26, r18
    15a6:	b3 07       	cpc	r27, r19
    15a8:	48 f4       	brcc	.+18     	; 0x15bc <xTaskCheckForTimeOut+0x66>
    15aa:	fb 01       	movw	r30, r22
    15ac:	2a 1b       	sub	r18, r26
    15ae:	3b 0b       	sbc	r19, r27
    15b0:	31 83       	std	Z+1, r19	; 0x01
    15b2:	20 83       	st	Z, r18
    15b4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <vTaskInternalSetTimeOutState>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <xTaskCheckForTimeOut+0x72>
    15bc:	db 01       	movw	r26, r22
    15be:	1d 92       	st	X+, r1
    15c0:	1c 92       	st	X, r1
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <xTaskCheckForTimeOut+0x72>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	08 95       	ret

000015d4 <vTaskMissedYield>:
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xYieldPending>
    15da:	08 95       	ret

000015dc <xTaskPriorityInherit>:
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	fc 01       	movw	r30, r24
    15e6:	89 2b       	or	r24, r25
    15e8:	09 f4       	brne	.+2      	; 0x15ec <xTaskPriorityInherit+0x10>
    15ea:	84 c0       	rjmp	.+264    	; 0x16f4 <xTaskPriorityInherit+0x118>
    15ec:	26 89       	ldd	r18, Z+22	; 0x16
    15ee:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    15f2:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    15f6:	56 96       	adiw	r26, 0x16	; 22
    15f8:	8c 91       	ld	r24, X
    15fa:	28 17       	cp	r18, r24
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <xTaskPriorityInherit+0x24>
    15fe:	70 c0       	rjmp	.+224    	; 0x16e0 <xTaskPriorityInherit+0x104>
    1600:	84 85       	ldd	r24, Z+12	; 0x0c
    1602:	95 85       	ldd	r25, Z+13	; 0x0d
    1604:	99 23       	and	r25, r25
    1606:	64 f0       	brlt	.+24     	; 0x1620 <xTaskPriorityInherit+0x44>
    1608:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    160c:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    1610:	56 96       	adiw	r26, 0x16	; 22
    1612:	3c 91       	ld	r19, X
    1614:	84 e0       	ldi	r24, 0x04	; 4
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	83 1b       	sub	r24, r19
    161a:	91 09       	sbc	r25, r1
    161c:	95 87       	std	Z+13, r25	; 0x0d
    161e:	84 87       	std	Z+12, r24	; 0x0c
    1620:	82 85       	ldd	r24, Z+10	; 0x0a
    1622:	93 85       	ldd	r25, Z+11	; 0x0b
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	44 0f       	add	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	24 0f       	add	r18, r20
    1636:	35 1f       	adc	r19, r21
    1638:	27 55       	subi	r18, 0x57	; 87
    163a:	3b 4f       	sbci	r19, 0xFB	; 251
    163c:	82 17       	cp	r24, r18
    163e:	93 07       	cpc	r25, r19
    1640:	09 f0       	breq	.+2      	; 0x1644 <xTaskPriorityInherit+0x68>
    1642:	45 c0       	rjmp	.+138    	; 0x16ce <xTaskPriorityInherit+0xf2>
    1644:	ef 01       	movw	r28, r30
    1646:	8f 01       	movw	r16, r30
    1648:	0e 5f       	subi	r16, 0xFE	; 254
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	c8 01       	movw	r24, r16
    164e:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
    1652:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    1656:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    165a:	86 89       	ldd	r24, Z+22	; 0x16
    165c:	8e 8b       	std	Y+22, r24	; 0x16
    165e:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    1662:	98 17       	cp	r25, r24
    1664:	10 f4       	brcc	.+4      	; 0x166a <xTaskPriorityInherit+0x8e>
    1666:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	fc 01       	movw	r30, r24
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	8e 0f       	add	r24, r30
    167c:	9f 1f       	adc	r25, r31
    167e:	fc 01       	movw	r30, r24
    1680:	e7 55       	subi	r30, 0x57	; 87
    1682:	fb 4f       	sbci	r31, 0xFB	; 251
    1684:	01 80       	ldd	r0, Z+1	; 0x01
    1686:	f2 81       	ldd	r31, Z+2	; 0x02
    1688:	e0 2d       	mov	r30, r0
    168a:	fd 83       	std	Y+5, r31	; 0x05
    168c:	ec 83       	std	Y+4, r30	; 0x04
    168e:	84 81       	ldd	r24, Z+4	; 0x04
    1690:	95 81       	ldd	r25, Z+5	; 0x05
    1692:	9f 83       	std	Y+7, r25	; 0x07
    1694:	8e 83       	std	Y+6, r24	; 0x06
    1696:	a4 81       	ldd	r26, Z+4	; 0x04
    1698:	b5 81       	ldd	r27, Z+5	; 0x05
    169a:	13 96       	adiw	r26, 0x03	; 3
    169c:	1c 93       	st	X, r17
    169e:	0e 93       	st	-X, r16
    16a0:	12 97       	sbiw	r26, 0x02	; 2
    16a2:	15 83       	std	Z+5, r17	; 0x05
    16a4:	04 83       	std	Z+4, r16	; 0x04
    16a6:	8e 89       	ldd	r24, Y+22	; 0x16
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	fc 01       	movw	r30, r24
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	e8 0f       	add	r30, r24
    16ba:	f9 1f       	adc	r31, r25
    16bc:	e7 55       	subi	r30, 0x57	; 87
    16be:	fb 4f       	sbci	r31, 0xFB	; 251
    16c0:	fb 87       	std	Y+11, r31	; 0x0b
    16c2:	ea 87       	std	Y+10, r30	; 0x0a
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	80 83       	st	Z, r24
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	16 c0       	rjmp	.+44     	; 0x16fa <xTaskPriorityInherit+0x11e>
    16ce:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <pxCurrentTCB>
    16d2:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    16d6:	56 96       	adiw	r26, 0x16	; 22
    16d8:	8c 91       	ld	r24, X
    16da:	86 8b       	std	Z+22, r24	; 0x16
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <xTaskPriorityInherit+0x11e>
    16e0:	91 a1       	ldd	r25, Z+33	; 0x21
    16e2:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    16e6:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    16ea:	86 89       	ldd	r24, Z+22	; 0x16
    16ec:	98 17       	cp	r25, r24
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <xTaskPriorityInherit+0x11c>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <xTaskPriorityInherit+0x11e>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <xTaskPriorityInherit+0x11e>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <xTaskPriorityDisinherit>:
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	fc 01       	movw	r30, r24
    170e:	89 2b       	or	r24, r25
    1710:	09 f4       	brne	.+2      	; 0x1714 <xTaskPriorityDisinherit+0x10>
    1712:	51 c0       	rjmp	.+162    	; 0x17b6 <xTaskPriorityDisinherit+0xb2>
    1714:	82 a1       	ldd	r24, Z+34	; 0x22
    1716:	81 50       	subi	r24, 0x01	; 1
    1718:	82 a3       	std	Z+34, r24	; 0x22
    171a:	26 89       	ldd	r18, Z+22	; 0x16
    171c:	91 a1       	ldd	r25, Z+33	; 0x21
    171e:	29 17       	cp	r18, r25
    1720:	09 f4       	brne	.+2      	; 0x1724 <xTaskPriorityDisinherit+0x20>
    1722:	4b c0       	rjmp	.+150    	; 0x17ba <xTaskPriorityDisinherit+0xb6>
    1724:	81 11       	cpse	r24, r1
    1726:	4b c0       	rjmp	.+150    	; 0x17be <xTaskPriorityDisinherit+0xba>
    1728:	ef 01       	movw	r28, r30
    172a:	8f 01       	movw	r16, r30
    172c:	0e 5f       	subi	r16, 0xFE	; 254
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	c8 01       	movw	r24, r16
    1732:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
    1736:	89 a1       	ldd	r24, Y+33	; 0x21
    1738:	8e 8b       	std	Y+22, r24	; 0x16
    173a:	24 e0       	ldi	r18, 0x04	; 4
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	28 1b       	sub	r18, r24
    1740:	31 09       	sbc	r19, r1
    1742:	3d 87       	std	Y+13, r19	; 0x0d
    1744:	2c 87       	std	Y+12, r18	; 0x0c
    1746:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    174a:	98 17       	cp	r25, r24
    174c:	10 f4       	brcc	.+4      	; 0x1752 <xTaskPriorityDisinherit+0x4e>
    174e:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	fc 01       	movw	r30, r24
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	8e 0f       	add	r24, r30
    1764:	9f 1f       	adc	r25, r31
    1766:	fc 01       	movw	r30, r24
    1768:	e7 55       	subi	r30, 0x57	; 87
    176a:	fb 4f       	sbci	r31, 0xFB	; 251
    176c:	01 80       	ldd	r0, Z+1	; 0x01
    176e:	f2 81       	ldd	r31, Z+2	; 0x02
    1770:	e0 2d       	mov	r30, r0
    1772:	fd 83       	std	Y+5, r31	; 0x05
    1774:	ec 83       	std	Y+4, r30	; 0x04
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	95 81       	ldd	r25, Z+5	; 0x05
    177a:	9f 83       	std	Y+7, r25	; 0x07
    177c:	8e 83       	std	Y+6, r24	; 0x06
    177e:	a4 81       	ldd	r26, Z+4	; 0x04
    1780:	b5 81       	ldd	r27, Z+5	; 0x05
    1782:	13 96       	adiw	r26, 0x03	; 3
    1784:	1c 93       	st	X, r17
    1786:	0e 93       	st	-X, r16
    1788:	12 97       	sbiw	r26, 0x02	; 2
    178a:	15 83       	std	Z+5, r17	; 0x05
    178c:	04 83       	std	Z+4, r16	; 0x04
    178e:	ee 89       	ldd	r30, Y+22	; 0x16
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	cf 01       	movw	r24, r30
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	e8 0f       	add	r30, r24
    17a2:	f9 1f       	adc	r31, r25
    17a4:	e7 55       	subi	r30, 0x57	; 87
    17a6:	fb 4f       	sbci	r31, 0xFB	; 251
    17a8:	fb 87       	std	Y+11, r31	; 0x0b
    17aa:	ea 87       	std	Y+10, r30	; 0x0a
    17ac:	80 81       	ld	r24, Z
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	80 83       	st	Z, r24
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <xTaskPriorityDisinherit+0xbc>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <xTaskPriorityDisinherit+0xbc>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <xTaskPriorityDisinherit+0xbc>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <vTaskPriorityDisinheritAfterTimeout>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	fc 01       	movw	r30, r24
    17d4:	89 2b       	or	r24, r25
    17d6:	09 f4       	brne	.+2      	; 0x17da <vTaskPriorityDisinheritAfterTimeout+0x10>
    17d8:	66 c0       	rjmp	.+204    	; 0x18a6 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    17da:	91 a1       	ldd	r25, Z+33	; 0x21
    17dc:	96 17       	cp	r25, r22
    17de:	08 f4       	brcc	.+2      	; 0x17e2 <vTaskPriorityDisinheritAfterTimeout+0x18>
    17e0:	96 2f       	mov	r25, r22
    17e2:	86 89       	ldd	r24, Z+22	; 0x16
    17e4:	98 17       	cp	r25, r24
    17e6:	09 f4       	brne	.+2      	; 0x17ea <vTaskPriorityDisinheritAfterTimeout+0x20>
    17e8:	5e c0       	rjmp	.+188    	; 0x18a6 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    17ea:	22 a1       	ldd	r18, Z+34	; 0x22
    17ec:	21 30       	cpi	r18, 0x01	; 1
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <vTaskPriorityDisinheritAfterTimeout+0x28>
    17f0:	5a c0       	rjmp	.+180    	; 0x18a6 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    17f2:	96 8b       	std	Z+22, r25	; 0x16
    17f4:	24 85       	ldd	r18, Z+12	; 0x0c
    17f6:	35 85       	ldd	r19, Z+13	; 0x0d
    17f8:	33 23       	and	r19, r19
    17fa:	34 f0       	brlt	.+12     	; 0x1808 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    17fc:	24 e0       	ldi	r18, 0x04	; 4
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	29 1b       	sub	r18, r25
    1802:	31 09       	sbc	r19, r1
    1804:	35 87       	std	Z+13, r19	; 0x0d
    1806:	24 87       	std	Z+12, r18	; 0x0c
    1808:	22 85       	ldd	r18, Z+10	; 0x0a
    180a:	33 85       	ldd	r19, Z+11	; 0x0b
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	ac 01       	movw	r20, r24
    1810:	44 0f       	add	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	44 0f       	add	r20, r20
    1816:	55 1f       	adc	r21, r21
    1818:	44 0f       	add	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	84 0f       	add	r24, r20
    181e:	95 1f       	adc	r25, r21
    1820:	87 55       	subi	r24, 0x57	; 87
    1822:	9b 4f       	sbci	r25, 0xFB	; 251
    1824:	28 17       	cp	r18, r24
    1826:	39 07       	cpc	r19, r25
    1828:	f1 f5       	brne	.+124    	; 0x18a6 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    182a:	ef 01       	movw	r28, r30
    182c:	8f 01       	movw	r16, r30
    182e:	0e 5f       	subi	r16, 0xFE	; 254
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	c8 01       	movw	r24, r16
    1834:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
    1838:	8e 89       	ldd	r24, Y+22	; 0x16
    183a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <uxTopReadyPriority>
    183e:	98 17       	cp	r25, r24
    1840:	10 f4       	brcc	.+4      	; 0x1846 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1842:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uxTopReadyPriority>
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	ee 0f       	add	r30, r30
    184c:	ff 1f       	adc	r31, r31
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	8e 0f       	add	r24, r30
    1858:	9f 1f       	adc	r25, r31
    185a:	fc 01       	movw	r30, r24
    185c:	e7 55       	subi	r30, 0x57	; 87
    185e:	fb 4f       	sbci	r31, 0xFB	; 251
    1860:	01 80       	ldd	r0, Z+1	; 0x01
    1862:	f2 81       	ldd	r31, Z+2	; 0x02
    1864:	e0 2d       	mov	r30, r0
    1866:	fd 83       	std	Y+5, r31	; 0x05
    1868:	ec 83       	std	Y+4, r30	; 0x04
    186a:	84 81       	ldd	r24, Z+4	; 0x04
    186c:	95 81       	ldd	r25, Z+5	; 0x05
    186e:	9f 83       	std	Y+7, r25	; 0x07
    1870:	8e 83       	std	Y+6, r24	; 0x06
    1872:	a4 81       	ldd	r26, Z+4	; 0x04
    1874:	b5 81       	ldd	r27, Z+5	; 0x05
    1876:	13 96       	adiw	r26, 0x03	; 3
    1878:	1c 93       	st	X, r17
    187a:	0e 93       	st	-X, r16
    187c:	12 97       	sbiw	r26, 0x02	; 2
    187e:	15 83       	std	Z+5, r17	; 0x05
    1880:	04 83       	std	Z+4, r16	; 0x04
    1882:	8e 89       	ldd	r24, Y+22	; 0x16
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	fc 01       	movw	r30, r24
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	e8 0f       	add	r30, r24
    1896:	f9 1f       	adc	r31, r25
    1898:	e7 55       	subi	r30, 0x57	; 87
    189a:	fb 4f       	sbci	r31, 0xFB	; 251
    189c:	fb 87       	std	Y+11, r31	; 0x0b
    189e:	ea 87       	std	Y+10, r30	; 0x0a
    18a0:	80 81       	ld	r24, Z
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    18b0:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18b4:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    18b8:	89 2b       	or	r24, r25
    18ba:	39 f0       	breq	.+14     	; 0x18ca <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    18bc:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18c0:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    18c4:	82 a1       	ldd	r24, Z+34	; 0x22
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    18ca:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <pxCurrentTCB>
    18ce:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <pxCurrentTCB+0x1>
    }
    18d2:	08 95       	ret

000018d4 <LCD_write_command>:
OutType:
Description:
************************/
void LCD_write_command(u8 data)
{
	RS(0);
    18d4:	9b b3       	in	r25, 0x1b	; 27
    18d6:	97 7f       	andi	r25, 0xF7	; 247
    18d8:	9b bb       	out	0x1b, r25	; 27
	D7(GET_BIT(data, 7));
    18da:	88 23       	and	r24, r24
    18dc:	24 f4       	brge	.+8      	; 0x18e6 <LCD_write_command+0x12>
    18de:	98 b3       	in	r25, 0x18	; 24
    18e0:	90 61       	ori	r25, 0x10	; 16
    18e2:	98 bb       	out	0x18, r25	; 24
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <LCD_write_command+0x18>
    18e6:	98 b3       	in	r25, 0x18	; 24
    18e8:	9f 7e       	andi	r25, 0xEF	; 239
    18ea:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data, 6));
    18ec:	86 ff       	sbrs	r24, 6
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <LCD_write_command+0x24>
    18f0:	98 b3       	in	r25, 0x18	; 24
    18f2:	94 60       	ori	r25, 0x04	; 4
    18f4:	98 bb       	out	0x18, r25	; 24
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <LCD_write_command+0x2a>
    18f8:	98 b3       	in	r25, 0x18	; 24
    18fa:	9b 7f       	andi	r25, 0xFB	; 251
    18fc:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data, 5));
    18fe:	85 ff       	sbrs	r24, 5
    1900:	04 c0       	rjmp	.+8      	; 0x190a <LCD_write_command+0x36>
    1902:	98 b3       	in	r25, 0x18	; 24
    1904:	92 60       	ori	r25, 0x02	; 2
    1906:	98 bb       	out	0x18, r25	; 24
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <LCD_write_command+0x3c>
    190a:	98 b3       	in	r25, 0x18	; 24
    190c:	9d 7f       	andi	r25, 0xFD	; 253
    190e:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data, 4));
    1910:	84 ff       	sbrs	r24, 4
    1912:	04 c0       	rjmp	.+8      	; 0x191c <LCD_write_command+0x48>
    1914:	98 b3       	in	r25, 0x18	; 24
    1916:	91 60       	ori	r25, 0x01	; 1
    1918:	98 bb       	out	0x18, r25	; 24
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <LCD_write_command+0x4e>
    191c:	98 b3       	in	r25, 0x18	; 24
    191e:	9e 7f       	andi	r25, 0xFE	; 254
    1920:	98 bb       	out	0x18, r25	; 24
	EN(1);
    1922:	9b b3       	in	r25, 0x1b	; 27
    1924:	94 60       	ori	r25, 0x04	; 4
    1926:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1928:	e9 ef       	ldi	r30, 0xF9	; 249
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	31 97       	sbiw	r30, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_write_command+0x58>
    1930:	00 c0       	rjmp	.+0      	; 0x1932 <LCD_write_command+0x5e>
    1932:	00 00       	nop
	_delay_ms(1);
	EN(0);
    1934:	9b b3       	in	r25, 0x1b	; 27
    1936:	9b 7f       	andi	r25, 0xFB	; 251
    1938:	9b bb       	out	0x1b, r25	; 27
    193a:	e9 ef       	ldi	r30, 0xF9	; 249
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	31 97       	sbiw	r30, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_write_command+0x6a>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <LCD_write_command+0x70>
    1944:	00 00       	nop
	_delay_ms(1);
	D7(GET_BIT(data, 3));
    1946:	83 ff       	sbrs	r24, 3
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <LCD_write_command+0x7e>
    194a:	98 b3       	in	r25, 0x18	; 24
    194c:	90 61       	ori	r25, 0x10	; 16
    194e:	98 bb       	out	0x18, r25	; 24
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <LCD_write_command+0x84>
    1952:	98 b3       	in	r25, 0x18	; 24
    1954:	9f 7e       	andi	r25, 0xEF	; 239
    1956:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data, 2));
    1958:	82 ff       	sbrs	r24, 2
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <LCD_write_command+0x90>
    195c:	98 b3       	in	r25, 0x18	; 24
    195e:	94 60       	ori	r25, 0x04	; 4
    1960:	98 bb       	out	0x18, r25	; 24
    1962:	03 c0       	rjmp	.+6      	; 0x196a <LCD_write_command+0x96>
    1964:	98 b3       	in	r25, 0x18	; 24
    1966:	9b 7f       	andi	r25, 0xFB	; 251
    1968:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data, 1));
    196a:	81 ff       	sbrs	r24, 1
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <LCD_write_command+0xa2>
    196e:	98 b3       	in	r25, 0x18	; 24
    1970:	92 60       	ori	r25, 0x02	; 2
    1972:	98 bb       	out	0x18, r25	; 24
    1974:	03 c0       	rjmp	.+6      	; 0x197c <LCD_write_command+0xa8>
    1976:	98 b3       	in	r25, 0x18	; 24
    1978:	9d 7f       	andi	r25, 0xFD	; 253
    197a:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data, 0));
    197c:	80 ff       	sbrs	r24, 0
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <LCD_write_command+0xb4>
    1980:	88 b3       	in	r24, 0x18	; 24
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	88 bb       	out	0x18, r24	; 24
    1986:	03 c0       	rjmp	.+6      	; 0x198e <LCD_write_command+0xba>
    1988:	88 b3       	in	r24, 0x18	; 24
    198a:	8e 7f       	andi	r24, 0xFE	; 254
    198c:	88 bb       	out	0x18, r24	; 24
	EN(1);
    198e:	8b b3       	in	r24, 0x1b	; 27
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	8b bb       	out	0x1b, r24	; 27
    1994:	89 ef       	ldi	r24, 0xF9	; 249
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_write_command+0xc4>
    199c:	00 c0       	rjmp	.+0      	; 0x199e <LCD_write_command+0xca>
    199e:	00 00       	nop
	_delay_ms(1);
	EN(0);
    19a0:	8b b3       	in	r24, 0x1b	; 27
    19a2:	8b 7f       	andi	r24, 0xFB	; 251
    19a4:	8b bb       	out	0x1b, r24	; 27
    19a6:	e9 ef       	ldi	r30, 0xF9	; 249
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <LCD_write_command+0xd6>
    19ae:	00 c0       	rjmp	.+0      	; 0x19b0 <LCD_write_command+0xdc>
    19b0:	00 00       	nop
    19b2:	08 95       	ret

000019b4 <LCD_INIT>:
OutType:
Description:
************************/
void LCD_INIT(void)
{
	LCD_CONTROL_PINS;
    19b4:	8a b3       	in	r24, 0x1a	; 26
    19b6:	8c 60       	ori	r24, 0x0C	; 12
    19b8:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PINS;
    19ba:	87 b3       	in	r24, 0x17	; 23
    19bc:	87 61       	ori	r24, 0x17	; 23
    19be:	87 bb       	out	0x17, r24	; 23
	
	LCD_write_command(0x28); // initialization in 8bit mode of 16X2 LCD
    19c0:	88 e2       	ldi	r24, 0x28	; 40
    19c2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_write_command>
    19c6:	89 ef       	ldi	r24, 0xF9	; 249
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <LCD_INIT+0x16>
    19ce:	00 c0       	rjmp	.+0      	; 0x19d0 <LCD_INIT+0x1c>
    19d0:	00 00       	nop
	_delay_ms(1);

	LCD_write_command(0x01); // make clear LCD
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_write_command>
    19d8:	89 ef       	ldi	r24, 0xF9	; 249
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_INIT+0x28>
    19e0:	00 c0       	rjmp	.+0      	; 0x19e2 <LCD_INIT+0x2e>
    19e2:	00 00       	nop
	_delay_ms(1);

	LCD_write_command(0x02); // return home
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_write_command>
    19ea:	89 ef       	ldi	r24, 0xF9	; 249
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_INIT+0x3a>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <LCD_INIT+0x40>
    19f4:	00 00       	nop
	_delay_ms(1);

	LCD_write_command(0x06); // make increment in cursor
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_write_command>
    19fc:	89 ef       	ldi	r24, 0xF9	; 249
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_INIT+0x4c>
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <LCD_INIT+0x52>
    1a06:	00 00       	nop
	_delay_ms(1);

	LCD_write_command(0x80); // "8" go to first line and "0" is for 0th position
    1a08:	80 e8       	ldi	r24, 0x80	; 128
    1a0a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_write_command>
    1a0e:	89 ef       	ldi	r24, 0xF9	; 249
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_INIT+0x5e>
    1a16:	00 c0       	rjmp	.+0      	; 0x1a18 <LCD_INIT+0x64>
    1a18:	00 00       	nop
    1a1a:	08 95       	ret

00001a1c <lCD_write_char>:
OutType:
Description:
************************/
void lCD_write_char(u8 data)
{
	RS(1);
    1a1c:	9b b3       	in	r25, 0x1b	; 27
    1a1e:	98 60       	ori	r25, 0x08	; 8
    1a20:	9b bb       	out	0x1b, r25	; 27
	D7(GET_BIT(data, 7));
    1a22:	88 23       	and	r24, r24
    1a24:	24 f4       	brge	.+8      	; 0x1a2e <lCD_write_char+0x12>
    1a26:	98 b3       	in	r25, 0x18	; 24
    1a28:	90 61       	ori	r25, 0x10	; 16
    1a2a:	98 bb       	out	0x18, r25	; 24
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <lCD_write_char+0x18>
    1a2e:	98 b3       	in	r25, 0x18	; 24
    1a30:	9f 7e       	andi	r25, 0xEF	; 239
    1a32:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data, 6));
    1a34:	86 ff       	sbrs	r24, 6
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <lCD_write_char+0x24>
    1a38:	98 b3       	in	r25, 0x18	; 24
    1a3a:	94 60       	ori	r25, 0x04	; 4
    1a3c:	98 bb       	out	0x18, r25	; 24
    1a3e:	03 c0       	rjmp	.+6      	; 0x1a46 <lCD_write_char+0x2a>
    1a40:	98 b3       	in	r25, 0x18	; 24
    1a42:	9b 7f       	andi	r25, 0xFB	; 251
    1a44:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data, 5));
    1a46:	85 ff       	sbrs	r24, 5
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <lCD_write_char+0x36>
    1a4a:	98 b3       	in	r25, 0x18	; 24
    1a4c:	92 60       	ori	r25, 0x02	; 2
    1a4e:	98 bb       	out	0x18, r25	; 24
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <lCD_write_char+0x3c>
    1a52:	98 b3       	in	r25, 0x18	; 24
    1a54:	9d 7f       	andi	r25, 0xFD	; 253
    1a56:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data, 4));
    1a58:	84 ff       	sbrs	r24, 4
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <lCD_write_char+0x48>
    1a5c:	98 b3       	in	r25, 0x18	; 24
    1a5e:	91 60       	ori	r25, 0x01	; 1
    1a60:	98 bb       	out	0x18, r25	; 24
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <lCD_write_char+0x4e>
    1a64:	98 b3       	in	r25, 0x18	; 24
    1a66:	9e 7f       	andi	r25, 0xFE	; 254
    1a68:	98 bb       	out	0x18, r25	; 24
	EN(1);
    1a6a:	9b b3       	in	r25, 0x1b	; 27
    1a6c:	94 60       	ori	r25, 0x04	; 4
    1a6e:	9b bb       	out	0x1b, r25	; 27
    1a70:	e9 ef       	ldi	r30, 0xF9	; 249
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	31 97       	sbiw	r30, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <lCD_write_char+0x58>
    1a78:	00 c0       	rjmp	.+0      	; 0x1a7a <lCD_write_char+0x5e>
    1a7a:	00 00       	nop
	_delay_ms(1);
	EN(0);
    1a7c:	9b b3       	in	r25, 0x1b	; 27
    1a7e:	9b 7f       	andi	r25, 0xFB	; 251
    1a80:	9b bb       	out	0x1b, r25	; 27
    1a82:	e9 ef       	ldi	r30, 0xF9	; 249
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	31 97       	sbiw	r30, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <lCD_write_char+0x6a>
    1a8a:	00 c0       	rjmp	.+0      	; 0x1a8c <lCD_write_char+0x70>
    1a8c:	00 00       	nop
	_delay_ms(1);
	D7(GET_BIT(data, 3));
    1a8e:	83 ff       	sbrs	r24, 3
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <lCD_write_char+0x7e>
    1a92:	98 b3       	in	r25, 0x18	; 24
    1a94:	90 61       	ori	r25, 0x10	; 16
    1a96:	98 bb       	out	0x18, r25	; 24
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <lCD_write_char+0x84>
    1a9a:	98 b3       	in	r25, 0x18	; 24
    1a9c:	9f 7e       	andi	r25, 0xEF	; 239
    1a9e:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data, 2));
    1aa0:	82 ff       	sbrs	r24, 2
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <lCD_write_char+0x90>
    1aa4:	98 b3       	in	r25, 0x18	; 24
    1aa6:	94 60       	ori	r25, 0x04	; 4
    1aa8:	98 bb       	out	0x18, r25	; 24
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <lCD_write_char+0x96>
    1aac:	98 b3       	in	r25, 0x18	; 24
    1aae:	9b 7f       	andi	r25, 0xFB	; 251
    1ab0:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data, 1));
    1ab2:	81 ff       	sbrs	r24, 1
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <lCD_write_char+0xa2>
    1ab6:	98 b3       	in	r25, 0x18	; 24
    1ab8:	92 60       	ori	r25, 0x02	; 2
    1aba:	98 bb       	out	0x18, r25	; 24
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <lCD_write_char+0xa8>
    1abe:	98 b3       	in	r25, 0x18	; 24
    1ac0:	9d 7f       	andi	r25, 0xFD	; 253
    1ac2:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data, 0));
    1ac4:	80 ff       	sbrs	r24, 0
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <lCD_write_char+0xb4>
    1ac8:	88 b3       	in	r24, 0x18	; 24
    1aca:	81 60       	ori	r24, 0x01	; 1
    1acc:	88 bb       	out	0x18, r24	; 24
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <lCD_write_char+0xba>
    1ad0:	88 b3       	in	r24, 0x18	; 24
    1ad2:	8e 7f       	andi	r24, 0xFE	; 254
    1ad4:	88 bb       	out	0x18, r24	; 24
	EN(1);
    1ad6:	8b b3       	in	r24, 0x1b	; 27
    1ad8:	84 60       	ori	r24, 0x04	; 4
    1ada:	8b bb       	out	0x1b, r24	; 27
    1adc:	89 ef       	ldi	r24, 0xF9	; 249
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <lCD_write_char+0xc4>
    1ae4:	00 c0       	rjmp	.+0      	; 0x1ae6 <lCD_write_char+0xca>
    1ae6:	00 00       	nop
	_delay_ms(1);
	EN(0);
    1ae8:	8b b3       	in	r24, 0x1b	; 27
    1aea:	8b 7f       	andi	r24, 0xFB	; 251
    1aec:	8b bb       	out	0x1b, r24	; 27
    1aee:	e9 ef       	ldi	r30, 0xF9	; 249
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	31 97       	sbiw	r30, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <lCD_write_char+0xd6>
    1af6:	00 c0       	rjmp	.+0      	; 0x1af8 <lCD_write_char+0xdc>
    1af8:	00 00       	nop
    1afa:	08 95       	ret

00001afc <LCD_write_number>:
InType:
OutType:
Description:
************************/
void LCD_write_number(u32 data)
{
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	2a 97       	sbiw	r28, 0x0a	; 10
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	6b 01       	movw	r12, r22
    1b1c:	7c 01       	movw	r14, r24
	int8_t i =8 ;
	u8 arr[10];

	if (data == 0)
    1b1e:	67 2b       	or	r22, r23
    1b20:	68 2b       	or	r22, r24
    1b22:	69 2b       	or	r22, r25
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <LCD_write_number+0x30>
	{
		lCD_write_char('0');
    1b26:	80 e3       	ldi	r24, 0x30	; 48
    1b28:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <lCD_write_char>
InType:
OutType:
Description:
************************/
void LCD_write_number(u32 data)
{
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	17 c0       	rjmp	.+46     	; 0x1b5e <LCD_write_number+0x62>
		lCD_write_char('0');
	}

	for(i = 0 ; data != 0; i++)
	{
		arr[i] = data % 10 + 48;
    1b30:	c7 01       	movw	r24, r14
    1b32:	b6 01       	movw	r22, r12
    1b34:	2a e0       	ldi	r18, 0x0A	; 10
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__udivmodsi4>
    1b40:	e1 e0       	ldi	r30, 0x01	; 1
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	ec 0f       	add	r30, r28
    1b46:	fd 1f       	adc	r31, r29
    1b48:	e1 0f       	add	r30, r17
    1b4a:	f1 1d       	adc	r31, r1
    1b4c:	17 fd       	sbrc	r17, 7
    1b4e:	fa 95       	dec	r31
    1b50:	60 5d       	subi	r22, 0xD0	; 208
    1b52:	60 83       	st	Z, r22
		data /= 10;
    1b54:	c2 2e       	mov	r12, r18
    1b56:	d3 2e       	mov	r13, r19
    1b58:	e4 2e       	mov	r14, r20
    1b5a:	f5 2e       	mov	r15, r21
	if (data == 0)
	{
		lCD_write_char('0');
	}

	for(i = 0 ; data != 0; i++)
    1b5c:	1f 5f       	subi	r17, 0xFF	; 255
    1b5e:	c1 14       	cp	r12, r1
    1b60:	d1 04       	cpc	r13, r1
    1b62:	e1 04       	cpc	r14, r1
    1b64:	f1 04       	cpc	r15, r1
    1b66:	21 f7       	brne	.-56     	; 0x1b30 <LCD_write_number+0x34>
	{
		arr[i] = data % 10 + 48;
		data /= 10;
	}
	i--;
    1b68:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0)
    1b6a:	0c c0       	rjmp	.+24     	; 0x1b84 <LCD_write_number+0x88>
	{
		lCD_write_char (arr[i]);
    1b6c:	e1 e0       	ldi	r30, 0x01	; 1
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	ec 0f       	add	r30, r28
    1b72:	fd 1f       	adc	r31, r29
    1b74:	e1 0f       	add	r30, r17
    1b76:	f1 1d       	adc	r31, r1
    1b78:	17 fd       	sbrc	r17, 7
    1b7a:	fa 95       	dec	r31
    1b7c:	80 81       	ld	r24, Z
    1b7e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <lCD_write_char>
		i--;
    1b82:	11 50       	subi	r17, 0x01	; 1
	{
		arr[i] = data % 10 + 48;
		data /= 10;
	}
	i--;
	while (i >= 0)
    1b84:	11 23       	and	r17, r17
    1b86:	94 f7       	brge	.-28     	; 0x1b6c <LCD_write_number+0x70>
	{
		lCD_write_char (arr[i]);
		i--;
	}
}
    1b88:	2a 96       	adiw	r28, 0x0a	; 10
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	df 90       	pop	r13
    1ba0:	cf 90       	pop	r12
    1ba2:	08 95       	ret

00001ba4 <LCD_write_string>:
OutType:
Description:
************************/

void LCD_write_string(u8 *data)
{
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	8c 01       	movw	r16, r24
	u8 i = 0;
    1bac:	c0 e0       	ldi	r28, 0x00	; 0
	while (data[i] != 0)
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <LCD_write_string+0x12>
	{
		lCD_write_char(data[i]);
    1bb0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <lCD_write_char>
		i++;
    1bb4:	cf 5f       	subi	r28, 0xFF	; 255
************************/

void LCD_write_string(u8 *data)
{
	u8 i = 0;
	while (data[i] != 0)
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	ec 0f       	add	r30, r28
    1bba:	f1 1d       	adc	r31, r1
    1bbc:	80 81       	ld	r24, Z
    1bbe:	81 11       	cpse	r24, r1
    1bc0:	f7 cf       	rjmp	.-18     	; 0x1bb0 <LCD_write_string+0xc>
	{
		lCD_write_char(data[i]);
		i++;
	}
}
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <vTask1>:
 return 0;
}

void vTask1(void* pvParameters)       //called every 1 sec...through callback concept
{
	vTaskDelay(500);
    1bca:	84 ef       	ldi	r24, 0xF4	; 244
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	0e 94 67 09 	call	0x12ce	; 0x12ce <vTaskDelay>
	while(1)
	{
		if(pdTRUE==xSemaphoreTake(xSemaphore,0))
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <xSemaphore>
    1bda:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <xSemaphore+0x1>
    1bde:	0e 94 3a 04 	call	0x874	; 0x874 <xQueueSemaphoreTake>
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	b1 f7       	brne	.-20     	; 0x1bd2 <vTask1+0x8>
		{
			LCD_write_string("Task 1");
    1be6:	86 e6       	ldi	r24, 0x66	; 102
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_write_string>
			xSemaphoreGive(xSemaphore);
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <xSemaphore>
    1bfc:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <xSemaphore+0x1>
    1c00:	0e 94 a8 03 	call	0x750	; 0x750 <xQueueGenericSend>
			vTaskDelay(50);
    1c04:	82 e3       	ldi	r24, 0x32	; 50
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 67 09 	call	0x12ce	; 0x12ce <vTaskDelay>
    1c0c:	e2 cf       	rjmp	.-60     	; 0x1bd2 <vTask1+0x8>

00001c0e <vTask2>:
	}

}
void vTask2(void* pvParameters)
{
	vTaskDelay(500);
    1c0e:	84 ef       	ldi	r24, 0xF4	; 244
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 67 09 	call	0x12ce	; 0x12ce <vTaskDelay>
	while(1)
	{
		if(pdTRUE==xSemaphoreTake(xSemaphore,0))
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <xSemaphore>
    1c1e:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <xSemaphore+0x1>
    1c22:	0e 94 3a 04 	call	0x874	; 0x874 <xQueueSemaphoreTake>
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	b1 f7       	brne	.-20     	; 0x1c16 <vTask2+0x8>
		{
			LCD_write_number("Task 2");
    1c2a:	6d e6       	ldi	r22, 0x6D	; 109
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	07 2e       	mov	r0, r23
    1c30:	00 0c       	add	r0, r0
    1c32:	88 0b       	sbc	r24, r24
    1c34:	99 0b       	sbc	r25, r25
    1c36:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_write_number>
			xSemaphoreGive(xSemaphore);
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <xSemaphore>
    1c48:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <xSemaphore+0x1>
    1c4c:	0e 94 a8 03 	call	0x750	; 0x750 <xQueueGenericSend>
			vTaskDelay(50);
    1c50:	82 e3       	ldi	r24, 0x32	; 50
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 67 09 	call	0x12ce	; 0x12ce <vTaskDelay>
    1c58:	de cf       	rjmp	.-68     	; 0x1c16 <vTask2+0x8>

00001c5a <main>:
TaskHandle_t xTask4_H = NULL;


int main()
{
	LCD_INIT();
    1c5a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <LCD_INIT>
    1c5e:	87 ea       	ldi	r24, 0xA7	; 167
    1c60:	91 e6       	ldi	r25, 0x61	; 97
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <main+0x8>
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <main+0xe>
    1c68:	00 00       	nop
	_delay_ms(100);
	LCD_write_command(0x0C); // display on, cursor off
    1c6a:	8c e0       	ldi	r24, 0x0C	; 12
    1c6c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_write_command>
	 SET_BIT(DDRB,7);//Red
	 SET_BIT(DDRA,4);//Green
	 SET_BIT(DDRA,5);
	 CLR_BIT(DDRA,6);*/

	vSemaphoreCreateBinary(xSemaphore);
    1c70:	43 e0       	ldi	r20, 0x03	; 3
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	0e 94 67 03 	call	0x6ce	; 0x6ce <xQueueGenericCreate>
    1c7a:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <xSemaphore+0x1>
    1c7e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <xSemaphore>
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	39 f0       	breq	.+14     	; 0x1c94 <main+0x3a>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	0e 94 a8 03 	call	0x750	; 0x750 <xQueueGenericSend>
	xTaskCreate(vTask1,(const char*)"RED",300,NULL,TASK2_PRIORITY,&xTask1_H);
    1c94:	0f 2e       	mov	r0, r31
    1c96:	f1 ed       	ldi	r31, 0xD1	; 209
    1c98:	ef 2e       	mov	r14, r31
    1c9a:	f4 e0       	ldi	r31, 0x04	; 4
    1c9c:	ff 2e       	mov	r15, r31
    1c9e:	f0 2d       	mov	r31, r0
    1ca0:	01 e0       	ldi	r16, 0x01	; 1
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4c e2       	ldi	r20, 0x2C	; 44
    1ca8:	51 e0       	ldi	r21, 0x01	; 1
    1caa:	64 e7       	ldi	r22, 0x74	; 116
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	85 ee       	ldi	r24, 0xE5	; 229
    1cb0:	9d e0       	ldi	r25, 0x0D	; 13
    1cb2:	0e 94 f2 06 	call	0xde4	; 0xde4 <xTaskCreate>
	xTaskCreate(vTask2,(const char*)"GREEN",300,NULL,TASK2_PRIORITY,&xTask2_H);
    1cb6:	0f 2e       	mov	r0, r31
    1cb8:	ff ec       	ldi	r31, 0xCF	; 207
    1cba:	ef 2e       	mov	r14, r31
    1cbc:	f4 e0       	ldi	r31, 0x04	; 4
    1cbe:	ff 2e       	mov	r15, r31
    1cc0:	f0 2d       	mov	r31, r0
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4c e2       	ldi	r20, 0x2C	; 44
    1cc8:	51 e0       	ldi	r21, 0x01	; 1
    1cca:	68 e7       	ldi	r22, 0x78	; 120
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	87 e0       	ldi	r24, 0x07	; 7
    1cd0:	9e e0       	ldi	r25, 0x0E	; 14
    1cd2:	0e 94 f2 06 	call	0xde4	; 0xde4 <xTaskCreate>
	// xTaskCreate(vTask3,(const char*)"BLUE",75,NULL,TASK3_PRIORITY,&xTask3_H);
	// xTaskCreate(vTask4,(const char*)"YELL",75,NULL,TASK4_PRIORITY,&xTask4_H);

	 vTaskStartScheduler();
    1cd6:	0e 94 46 07 	call	0xe8c	; 0xe8c <vTaskStartScheduler>
    1cda:	ff cf       	rjmp	.-2      	; 0x1cda <main+0x80>

00001cdc <__vector_4>:
}


void __vector_4(void) __attribute__ ((signal));
void __vector_4(void)
{
    1cdc:	1f 92       	push	r1
    1cde:	0f 92       	push	r0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	0f 92       	push	r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
	if(private_pCallBackCTC != NULL)
    1cfe:	e0 91 d3 04 	lds	r30, 0x04D3	; 0x8004d3 <private_pCallBackCTC>
    1d02:	f0 91 d4 04 	lds	r31, 0x04D4	; 0x8004d4 <private_pCallBackCTC+0x1>
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <__vector_4+0x30>
	{
		private_pCallBackCTC();
    1d0a:	09 95       	icall
	}
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	bf 91       	pop	r27
    1d12:	af 91       	pop	r26
    1d14:	9f 91       	pop	r25
    1d16:	8f 91       	pop	r24
    1d18:	7f 91       	pop	r23
    1d1a:	6f 91       	pop	r22
    1d1c:	5f 91       	pop	r21
    1d1e:	4f 91       	pop	r20
    1d20:	3f 91       	pop	r19
    1d22:	2f 91       	pop	r18
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	0f 90       	pop	r0
    1d2a:	1f 90       	pop	r1
    1d2c:	18 95       	reti

00001d2e <__udivmodhi4>:
    1d2e:	aa 1b       	sub	r26, r26
    1d30:	bb 1b       	sub	r27, r27
    1d32:	51 e1       	ldi	r21, 0x11	; 17
    1d34:	07 c0       	rjmp	.+14     	; 0x1d44 <__udivmodhi4_ep>

00001d36 <__udivmodhi4_loop>:
    1d36:	aa 1f       	adc	r26, r26
    1d38:	bb 1f       	adc	r27, r27
    1d3a:	a6 17       	cp	r26, r22
    1d3c:	b7 07       	cpc	r27, r23
    1d3e:	10 f0       	brcs	.+4      	; 0x1d44 <__udivmodhi4_ep>
    1d40:	a6 1b       	sub	r26, r22
    1d42:	b7 0b       	sbc	r27, r23

00001d44 <__udivmodhi4_ep>:
    1d44:	88 1f       	adc	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	5a 95       	dec	r21
    1d4a:	a9 f7       	brne	.-22     	; 0x1d36 <__udivmodhi4_loop>
    1d4c:	80 95       	com	r24
    1d4e:	90 95       	com	r25
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	08 95       	ret

00001d56 <__udivmodsi4>:
    1d56:	a1 e2       	ldi	r26, 0x21	; 33
    1d58:	1a 2e       	mov	r1, r26
    1d5a:	aa 1b       	sub	r26, r26
    1d5c:	bb 1b       	sub	r27, r27
    1d5e:	fd 01       	movw	r30, r26
    1d60:	0d c0       	rjmp	.+26     	; 0x1d7c <__udivmodsi4_ep>

00001d62 <__udivmodsi4_loop>:
    1d62:	aa 1f       	adc	r26, r26
    1d64:	bb 1f       	adc	r27, r27
    1d66:	ee 1f       	adc	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	a2 17       	cp	r26, r18
    1d6c:	b3 07       	cpc	r27, r19
    1d6e:	e4 07       	cpc	r30, r20
    1d70:	f5 07       	cpc	r31, r21
    1d72:	20 f0       	brcs	.+8      	; 0x1d7c <__udivmodsi4_ep>
    1d74:	a2 1b       	sub	r26, r18
    1d76:	b3 0b       	sbc	r27, r19
    1d78:	e4 0b       	sbc	r30, r20
    1d7a:	f5 0b       	sbc	r31, r21

00001d7c <__udivmodsi4_ep>:
    1d7c:	66 1f       	adc	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	88 1f       	adc	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	1a 94       	dec	r1
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <__udivmodsi4_loop>
    1d88:	60 95       	com	r22
    1d8a:	70 95       	com	r23
    1d8c:	80 95       	com	r24
    1d8e:	90 95       	com	r25
    1d90:	9b 01       	movw	r18, r22
    1d92:	ac 01       	movw	r20, r24
    1d94:	bd 01       	movw	r22, r26
    1d96:	cf 01       	movw	r24, r30
    1d98:	08 95       	ret

00001d9a <memcpy>:
    1d9a:	fb 01       	movw	r30, r22
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <memcpy+0xa>
    1da0:	01 90       	ld	r0, Z+
    1da2:	0d 92       	st	X+, r0
    1da4:	41 50       	subi	r20, 0x01	; 1
    1da6:	50 40       	sbci	r21, 0x00	; 0
    1da8:	d8 f7       	brcc	.-10     	; 0x1da0 <memcpy+0x6>
    1daa:	08 95       	ret

00001dac <_exit>:
    1dac:	f8 94       	cli

00001dae <__stop_program>:
    1dae:	ff cf       	rjmp	.-2      	; 0x1dae <__stop_program>
