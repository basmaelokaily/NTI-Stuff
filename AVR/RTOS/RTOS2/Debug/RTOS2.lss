
RTOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001164  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00001164  000011f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000457  00800082  00800082  0000121a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034d3  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4d  00000000  00000000  00004a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002191  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000940  00000000  00000000  00007a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000120a  00000000  00000000  000083a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003058  00000000  00000000  000095ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 08 	call	0x10b0	; 0x10b0 <main>
      8a:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      98:	0e 94 bd 04 	call	0x97a	; 0x97a <vTaskSuspendAll>
	{
		/* Check_Password there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      9c:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__data_end>
      a0:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <__data_end+0x1>
      a4:	c9 01       	movw	r24, r18
      a6:	8c 0f       	add	r24, r28
      a8:	9d 1f       	adc	r25, r29
      aa:	88 3e       	cpi	r24, 0xE8	; 232
      ac:	43 e0       	ldi	r20, 0x03	; 3
      ae:	94 07       	cpc	r25, r20
      b0:	58 f4       	brcc	.+22     	; 0xc8 <pvPortMalloc+0x36>
      b2:	28 17       	cp	r18, r24
      b4:	39 07       	cpc	r19, r25
      b6:	58 f4       	brcc	.+22     	; 0xce <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check_Password for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      b8:	e9 01       	movw	r28, r18
      ba:	cc 57       	subi	r28, 0x7C	; 124
      bc:	df 4f       	sbci	r29, 0xFF	; 255
			xNextFreeByte += xWantedSize;			
      be:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0x1>
      c2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
      c6:	05 c0       	rjmp	.+10     	; 0xd2 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      c8:	c0 e0       	ldi	r28, 0x00	; 0
      ca:	d0 e0       	ldi	r29, 0x00	; 0
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <pvPortMalloc+0x40>
      ce:	c0 e0       	ldi	r28, 0x00	; 0
      d0:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
      d2:	0e 94 dd 05 	call	0xbba	; 0xbba <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
      d6:	ce 01       	movw	r24, r28
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
      de:	08 95       	ret

000000e0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      e0:	fc 01       	movw	r30, r24
      e2:	03 96       	adiw	r24, 0x03	; 3
      e4:	92 83       	std	Z+2, r25	; 0x02
      e6:	81 83       	std	Z+1, r24	; 0x01
      e8:	2f ef       	ldi	r18, 0xFF	; 255
      ea:	3f ef       	ldi	r19, 0xFF	; 255
      ec:	34 83       	std	Z+4, r19	; 0x04
      ee:	23 83       	std	Z+3, r18	; 0x03
      f0:	96 83       	std	Z+6, r25	; 0x06
      f2:	85 83       	std	Z+5, r24	; 0x05
      f4:	90 87       	std	Z+8, r25	; 0x08
      f6:	87 83       	std	Z+7, r24	; 0x07
      f8:	10 82       	st	Z, r1
      fa:	08 95       	ret

000000fc <vListInitialiseItem>:
      fc:	fc 01       	movw	r30, r24
      fe:	11 86       	std	Z+9, r1	; 0x09
     100:	10 86       	std	Z+8, r1	; 0x08
     102:	08 95       	ret

00000104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     10a:	48 81       	ld	r20, Y
     10c:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     10e:	4f 3f       	cpi	r20, 0xFF	; 255
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	52 07       	cpc	r21, r18
     114:	21 f4       	brne	.+8      	; 0x11e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     116:	fc 01       	movw	r30, r24
     118:	a7 81       	ldd	r26, Z+7	; 0x07
     11a:	b0 85       	ldd	r27, Z+8	; 0x08
     11c:	0d c0       	rjmp	.+26     	; 0x138 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     11e:	dc 01       	movw	r26, r24
     120:	13 96       	adiw	r26, 0x03	; 3
     122:	01 c0       	rjmp	.+2      	; 0x126 <vListInsert+0x22>
     124:	df 01       	movw	r26, r30
     126:	12 96       	adiw	r26, 0x02	; 2
     128:	ed 91       	ld	r30, X+
     12a:	fc 91       	ld	r31, X
     12c:	13 97       	sbiw	r26, 0x03	; 3
     12e:	20 81       	ld	r18, Z
     130:	31 81       	ldd	r19, Z+1	; 0x01
     132:	42 17       	cp	r20, r18
     134:	53 07       	cpc	r21, r19
     136:	b0 f7       	brcc	.-20     	; 0x124 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     138:	12 96       	adiw	r26, 0x02	; 2
     13a:	ed 91       	ld	r30, X+
     13c:	fc 91       	ld	r31, X
     13e:	13 97       	sbiw	r26, 0x03	; 3
     140:	fb 83       	std	Y+3, r31	; 0x03
     142:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     144:	d5 83       	std	Z+5, r29	; 0x05
     146:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     148:	bd 83       	std	Y+5, r27	; 0x05
     14a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     14c:	13 96       	adiw	r26, 0x03	; 3
     14e:	dc 93       	st	X, r29
     150:	ce 93       	st	-X, r28
     152:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     154:	99 87       	std	Y+9, r25	; 0x09
     156:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     158:	fc 01       	movw	r30, r24
     15a:	20 81       	ld	r18, Z
     15c:	2f 5f       	subi	r18, 0xFF	; 255
     15e:	20 83       	st	Z, r18
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     16c:	a0 85       	ldd	r26, Z+8	; 0x08
     16e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     170:	c2 81       	ldd	r28, Z+2	; 0x02
     172:	d3 81       	ldd	r29, Z+3	; 0x03
     174:	84 81       	ldd	r24, Z+4	; 0x04
     176:	95 81       	ldd	r25, Z+5	; 0x05
     178:	9d 83       	std	Y+5, r25	; 0x05
     17a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     17c:	c4 81       	ldd	r28, Z+4	; 0x04
     17e:	d5 81       	ldd	r29, Z+5	; 0x05
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	93 81       	ldd	r25, Z+3	; 0x03
     184:	9b 83       	std	Y+3, r25	; 0x03
     186:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     188:	11 96       	adiw	r26, 0x01	; 1
     18a:	8d 91       	ld	r24, X+
     18c:	9c 91       	ld	r25, X
     18e:	12 97       	sbiw	r26, 0x02	; 2
     190:	e8 17       	cp	r30, r24
     192:	f9 07       	cpc	r31, r25
     194:	31 f4       	brne	.+12     	; 0x1a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     196:	84 81       	ldd	r24, Z+4	; 0x04
     198:	95 81       	ldd	r25, Z+5	; 0x05
     19a:	12 96       	adiw	r26, 0x02	; 2
     19c:	9c 93       	st	X, r25
     19e:	8e 93       	st	-X, r24
     1a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1a2:	11 86       	std	Z+9, r1	; 0x09
     1a4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1a6:	8c 91       	ld	r24, X
     1a8:	81 50       	subi	r24, 0x01	; 1
     1aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1ac:	8c 91       	ld	r24, X
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     1b4:	1b bc       	out	0x2b, r1	; 43
     1b6:	89 ef       	ldi	r24, 0xF9	; 249
     1b8:	8a bd       	out	0x2a, r24	; 42
     1ba:	8b e0       	ldi	r24, 0x0B	; 11
     1bc:	8e bd       	out	0x2e, r24	; 46
     1be:	89 b7       	in	r24, 0x39	; 57
     1c0:	80 61       	ori	r24, 0x10	; 16
     1c2:	89 bf       	out	0x39, r24	; 57
     1c4:	08 95       	ret

000001c6 <pxPortInitialiseStack>:
     1c6:	31 e1       	ldi	r19, 0x11	; 17
     1c8:	fc 01       	movw	r30, r24
     1ca:	30 83       	st	Z, r19
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	22 e2       	ldi	r18, 0x22	; 34
     1d0:	20 83       	st	Z, r18
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	a3 e3       	ldi	r26, 0x33	; 51
     1d6:	a0 83       	st	Z, r26
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 83       	st	Z, r22
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	70 83       	st	Z, r23
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	10 82       	st	Z, r1
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	60 e8       	ldi	r22, 0x80	; 128
     1e8:	60 83       	st	Z, r22
     1ea:	31 97       	sbiw	r30, 0x01	; 1
     1ec:	10 82       	st	Z, r1
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	63 e0       	ldi	r22, 0x03	; 3
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	64 e0       	ldi	r22, 0x04	; 4
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	65 e0       	ldi	r22, 0x05	; 5
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	66 e0       	ldi	r22, 0x06	; 6
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	67 e0       	ldi	r22, 0x07	; 7
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	68 e0       	ldi	r22, 0x08	; 8
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	69 e0       	ldi	r22, 0x09	; 9
     21c:	60 83       	st	Z, r22
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	60 e1       	ldi	r22, 0x10	; 16
     222:	60 83       	st	Z, r22
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	32 e1       	ldi	r19, 0x12	; 18
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	33 e1       	ldi	r19, 0x13	; 19
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	34 e1       	ldi	r19, 0x14	; 20
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	35 e1       	ldi	r19, 0x15	; 21
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	36 e1       	ldi	r19, 0x16	; 22
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	37 e1       	ldi	r19, 0x17	; 23
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	38 e1       	ldi	r19, 0x18	; 24
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	39 e1       	ldi	r19, 0x19	; 25
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	30 e2       	ldi	r19, 0x20	; 32
     25c:	30 83       	st	Z, r19
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	31 e2       	ldi	r19, 0x21	; 33
     262:	30 83       	st	Z, r19
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	20 83       	st	Z, r18
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	23 e2       	ldi	r18, 0x23	; 35
     26c:	20 83       	st	Z, r18
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	40 83       	st	Z, r20
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	50 83       	st	Z, r21
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	26 e2       	ldi	r18, 0x26	; 38
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	27 e2       	ldi	r18, 0x27	; 39
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	28 e2       	ldi	r18, 0x28	; 40
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	29 e2       	ldi	r18, 0x29	; 41
     28c:	20 83       	st	Z, r18
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	20 e3       	ldi	r18, 0x30	; 48
     292:	20 83       	st	Z, r18
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	21 e3       	ldi	r18, 0x31	; 49
     298:	20 83       	st	Z, r18
     29a:	86 97       	sbiw	r24, 0x26	; 38
     29c:	08 95       	ret

0000029e <xPortStartScheduler>:
     29e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <prvSetupTimerInterrupt>
     2a2:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     2a6:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     2aa:	cd 91       	ld	r28, X+
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	dd 91       	ld	r29, X+
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	bf 90       	pop	r11
     2dc:	af 90       	pop	r10
     2de:	9f 90       	pop	r9
     2e0:	8f 90       	pop	r8
     2e2:	7f 90       	pop	r7
     2e4:	6f 90       	pop	r6
     2e6:	5f 90       	pop	r5
     2e8:	4f 90       	pop	r4
     2ea:	3f 90       	pop	r3
     2ec:	2f 90       	pop	r2
     2ee:	1f 90       	pop	r1
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	08 95       	ret
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	0f 92       	push	r0
     304:	1f 92       	push	r1
     306:	11 24       	eor	r1, r1
     308:	2f 92       	push	r2
     30a:	3f 92       	push	r3
     30c:	4f 92       	push	r4
     30e:	5f 92       	push	r5
     310:	6f 92       	push	r6
     312:	7f 92       	push	r7
     314:	8f 92       	push	r8
     316:	9f 92       	push	r9
     318:	af 92       	push	r10
     31a:	bf 92       	push	r11
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
     344:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     348:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     34c:	0d b6       	in	r0, 0x3d	; 61
     34e:	0d 92       	st	X+, r0
     350:	0e b6       	in	r0, 0x3e	; 62
     352:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     354:	0e 94 c8 06 	call	0xd90	; 0xd90 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     358:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     35c:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     360:	cd 91       	ld	r28, X+
     362:	cd bf       	out	0x3d, r28	; 61
     364:	dd 91       	ld	r29, X+
     366:	de bf       	out	0x3e, r29	; 62
     368:	ff 91       	pop	r31
     36a:	ef 91       	pop	r30
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	7f 91       	pop	r23
     37a:	6f 91       	pop	r22
     37c:	5f 91       	pop	r21
     37e:	4f 91       	pop	r20
     380:	3f 91       	pop	r19
     382:	2f 91       	pop	r18
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	3f 90       	pop	r3
     3a2:	2f 90       	pop	r2
     3a4:	1f 90       	pop	r1
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0

	asm volatile ( "ret" );
     3ac:	08 95       	ret

000003ae <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	0f 92       	push	r0
     3b6:	1f 92       	push	r1
     3b8:	11 24       	eor	r1, r1
     3ba:	2f 92       	push	r2
     3bc:	3f 92       	push	r3
     3be:	4f 92       	push	r4
     3c0:	5f 92       	push	r5
     3c2:	6f 92       	push	r6
     3c4:	7f 92       	push	r7
     3c6:	8f 92       	push	r8
     3c8:	9f 92       	push	r9
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	ef 93       	push	r30
     3f4:	ff 93       	push	r31
     3f6:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     3fa:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     3fe:	0d b6       	in	r0, 0x3d	; 61
     400:	0d 92       	st	X+, r0
     402:	0e b6       	in	r0, 0x3e	; 62
     404:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     406:	0e 94 c3 04 	call	0x986	; 0x986 <xTaskIncrementTick>
     40a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     40c:	0e 94 c8 06 	call	0xd90	; 0xd90 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     410:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     414:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     418:	cd 91       	ld	r28, X+
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	dd 91       	ld	r29, X+
     41e:	de bf       	out	0x3e, r29	; 62
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	1f 90       	pop	r1
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0

	asm volatile ( "ret" );
     464:	08 95       	ret

00000466 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     466:	0e 94 d7 01 	call	0x3ae	; 0x3ae <vPortYieldFromTick>
		asm volatile ( "reti" );
     46a:	18 95       	reti

0000046c <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     46c:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <pxDelayedTaskList>
     470:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <pxDelayedTaskList+0x1>
     474:	80 81       	ld	r24, Z
     476:	81 11       	cpse	r24, r1
     478:	07 c0       	rjmp	.+14     	; 0x488 <prvResetNextTaskUnblockTime+0x1c>
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	9f ef       	ldi	r25, 0xFF	; 255
     47e:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <xNextTaskUnblockTime+0x1>
     482:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xNextTaskUnblockTime>
     486:	08 95       	ret
     488:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <pxDelayedTaskList>
     48c:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <pxDelayedTaskList+0x1>
     490:	05 80       	ldd	r0, Z+5	; 0x05
     492:	f6 81       	ldd	r31, Z+6	; 0x06
     494:	e0 2d       	mov	r30, r0
     496:	80 81       	ld	r24, Z
     498:	91 81       	ldd	r25, Z+1	; 0x01
     49a:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <xNextTaskUnblockTime+0x1>
     49e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xNextTaskUnblockTime>
     4a2:	08 95       	ret

000004a4 <prvDeleteTCB>:
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
     4aa:	8f 89       	ldd	r24, Y+23	; 0x17
     4ac:	98 8d       	ldd	r25, Y+24	; 0x18
     4ae:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
     4b2:	ce 01       	movw	r24, r28
     4b4:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <prvInitialiseNewTask>:
     4be:	6f 92       	push	r6
     4c0:	7f 92       	push	r7
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	4c 01       	movw	r8, r24
     4de:	d5 01       	movw	r26, r10
     4e0:	57 96       	adiw	r26, 0x17	; 23
     4e2:	8d 91       	ld	r24, X+
     4e4:	9c 91       	ld	r25, X
     4e6:	58 97       	sbiw	r26, 0x18	; 24
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	31 09       	sbc	r19, r1
     4ec:	3c 01       	movw	r6, r24
     4ee:	62 0e       	add	r6, r18
     4f0:	73 1e       	adc	r7, r19
     4f2:	61 15       	cp	r22, r1
     4f4:	71 05       	cpc	r23, r1
     4f6:	89 f4       	brne	.+34     	; 0x51a <prvInitialiseNewTask+0x5c>
     4f8:	16 c0       	rjmp	.+44     	; 0x526 <prvInitialiseNewTask+0x68>
     4fa:	82 2f       	mov	r24, r18
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fb 01       	movw	r30, r22
     500:	e8 0f       	add	r30, r24
     502:	f9 1f       	adc	r31, r25
     504:	30 81       	ld	r19, Z
     506:	d5 01       	movw	r26, r10
     508:	a8 0f       	add	r26, r24
     50a:	b9 1f       	adc	r27, r25
     50c:	59 96       	adiw	r26, 0x19	; 25
     50e:	3c 93       	st	X, r19
     510:	80 81       	ld	r24, Z
     512:	88 23       	and	r24, r24
     514:	29 f0       	breq	.+10     	; 0x520 <prvInitialiseNewTask+0x62>
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	01 c0       	rjmp	.+2      	; 0x51c <prvInitialiseNewTask+0x5e>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	28 30       	cpi	r18, 0x08	; 8
     51e:	68 f3       	brcs	.-38     	; 0x4fa <prvInitialiseNewTask+0x3c>
     520:	f5 01       	movw	r30, r10
     522:	10 a2       	std	Z+32, r1	; 0x20
     524:	03 c0       	rjmp	.+6      	; 0x52c <prvInitialiseNewTask+0x6e>
     526:	d5 01       	movw	r26, r10
     528:	59 96       	adiw	r26, 0x19	; 25
     52a:	1c 92       	st	X, r1
     52c:	b3 e0       	ldi	r27, 0x03	; 3
     52e:	be 15       	cp	r27, r14
     530:	20 f4       	brcc	.+8      	; 0x53a <prvInitialiseNewTask+0x7c>
     532:	0f 2e       	mov	r0, r31
     534:	f3 e0       	ldi	r31, 0x03	; 3
     536:	ef 2e       	mov	r14, r31
     538:	f0 2d       	mov	r31, r0
     53a:	f5 01       	movw	r30, r10
     53c:	e6 8a       	std	Z+22, r14	; 0x16
     53e:	e1 a2       	std	Z+33, r14	; 0x21
     540:	12 a2       	std	Z+34, r1	; 0x22
     542:	c5 01       	movw	r24, r10
     544:	02 96       	adiw	r24, 0x02	; 2
     546:	0e 94 7e 00 	call	0xfc	; 0xfc <vListInitialiseItem>
     54a:	c5 01       	movw	r24, r10
     54c:	0c 96       	adiw	r24, 0x0c	; 12
     54e:	0e 94 7e 00 	call	0xfc	; 0xfc <vListInitialiseItem>
     552:	d5 01       	movw	r26, r10
     554:	19 96       	adiw	r26, 0x09	; 9
     556:	bc 92       	st	X, r11
     558:	ae 92       	st	-X, r10
     55a:	18 97       	sbiw	r26, 0x08	; 8
     55c:	84 e0       	ldi	r24, 0x04	; 4
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	8e 19       	sub	r24, r14
     562:	91 09       	sbc	r25, r1
     564:	1d 96       	adiw	r26, 0x0d	; 13
     566:	9c 93       	st	X, r25
     568:	8e 93       	st	-X, r24
     56a:	1c 97       	sbiw	r26, 0x0c	; 12
     56c:	53 96       	adiw	r26, 0x13	; 19
     56e:	bc 92       	st	X, r11
     570:	ae 92       	st	-X, r10
     572:	52 97       	sbiw	r26, 0x12	; 18
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	f5 01       	movw	r30, r10
     578:	b3 96       	adiw	r30, 0x23	; 35
     57a:	df 01       	movw	r26, r30
     57c:	1d 92       	st	X+, r1
     57e:	8a 95       	dec	r24
     580:	e9 f7       	brne	.-6      	; 0x57c <prvInitialiseNewTask+0xbe>
     582:	f5 01       	movw	r30, r10
     584:	17 a2       	std	Z+39, r1	; 0x27
     586:	a8 01       	movw	r20, r16
     588:	b4 01       	movw	r22, r8
     58a:	c3 01       	movw	r24, r6
     58c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <pxPortInitialiseStack>
     590:	d5 01       	movw	r26, r10
     592:	8d 93       	st	X+, r24
     594:	9c 93       	st	X, r25
     596:	c1 14       	cp	r12, r1
     598:	d1 04       	cpc	r13, r1
     59a:	19 f0       	breq	.+6      	; 0x5a2 <prvInitialiseNewTask+0xe4>
     59c:	f6 01       	movw	r30, r12
     59e:	b1 82       	std	Z+1, r11	; 0x01
     5a0:	a0 82       	st	Z, r10
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	9f 90       	pop	r9
     5b6:	8f 90       	pop	r8
     5b8:	7f 90       	pop	r7
     5ba:	6f 90       	pop	r6
     5bc:	08 95       	ret

000005be <prvInitialiseTaskLists>:
     5be:	cf 93       	push	r28
     5c0:	c0 e0       	ldi	r28, 0x00	; 0
     5c2:	10 c0       	rjmp	.+32     	; 0x5e4 <prvInitialiseTaskLists+0x26>
     5c4:	8c 2f       	mov	r24, r28
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	9c 01       	movw	r18, r24
     5ca:	22 0f       	add	r18, r18
     5cc:	33 1f       	adc	r19, r19
     5ce:	22 0f       	add	r18, r18
     5d0:	33 1f       	adc	r19, r19
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	82 0f       	add	r24, r18
     5d8:	93 1f       	adc	r25, r19
     5da:	83 55       	subi	r24, 0x53	; 83
     5dc:	9b 4f       	sbci	r25, 0xFB	; 251
     5de:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     5e2:	cf 5f       	subi	r28, 0xFF	; 255
     5e4:	c4 30       	cpi	r28, 0x04	; 4
     5e6:	70 f3       	brcs	.-36     	; 0x5c4 <prvInitialiseTaskLists+0x6>
     5e8:	84 ea       	ldi	r24, 0xA4	; 164
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     5f0:	8b e9       	ldi	r24, 0x9B	; 155
     5f2:	94 e0       	ldi	r25, 0x04	; 4
     5f4:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     5f8:	8e e8       	ldi	r24, 0x8E	; 142
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     600:	85 e8       	ldi	r24, 0x85	; 133
     602:	94 e0       	ldi	r25, 0x04	; 4
     604:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     608:	8b e7       	ldi	r24, 0x7B	; 123
     60a:	94 e0       	ldi	r25, 0x04	; 4
     60c:	0e 94 70 00 	call	0xe0	; 0xe0 <vListInitialise>
     610:	84 ea       	ldi	r24, 0xA4	; 164
     612:	94 e0       	ldi	r25, 0x04	; 4
     614:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <pxDelayedTaskList+0x1>
     618:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <pxDelayedTaskList>
     61c:	8b e9       	ldi	r24, 0x9B	; 155
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <pxOverflowDelayedTaskList+0x1>
     624:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <pxOverflowDelayedTaskList>
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <prvAddNewTaskToReadyList>:
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	0f 92       	push	r0
     638:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <uxCurrentNumberOfTasks>
     63c:	8f 5f       	subi	r24, 0xFF	; 255
     63e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <uxCurrentNumberOfTasks>
     642:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     646:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     64a:	89 2b       	or	r24, r25
     64c:	59 f4       	brne	.+22     	; 0x664 <prvAddNewTaskToReadyList+0x38>
     64e:	d0 93 d2 04 	sts	0x04D2, r29	; 0x8004d2 <pxCurrentTCB+0x1>
     652:	c0 93 d1 04 	sts	0x04D1, r28	; 0x8004d1 <pxCurrentTCB>
     656:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <uxCurrentNumberOfTasks>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	99 f4       	brne	.+38     	; 0x684 <prvAddNewTaskToReadyList+0x58>
     65e:	0e 94 df 02 	call	0x5be	; 0x5be <prvInitialiseTaskLists>
     662:	10 c0       	rjmp	.+32     	; 0x684 <prvAddNewTaskToReadyList+0x58>
     664:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <xSchedulerRunning>
     668:	81 11       	cpse	r24, r1
     66a:	0c c0       	rjmp	.+24     	; 0x684 <prvAddNewTaskToReadyList+0x58>
     66c:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     670:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     674:	96 89       	ldd	r25, Z+22	; 0x16
     676:	8e 89       	ldd	r24, Y+22	; 0x16
     678:	89 17       	cp	r24, r25
     67a:	20 f0       	brcs	.+8      	; 0x684 <prvAddNewTaskToReadyList+0x58>
     67c:	d0 93 d2 04 	sts	0x04D2, r29	; 0x8004d2 <pxCurrentTCB+0x1>
     680:	c0 93 d1 04 	sts	0x04D1, r28	; 0x8004d1 <pxCurrentTCB>
     684:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <uxTaskNumber>
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <uxTaskNumber>
     68e:	8e 89       	ldd	r24, Y+22	; 0x16
     690:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <uxTopReadyPriority>
     694:	98 17       	cp	r25, r24
     696:	10 f4       	brcc	.+4      	; 0x69c <prvAddNewTaskToReadyList+0x70>
     698:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <uxTopReadyPriority>
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	8e 0f       	add	r24, r30
     6ae:	9f 1f       	adc	r25, r31
     6b0:	fc 01       	movw	r30, r24
     6b2:	e3 55       	subi	r30, 0x53	; 83
     6b4:	fb 4f       	sbci	r31, 0xFB	; 251
     6b6:	01 80       	ldd	r0, Z+1	; 0x01
     6b8:	f2 81       	ldd	r31, Z+2	; 0x02
     6ba:	e0 2d       	mov	r30, r0
     6bc:	fd 83       	std	Y+5, r31	; 0x05
     6be:	ec 83       	std	Y+4, r30	; 0x04
     6c0:	84 81       	ldd	r24, Z+4	; 0x04
     6c2:	95 81       	ldd	r25, Z+5	; 0x05
     6c4:	9f 83       	std	Y+7, r25	; 0x07
     6c6:	8e 83       	std	Y+6, r24	; 0x06
     6c8:	a4 81       	ldd	r26, Z+4	; 0x04
     6ca:	b5 81       	ldd	r27, Z+5	; 0x05
     6cc:	ce 01       	movw	r24, r28
     6ce:	02 96       	adiw	r24, 0x02	; 2
     6d0:	13 96       	adiw	r26, 0x03	; 3
     6d2:	9c 93       	st	X, r25
     6d4:	8e 93       	st	-X, r24
     6d6:	12 97       	sbiw	r26, 0x02	; 2
     6d8:	95 83       	std	Z+5, r25	; 0x05
     6da:	84 83       	std	Z+4, r24	; 0x04
     6dc:	ee 89       	ldd	r30, Y+22	; 0x16
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	cf 01       	movw	r24, r30
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	e8 0f       	add	r30, r24
     6f0:	f9 1f       	adc	r31, r25
     6f2:	e3 55       	subi	r30, 0x53	; 83
     6f4:	fb 4f       	sbci	r31, 0xFB	; 251
     6f6:	fb 87       	std	Y+11, r31	; 0x0b
     6f8:	ea 87       	std	Y+10, r30	; 0x0a
     6fa:	80 81       	ld	r24, Z
     6fc:	8f 5f       	subi	r24, 0xFF	; 255
     6fe:	80 83       	st	Z, r24
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <xSchedulerRunning>
     708:	88 23       	and	r24, r24
     70a:	51 f0       	breq	.+20     	; 0x720 <prvAddNewTaskToReadyList+0xf4>
     70c:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     710:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     714:	96 89       	ldd	r25, Z+22	; 0x16
     716:	8e 89       	ldd	r24, Y+22	; 0x16
     718:	98 17       	cp	r25, r24
     71a:	10 f4       	brcc	.+4      	; 0x720 <prvAddNewTaskToReadyList+0xf4>
     71c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <prvCheckTasksWaitingTermination>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	1c c0       	rjmp	.+56     	; 0x764 <prvCheckTasksWaitingTermination+0x3e>
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	0f 92       	push	r0
     732:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <xTasksWaitingTermination+0x5>
     736:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <xTasksWaitingTermination+0x6>
     73a:	c6 81       	ldd	r28, Z+6	; 0x06
     73c:	d7 81       	ldd	r29, Z+7	; 0x07
     73e:	ce 01       	movw	r24, r28
     740:	02 96       	adiw	r24, 0x02	; 2
     742:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
     746:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <uxCurrentNumberOfTasks>
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <uxCurrentNumberOfTasks>
     750:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <uxDeletedTasksWaitingCleanUp>
     754:	81 50       	subi	r24, 0x01	; 1
     756:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <uxDeletedTasksWaitingCleanUp>
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	ce 01       	movw	r24, r28
     760:	0e 94 52 02 	call	0x4a4	; 0x4a4 <prvDeleteTCB>
     764:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <uxDeletedTasksWaitingCleanUp>
     768:	81 11       	cpse	r24, r1
     76a:	e0 cf       	rjmp	.-64     	; 0x72c <prvCheckTasksWaitingTermination+0x6>
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <prvIdleTask>:
     772:	0e 94 93 03 	call	0x726	; 0x726 <prvCheckTasksWaitingTermination>
     776:	fd cf       	rjmp	.-6      	; 0x772 <prvIdleTask>

00000778 <prvAddCurrentTaskToDelayedList>:
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	ec 01       	movw	r28, r24
     784:	f6 2e       	mov	r15, r22
     786:	00 91 78 04 	lds	r16, 0x0478	; 0x800478 <xTickCount>
     78a:	10 91 79 04 	lds	r17, 0x0479	; 0x800479 <xTickCount+0x1>
     78e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     792:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     796:	02 96       	adiw	r24, 0x02	; 2
     798:	0e 94 b3 00 	call	0x166	; 0x166 <uxListRemove>
     79c:	cf 3f       	cpi	r28, 0xFF	; 255
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	d8 07       	cpc	r29, r24
     7a2:	b1 f5       	brne	.+108    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7a4:	ff 20       	and	r15, r15
     7a6:	a1 f1       	breq	.+104    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7a8:	eb e7       	ldi	r30, 0x7B	; 123
     7aa:	f4 e0       	ldi	r31, 0x04	; 4
     7ac:	a1 81       	ldd	r26, Z+1	; 0x01
     7ae:	b2 81       	ldd	r27, Z+2	; 0x02
     7b0:	c0 91 d1 04 	lds	r28, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     7b4:	d0 91 d2 04 	lds	r29, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     7b8:	bd 83       	std	Y+5, r27	; 0x05
     7ba:	ac 83       	std	Y+4, r26	; 0x04
     7bc:	c0 91 d1 04 	lds	r28, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     7c0:	d0 91 d2 04 	lds	r29, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     7c4:	14 96       	adiw	r26, 0x04	; 4
     7c6:	8d 91       	ld	r24, X+
     7c8:	9c 91       	ld	r25, X
     7ca:	15 97       	sbiw	r26, 0x05	; 5
     7cc:	9f 83       	std	Y+7, r25	; 0x07
     7ce:	8e 83       	std	Y+6, r24	; 0x06
     7d0:	14 96       	adiw	r26, 0x04	; 4
     7d2:	cd 91       	ld	r28, X+
     7d4:	dc 91       	ld	r29, X
     7d6:	15 97       	sbiw	r26, 0x05	; 5
     7d8:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     7dc:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     7e0:	02 96       	adiw	r24, 0x02	; 2
     7e2:	9b 83       	std	Y+3, r25	; 0x03
     7e4:	8a 83       	std	Y+2, r24	; 0x02
     7e6:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     7ea:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     7ee:	02 96       	adiw	r24, 0x02	; 2
     7f0:	15 96       	adiw	r26, 0x05	; 5
     7f2:	9c 93       	st	X, r25
     7f4:	8e 93       	st	-X, r24
     7f6:	14 97       	sbiw	r26, 0x04	; 4
     7f8:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     7fc:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     800:	1b 96       	adiw	r26, 0x0b	; 11
     802:	fc 93       	st	X, r31
     804:	ee 93       	st	-X, r30
     806:	1a 97       	sbiw	r26, 0x0a	; 10
     808:	80 81       	ld	r24, Z
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	80 83       	st	Z, r24
     80e:	2f c0       	rjmp	.+94     	; 0x86e <__stack+0xf>
     810:	c0 0f       	add	r28, r16
     812:	d1 1f       	adc	r29, r17
     814:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     818:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     81c:	d3 83       	std	Z+3, r29	; 0x03
     81e:	c2 83       	std	Z+2, r28	; 0x02
     820:	c0 17       	cp	r28, r16
     822:	d1 07       	cpc	r29, r17
     824:	68 f4       	brcc	.+26     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     826:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     82a:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     82e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <pxOverflowDelayedTaskList>
     832:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <pxOverflowDelayedTaskList+0x1>
     836:	6e 5f       	subi	r22, 0xFE	; 254
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	0e 94 82 00 	call	0x104	; 0x104 <vListInsert>
     83e:	17 c0       	rjmp	.+46     	; 0x86e <__stack+0xf>
     840:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     844:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     848:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <pxDelayedTaskList>
     84c:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <pxDelayedTaskList+0x1>
     850:	6e 5f       	subi	r22, 0xFE	; 254
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	0e 94 82 00 	call	0x104	; 0x104 <vListInsert>
     858:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <xNextTaskUnblockTime>
     85c:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <xNextTaskUnblockTime+0x1>
     860:	c8 17       	cp	r28, r24
     862:	d9 07       	cpc	r29, r25
     864:	20 f4       	brcc	.+8      	; 0x86e <__stack+0xf>
     866:	d0 93 70 04 	sts	0x0470, r29	; 0x800470 <xNextTaskUnblockTime+0x1>
     86a:	c0 93 6f 04 	sts	0x046F, r28	; 0x80046f <xNextTaskUnblockTime>
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	08 95       	ret

0000087a <xTaskCreate>:
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	3c 01       	movw	r6, r24
     8a0:	1b 01       	movw	r2, r22
     8a2:	5a 01       	movw	r10, r20
     8a4:	29 01       	movw	r4, r18
     8a6:	ca 01       	movw	r24, r20
     8a8:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     8ac:	6c 01       	movw	r12, r24
     8ae:	89 2b       	or	r24, r25
     8b0:	71 f0       	breq	.+28     	; 0x8ce <xTaskCreate+0x54>
     8b2:	88 e2       	ldi	r24, 0x28	; 40
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     8ba:	ec 01       	movw	r28, r24
     8bc:	89 2b       	or	r24, r25
     8be:	19 f0       	breq	.+6      	; 0x8c6 <xTaskCreate+0x4c>
     8c0:	d8 8e       	std	Y+24, r13	; 0x18
     8c2:	cf 8a       	std	Y+23, r12	; 0x17
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <xTaskCreate+0x58>
     8c6:	c6 01       	movw	r24, r12
     8c8:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <xTaskCreate+0x58>
     8ce:	c0 e0       	ldi	r28, 0x00	; 0
     8d0:	d0 e0       	ldi	r29, 0x00	; 0
     8d2:	20 97       	sbiw	r28, 0x00	; 0
     8d4:	91 f0       	breq	.+36     	; 0x8fa <xTaskCreate+0x80>
     8d6:	95 01       	movw	r18, r10
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	81 2c       	mov	r8, r1
     8de:	91 2c       	mov	r9, r1
     8e0:	5e 01       	movw	r10, r28
     8e2:	67 01       	movw	r12, r14
     8e4:	e0 2e       	mov	r14, r16
     8e6:	82 01       	movw	r16, r4
     8e8:	b1 01       	movw	r22, r2
     8ea:	c3 01       	movw	r24, r6
     8ec:	0e 94 5f 02 	call	0x4be	; 0x4be <prvInitialiseNewTask>
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 16 03 	call	0x62c	; 0x62c <prvAddNewTaskToReadyList>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <xTaskCreate+0x82>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	df 90       	pop	r13
     90a:	cf 90       	pop	r12
     90c:	bf 90       	pop	r11
     90e:	af 90       	pop	r10
     910:	9f 90       	pop	r9
     912:	8f 90       	pop	r8
     914:	7f 90       	pop	r7
     916:	6f 90       	pop	r6
     918:	5f 90       	pop	r5
     91a:	4f 90       	pop	r4
     91c:	3f 90       	pop	r3
     91e:	2f 90       	pop	r2
     920:	08 95       	ret

00000922 <vTaskStartScheduler>:
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	0f 2e       	mov	r0, r31
     92a:	fd e6       	ldi	r31, 0x6D	; 109
     92c:	ef 2e       	mov	r14, r31
     92e:	f4 e0       	ldi	r31, 0x04	; 4
     930:	ff 2e       	mov	r15, r31
     932:	f0 2d       	mov	r31, r0
     934:	00 e0       	ldi	r16, 0x00	; 0
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	46 e4       	ldi	r20, 0x46	; 70
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	61 e6       	ldi	r22, 0x61	; 97
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	89 eb       	ldi	r24, 0xB9	; 185
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	0e 94 3d 04 	call	0x87a	; 0x87a <xTaskCreate>
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	81 f4       	brne	.+32     	; 0x96e <vTaskStartScheduler+0x4c>
     94e:	f8 94       	cli
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <xNextTaskUnblockTime+0x1>
     958:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <xNextTaskUnblockTime>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <xSchedulerRunning>
     962:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <xTickCount+0x1>
     966:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <xTickCount>
     96a:	0e 94 4f 01 	call	0x29e	; 0x29e <xPortStartScheduler>
     96e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <vTaskSuspendAll>:
     97a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <uxSchedulerSuspended>
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <uxSchedulerSuspended>
     984:	08 95       	ret

00000986 <xTaskIncrementTick>:
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <uxSchedulerSuspended>
     992:	81 11       	cpse	r24, r1
     994:	01 c1       	rjmp	.+514    	; 0xb98 <xTaskIncrementTick+0x212>
     996:	c0 91 78 04 	lds	r28, 0x0478	; 0x800478 <xTickCount>
     99a:	d0 91 79 04 	lds	r29, 0x0479	; 0x800479 <xTickCount+0x1>
     99e:	8e 01       	movw	r16, r28
     9a0:	0f 5f       	subi	r16, 0xFF	; 255
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
     9a4:	10 93 79 04 	sts	0x0479, r17	; 0x800479 <xTickCount+0x1>
     9a8:	00 93 78 04 	sts	0x0478, r16	; 0x800478 <xTickCount>
     9ac:	01 15       	cp	r16, r1
     9ae:	11 05       	cpc	r17, r1
     9b0:	b9 f4       	brne	.+46     	; 0x9e0 <xTaskIncrementTick+0x5a>
     9b2:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <pxDelayedTaskList>
     9b6:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <pxDelayedTaskList+0x1>
     9ba:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <pxOverflowDelayedTaskList>
     9be:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <pxOverflowDelayedTaskList+0x1>
     9c2:	30 93 9a 04 	sts	0x049A, r19	; 0x80049a <pxDelayedTaskList+0x1>
     9c6:	20 93 99 04 	sts	0x0499, r18	; 0x800499 <pxDelayedTaskList>
     9ca:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <pxOverflowDelayedTaskList+0x1>
     9ce:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <pxOverflowDelayedTaskList>
     9d2:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <xNumOfOverflows>
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <xNumOfOverflows>
     9dc:	0e 94 36 02 	call	0x46c	; 0x46c <prvResetNextTaskUnblockTime>
     9e0:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <xNextTaskUnblockTime>
     9e4:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <xNextTaskUnblockTime+0x1>
     9e8:	08 17       	cp	r16, r24
     9ea:	19 07       	cpc	r17, r25
     9ec:	20 f4       	brcc	.+8      	; 0x9f6 <xTaskIncrementTick+0x70>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	b8 c0       	rjmp	.+368    	; 0xb62 <xTaskIncrementTick+0x1dc>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <xTaskIncrementTick+0x72>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <pxDelayedTaskList>
     9fc:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <pxDelayedTaskList+0x1>
     a00:	90 81       	ld	r25, Z
     a02:	91 11       	cpse	r25, r1
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <xTaskIncrementTick+0x8e>
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	3f ef       	ldi	r19, 0xFF	; 255
     a0a:	30 93 70 04 	sts	0x0470, r19	; 0x800470 <xNextTaskUnblockTime+0x1>
     a0e:	20 93 6f 04 	sts	0x046F, r18	; 0x80046f <xNextTaskUnblockTime>
     a12:	a7 c0       	rjmp	.+334    	; 0xb62 <xTaskIncrementTick+0x1dc>
     a14:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <pxDelayedTaskList>
     a18:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <pxDelayedTaskList+0x1>
     a1c:	05 80       	ldd	r0, Z+5	; 0x05
     a1e:	f6 81       	ldd	r31, Z+6	; 0x06
     a20:	e0 2d       	mov	r30, r0
     a22:	06 80       	ldd	r0, Z+6	; 0x06
     a24:	f7 81       	ldd	r31, Z+7	; 0x07
     a26:	e0 2d       	mov	r30, r0
     a28:	22 81       	ldd	r18, Z+2	; 0x02
     a2a:	33 81       	ldd	r19, Z+3	; 0x03
     a2c:	02 17       	cp	r16, r18
     a2e:	13 07       	cpc	r17, r19
     a30:	28 f4       	brcc	.+10     	; 0xa3c <xTaskIncrementTick+0xb6>
     a32:	30 93 70 04 	sts	0x0470, r19	; 0x800470 <xNextTaskUnblockTime+0x1>
     a36:	20 93 6f 04 	sts	0x046F, r18	; 0x80046f <xNextTaskUnblockTime>
     a3a:	93 c0       	rjmp	.+294    	; 0xb62 <xTaskIncrementTick+0x1dc>
     a3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     a3e:	b3 85       	ldd	r27, Z+11	; 0x0b
     a40:	24 81       	ldd	r18, Z+4	; 0x04
     a42:	35 81       	ldd	r19, Z+5	; 0x05
     a44:	46 81       	ldd	r20, Z+6	; 0x06
     a46:	57 81       	ldd	r21, Z+7	; 0x07
     a48:	e9 01       	movw	r28, r18
     a4a:	5d 83       	std	Y+5, r21	; 0x05
     a4c:	4c 83       	std	Y+4, r20	; 0x04
     a4e:	26 81       	ldd	r18, Z+6	; 0x06
     a50:	37 81       	ldd	r19, Z+7	; 0x07
     a52:	44 81       	ldd	r20, Z+4	; 0x04
     a54:	55 81       	ldd	r21, Z+5	; 0x05
     a56:	e9 01       	movw	r28, r18
     a58:	5b 83       	std	Y+3, r21	; 0x03
     a5a:	4a 83       	std	Y+2, r20	; 0x02
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	2d 91       	ld	r18, X+
     a60:	3c 91       	ld	r19, X
     a62:	12 97       	sbiw	r26, 0x02	; 2
     a64:	af 01       	movw	r20, r30
     a66:	4e 5f       	subi	r20, 0xFE	; 254
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	24 17       	cp	r18, r20
     a6c:	35 07       	cpc	r19, r21
     a6e:	31 f4       	brne	.+12     	; 0xa7c <xTaskIncrementTick+0xf6>
     a70:	26 81       	ldd	r18, Z+6	; 0x06
     a72:	37 81       	ldd	r19, Z+7	; 0x07
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	3c 93       	st	X, r19
     a78:	2e 93       	st	-X, r18
     a7a:	11 97       	sbiw	r26, 0x01	; 1
     a7c:	13 86       	std	Z+11, r1	; 0x0b
     a7e:	12 86       	std	Z+10, r1	; 0x0a
     a80:	9c 91       	ld	r25, X
     a82:	91 50       	subi	r25, 0x01	; 1
     a84:	9c 93       	st	X, r25
     a86:	a4 89       	ldd	r26, Z+20	; 0x14
     a88:	b5 89       	ldd	r27, Z+21	; 0x15
     a8a:	10 97       	sbiw	r26, 0x00	; 0
     a8c:	19 f1       	breq	.+70     	; 0xad4 <xTaskIncrementTick+0x14e>
     a8e:	26 85       	ldd	r18, Z+14	; 0x0e
     a90:	37 85       	ldd	r19, Z+15	; 0x0f
     a92:	60 89       	ldd	r22, Z+16	; 0x10
     a94:	71 89       	ldd	r23, Z+17	; 0x11
     a96:	e9 01       	movw	r28, r18
     a98:	7d 83       	std	Y+5, r23	; 0x05
     a9a:	6c 83       	std	Y+4, r22	; 0x04
     a9c:	20 89       	ldd	r18, Z+16	; 0x10
     a9e:	31 89       	ldd	r19, Z+17	; 0x11
     aa0:	66 85       	ldd	r22, Z+14	; 0x0e
     aa2:	77 85       	ldd	r23, Z+15	; 0x0f
     aa4:	e9 01       	movw	r28, r18
     aa6:	7b 83       	std	Y+3, r23	; 0x03
     aa8:	6a 83       	std	Y+2, r22	; 0x02
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	6d 91       	ld	r22, X+
     aae:	7c 91       	ld	r23, X
     ab0:	12 97       	sbiw	r26, 0x02	; 2
     ab2:	9f 01       	movw	r18, r30
     ab4:	24 5f       	subi	r18, 0xF4	; 244
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	62 17       	cp	r22, r18
     aba:	73 07       	cpc	r23, r19
     abc:	31 f4       	brne	.+12     	; 0xaca <xTaskIncrementTick+0x144>
     abe:	20 89       	ldd	r18, Z+16	; 0x10
     ac0:	31 89       	ldd	r19, Z+17	; 0x11
     ac2:	12 96       	adiw	r26, 0x02	; 2
     ac4:	3c 93       	st	X, r19
     ac6:	2e 93       	st	-X, r18
     ac8:	11 97       	sbiw	r26, 0x01	; 1
     aca:	15 8a       	std	Z+21, r1	; 0x15
     acc:	14 8a       	std	Z+20, r1	; 0x14
     ace:	9c 91       	ld	r25, X
     ad0:	91 50       	subi	r25, 0x01	; 1
     ad2:	9c 93       	st	X, r25
     ad4:	26 89       	ldd	r18, Z+22	; 0x16
     ad6:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <uxTopReadyPriority>
     ada:	92 17       	cp	r25, r18
     adc:	10 f4       	brcc	.+4      	; 0xae2 <xTaskIncrementTick+0x15c>
     ade:	20 93 77 04 	sts	0x0477, r18	; 0x800477 <uxTopReadyPriority>
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	d9 01       	movw	r26, r18
     ae6:	aa 0f       	add	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	aa 0f       	add	r26, r26
     aec:	bb 1f       	adc	r27, r27
     aee:	aa 0f       	add	r26, r26
     af0:	bb 1f       	adc	r27, r27
     af2:	2a 0f       	add	r18, r26
     af4:	3b 1f       	adc	r19, r27
     af6:	d9 01       	movw	r26, r18
     af8:	a3 55       	subi	r26, 0x53	; 83
     afa:	bb 4f       	sbci	r27, 0xFB	; 251
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	0d 90       	ld	r0, X+
     b00:	bc 91       	ld	r27, X
     b02:	a0 2d       	mov	r26, r0
     b04:	b5 83       	std	Z+5, r27	; 0x05
     b06:	a4 83       	std	Z+4, r26	; 0x04
     b08:	14 96       	adiw	r26, 0x04	; 4
     b0a:	2d 91       	ld	r18, X+
     b0c:	3c 91       	ld	r19, X
     b0e:	15 97       	sbiw	r26, 0x05	; 5
     b10:	37 83       	std	Z+7, r19	; 0x07
     b12:	26 83       	std	Z+6, r18	; 0x06
     b14:	14 96       	adiw	r26, 0x04	; 4
     b16:	2d 91       	ld	r18, X+
     b18:	3c 91       	ld	r19, X
     b1a:	15 97       	sbiw	r26, 0x05	; 5
     b1c:	e9 01       	movw	r28, r18
     b1e:	5b 83       	std	Y+3, r21	; 0x03
     b20:	4a 83       	std	Y+2, r20	; 0x02
     b22:	15 96       	adiw	r26, 0x05	; 5
     b24:	5c 93       	st	X, r21
     b26:	4e 93       	st	-X, r20
     b28:	14 97       	sbiw	r26, 0x04	; 4
     b2a:	a6 89       	ldd	r26, Z+22	; 0x16
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	9d 01       	movw	r18, r26
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	22 0f       	add	r18, r18
     b36:	33 1f       	adc	r19, r19
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	a2 0f       	add	r26, r18
     b3e:	b3 1f       	adc	r27, r19
     b40:	a3 55       	subi	r26, 0x53	; 83
     b42:	bb 4f       	sbci	r27, 0xFB	; 251
     b44:	b3 87       	std	Z+11, r27	; 0x0b
     b46:	a2 87       	std	Z+10, r26	; 0x0a
     b48:	9c 91       	ld	r25, X
     b4a:	9f 5f       	subi	r25, 0xFF	; 255
     b4c:	9c 93       	st	X, r25
     b4e:	26 89       	ldd	r18, Z+22	; 0x16
     b50:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     b54:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     b58:	96 89       	ldd	r25, Z+22	; 0x16
     b5a:	29 17       	cp	r18, r25
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <xTaskIncrementTick+0x1da>
     b5e:	49 cf       	rjmp	.-366    	; 0x9f2 <xTaskIncrementTick+0x6c>
     b60:	4b cf       	rjmp	.-362    	; 0x9f8 <xTaskIncrementTick+0x72>
     b62:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     b66:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     b6a:	26 89       	ldd	r18, Z+22	; 0x16
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	2e 0f       	add	r18, r30
     b7e:	3f 1f       	adc	r19, r31
     b80:	f9 01       	movw	r30, r18
     b82:	e3 55       	subi	r30, 0x53	; 83
     b84:	fb 4f       	sbci	r31, 0xFB	; 251
     b86:	90 81       	ld	r25, Z
     b88:	92 30       	cpi	r25, 0x02	; 2
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <xTaskIncrementTick+0x208>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <xYieldPending>
     b92:	91 11       	cpse	r25, r1
     b94:	0c c0       	rjmp	.+24     	; 0xbae <xTaskIncrementTick+0x228>
     b96:	0c c0       	rjmp	.+24     	; 0xbb0 <xTaskIncrementTick+0x22a>
     b98:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <xPendedTicks>
     b9c:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <xPendedTicks+0x1>
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <xPendedTicks+0x1>
     ba6:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <xPendedTicks>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <xTaskIncrementTick+0x22a>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <xTaskResumeAll>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	0f 92       	push	r0
     bc4:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <uxSchedulerSuspended>
     bc8:	81 50       	subi	r24, 0x01	; 1
     bca:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <uxSchedulerSuspended>
     bce:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <uxSchedulerSuspended>
     bd2:	81 11       	cpse	r24, r1
     bd4:	bf c0       	rjmp	.+382    	; 0xd54 <xTaskResumeAll+0x19a>
     bd6:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <uxCurrentNumberOfTasks>
     bda:	81 11       	cpse	r24, r1
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <xTaskResumeAll+0x150>
     bde:	bd c0       	rjmp	.+378    	; 0xd5a <xTaskResumeAll+0x1a0>
     be0:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <xPendingReadyList+0x5>
     be4:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <xPendingReadyList+0x6>
     be8:	06 80       	ldd	r0, Z+6	; 0x06
     bea:	f7 81       	ldd	r31, Z+7	; 0x07
     bec:	e0 2d       	mov	r30, r0
     bee:	a4 89       	ldd	r26, Z+20	; 0x14
     bf0:	b5 89       	ldd	r27, Z+21	; 0x15
     bf2:	c6 85       	ldd	r28, Z+14	; 0x0e
     bf4:	d7 85       	ldd	r29, Z+15	; 0x0f
     bf6:	80 89       	ldd	r24, Z+16	; 0x10
     bf8:	91 89       	ldd	r25, Z+17	; 0x11
     bfa:	9d 83       	std	Y+5, r25	; 0x05
     bfc:	8c 83       	std	Y+4, r24	; 0x04
     bfe:	c0 89       	ldd	r28, Z+16	; 0x10
     c00:	d1 89       	ldd	r29, Z+17	; 0x11
     c02:	86 85       	ldd	r24, Z+14	; 0x0e
     c04:	97 85       	ldd	r25, Z+15	; 0x0f
     c06:	9b 83       	std	Y+3, r25	; 0x03
     c08:	8a 83       	std	Y+2, r24	; 0x02
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	2d 91       	ld	r18, X+
     c0e:	3c 91       	ld	r19, X
     c10:	12 97       	sbiw	r26, 0x02	; 2
     c12:	cf 01       	movw	r24, r30
     c14:	0c 96       	adiw	r24, 0x0c	; 12
     c16:	28 17       	cp	r18, r24
     c18:	39 07       	cpc	r19, r25
     c1a:	31 f4       	brne	.+12     	; 0xc28 <xTaskResumeAll+0x6e>
     c1c:	80 89       	ldd	r24, Z+16	; 0x10
     c1e:	91 89       	ldd	r25, Z+17	; 0x11
     c20:	12 96       	adiw	r26, 0x02	; 2
     c22:	9c 93       	st	X, r25
     c24:	8e 93       	st	-X, r24
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	15 8a       	std	Z+21, r1	; 0x15
     c2a:	14 8a       	std	Z+20, r1	; 0x14
     c2c:	8c 91       	ld	r24, X
     c2e:	81 50       	subi	r24, 0x01	; 1
     c30:	8c 93       	st	X, r24
     c32:	a2 85       	ldd	r26, Z+10	; 0x0a
     c34:	b3 85       	ldd	r27, Z+11	; 0x0b
     c36:	c4 81       	ldd	r28, Z+4	; 0x04
     c38:	d5 81       	ldd	r29, Z+5	; 0x05
     c3a:	86 81       	ldd	r24, Z+6	; 0x06
     c3c:	97 81       	ldd	r25, Z+7	; 0x07
     c3e:	9d 83       	std	Y+5, r25	; 0x05
     c40:	8c 83       	std	Y+4, r24	; 0x04
     c42:	c6 81       	ldd	r28, Z+6	; 0x06
     c44:	d7 81       	ldd	r29, Z+7	; 0x07
     c46:	84 81       	ldd	r24, Z+4	; 0x04
     c48:	95 81       	ldd	r25, Z+5	; 0x05
     c4a:	9b 83       	std	Y+3, r25	; 0x03
     c4c:	8a 83       	std	Y+2, r24	; 0x02
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	8d 91       	ld	r24, X+
     c52:	9c 91       	ld	r25, X
     c54:	12 97       	sbiw	r26, 0x02	; 2
     c56:	9f 01       	movw	r18, r30
     c58:	2e 5f       	subi	r18, 0xFE	; 254
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	82 17       	cp	r24, r18
     c5e:	93 07       	cpc	r25, r19
     c60:	31 f4       	brne	.+12     	; 0xc6e <xTaskResumeAll+0xb4>
     c62:	86 81       	ldd	r24, Z+6	; 0x06
     c64:	97 81       	ldd	r25, Z+7	; 0x07
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	9c 93       	st	X, r25
     c6a:	8e 93       	st	-X, r24
     c6c:	11 97       	sbiw	r26, 0x01	; 1
     c6e:	13 86       	std	Z+11, r1	; 0x0b
     c70:	12 86       	std	Z+10, r1	; 0x0a
     c72:	8c 91       	ld	r24, X
     c74:	81 50       	subi	r24, 0x01	; 1
     c76:	8c 93       	st	X, r24
     c78:	86 89       	ldd	r24, Z+22	; 0x16
     c7a:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <uxTopReadyPriority>
     c7e:	98 17       	cp	r25, r24
     c80:	10 f4       	brcc	.+4      	; 0xc86 <xTaskResumeAll+0xcc>
     c82:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <uxTopReadyPriority>
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	dc 01       	movw	r26, r24
     c8a:	aa 0f       	add	r26, r26
     c8c:	bb 1f       	adc	r27, r27
     c8e:	aa 0f       	add	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	aa 0f       	add	r26, r26
     c94:	bb 1f       	adc	r27, r27
     c96:	8a 0f       	add	r24, r26
     c98:	9b 1f       	adc	r25, r27
     c9a:	dc 01       	movw	r26, r24
     c9c:	a3 55       	subi	r26, 0x53	; 83
     c9e:	bb 4f       	sbci	r27, 0xFB	; 251
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	0d 90       	ld	r0, X+
     ca4:	bc 91       	ld	r27, X
     ca6:	a0 2d       	mov	r26, r0
     ca8:	b5 83       	std	Z+5, r27	; 0x05
     caa:	a4 83       	std	Z+4, r26	; 0x04
     cac:	14 96       	adiw	r26, 0x04	; 4
     cae:	8d 91       	ld	r24, X+
     cb0:	9c 91       	ld	r25, X
     cb2:	15 97       	sbiw	r26, 0x05	; 5
     cb4:	97 83       	std	Z+7, r25	; 0x07
     cb6:	86 83       	std	Z+6, r24	; 0x06
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	cd 91       	ld	r28, X+
     cbc:	dc 91       	ld	r29, X
     cbe:	15 97       	sbiw	r26, 0x05	; 5
     cc0:	3b 83       	std	Y+3, r19	; 0x03
     cc2:	2a 83       	std	Y+2, r18	; 0x02
     cc4:	15 96       	adiw	r26, 0x05	; 5
     cc6:	3c 93       	st	X, r19
     cc8:	2e 93       	st	-X, r18
     cca:	14 97       	sbiw	r26, 0x04	; 4
     ccc:	a6 89       	ldd	r26, Z+22	; 0x16
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	cd 01       	movw	r24, r26
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	a8 0f       	add	r26, r24
     ce0:	b9 1f       	adc	r27, r25
     ce2:	a3 55       	subi	r26, 0x53	; 83
     ce4:	bb 4f       	sbci	r27, 0xFB	; 251
     ce6:	b3 87       	std	Z+11, r27	; 0x0b
     ce8:	a2 87       	std	Z+10, r26	; 0x0a
     cea:	8c 91       	ld	r24, X
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	8c 93       	st	X, r24
     cf0:	96 89       	ldd	r25, Z+22	; 0x16
     cf2:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <pxCurrentTCB>
     cf6:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <pxCurrentTCB+0x1>
     cfa:	56 96       	adiw	r26, 0x16	; 22
     cfc:	8c 91       	ld	r24, X
     cfe:	98 17       	cp	r25, r24
     d00:	30 f0       	brcs	.+12     	; 0xd0e <xTaskResumeAll+0x154>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <xYieldPending>
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <xTaskResumeAll+0x154>
     d0a:	e0 e0       	ldi	r30, 0x00	; 0
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <xPendingReadyList>
     d12:	81 11       	cpse	r24, r1
     d14:	65 cf       	rjmp	.-310    	; 0xbe0 <xTaskResumeAll+0x26>
     d16:	ef 2b       	or	r30, r31
     d18:	11 f0       	breq	.+4      	; 0xd1e <xTaskResumeAll+0x164>
     d1a:	0e 94 36 02 	call	0x46c	; 0x46c <prvResetNextTaskUnblockTime>
     d1e:	c0 91 74 04 	lds	r28, 0x0474	; 0x800474 <xPendedTicks>
     d22:	d0 91 75 04 	lds	r29, 0x0475	; 0x800475 <xPendedTicks+0x1>
     d26:	20 97       	sbiw	r28, 0x00	; 0
     d28:	69 f0       	breq	.+26     	; 0xd44 <xTaskResumeAll+0x18a>
     d2a:	0e 94 c3 04 	call	0x986	; 0x986 <xTaskIncrementTick>
     d2e:	88 23       	and	r24, r24
     d30:	19 f0       	breq	.+6      	; 0xd38 <xTaskResumeAll+0x17e>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <xYieldPending>
     d38:	21 97       	sbiw	r28, 0x01	; 1
     d3a:	b9 f7       	brne	.-18     	; 0xd2a <xTaskResumeAll+0x170>
     d3c:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <xPendedTicks+0x1>
     d40:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <xPendedTicks>
     d44:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <xYieldPending>
     d48:	88 23       	and	r24, r24
     d4a:	31 f0       	breq	.+12     	; 0xd58 <xTaskResumeAll+0x19e>
     d4c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <xTaskResumeAll+0x1a0>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <xTaskResumeAll+0x1a0>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <vTaskDelay>:
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
     d6a:	89 2b       	or	r24, r25
     d6c:	49 f0       	breq	.+18     	; 0xd80 <vTaskDelay+0x1c>
     d6e:	0e 94 bd 04 	call	0x97a	; 0x97a <vTaskSuspendAll>
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	ce 01       	movw	r24, r28
     d76:	0e 94 bc 03 	call	0x778	; 0x778 <prvAddCurrentTaskToDelayedList>
     d7a:	0e 94 dd 05 	call	0xbba	; 0xbba <xTaskResumeAll>
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <vTaskDelay+0x1e>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	81 11       	cpse	r24, r1
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <vTaskDelay+0x26>
     d86:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     d90:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <uxSchedulerSuspended>
     d94:	88 23       	and	r24, r24
     d96:	21 f0       	breq	.+8      	; 0xda0 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <xYieldPending>
     d9e:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     da0:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     da4:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <uxTopReadyPriority>
     da8:	01 c0       	rjmp	.+2      	; 0xdac <vTaskSwitchContext+0x1c>
     daa:	21 50       	subi	r18, 0x01	; 1
     dac:	82 2f       	mov	r24, r18
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	e8 0f       	add	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	e3 55       	subi	r30, 0x53	; 83
     dc4:	fb 4f       	sbci	r31, 0xFB	; 251
     dc6:	30 81       	ld	r19, Z
     dc8:	33 23       	and	r19, r19
     dca:	79 f3       	breq	.-34     	; 0xdaa <vTaskSwitchContext+0x1a>
     dcc:	ac 01       	movw	r20, r24
     dce:	44 0f       	add	r20, r20
     dd0:	55 1f       	adc	r21, r21
     dd2:	44 0f       	add	r20, r20
     dd4:	55 1f       	adc	r21, r21
     dd6:	44 0f       	add	r20, r20
     dd8:	55 1f       	adc	r21, r21
     dda:	48 0f       	add	r20, r24
     ddc:	59 1f       	adc	r21, r25
     dde:	df 01       	movw	r26, r30
     de0:	01 80       	ldd	r0, Z+1	; 0x01
     de2:	f2 81       	ldd	r31, Z+2	; 0x02
     de4:	e0 2d       	mov	r30, r0
     de6:	02 80       	ldd	r0, Z+2	; 0x02
     de8:	f3 81       	ldd	r31, Z+3	; 0x03
     dea:	e0 2d       	mov	r30, r0
     dec:	12 96       	adiw	r26, 0x02	; 2
     dee:	fc 93       	st	X, r31
     df0:	ee 93       	st	-X, r30
     df2:	11 97       	sbiw	r26, 0x01	; 1
     df4:	40 55       	subi	r20, 0x50	; 80
     df6:	5b 4f       	sbci	r21, 0xFB	; 251
     df8:	e4 17       	cp	r30, r20
     dfa:	f5 07       	cpc	r31, r21
     dfc:	29 f4       	brne	.+10     	; 0xe08 <vTaskSwitchContext+0x78>
     dfe:	42 81       	ldd	r20, Z+2	; 0x02
     e00:	53 81       	ldd	r21, Z+3	; 0x03
     e02:	fd 01       	movw	r30, r26
     e04:	52 83       	std	Z+2, r21	; 0x02
     e06:	41 83       	std	Z+1, r20	; 0x01
     e08:	fc 01       	movw	r30, r24
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	8e 0f       	add	r24, r30
     e18:	9f 1f       	adc	r25, r31
     e1a:	fc 01       	movw	r30, r24
     e1c:	e3 55       	subi	r30, 0x53	; 83
     e1e:	fb 4f       	sbci	r31, 0xFB	; 251
     e20:	01 80       	ldd	r0, Z+1	; 0x01
     e22:	f2 81       	ldd	r31, Z+2	; 0x02
     e24:	e0 2d       	mov	r30, r0
     e26:	86 81       	ldd	r24, Z+6	; 0x06
     e28:	97 81       	ldd	r25, Z+7	; 0x07
     e2a:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <pxCurrentTCB+0x1>
     e2e:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <pxCurrentTCB>
     e32:	20 93 77 04 	sts	0x0477, r18	; 0x800477 <uxTopReadyPriority>
     e36:	08 95       	ret

00000e38 <LCD_write_command>:
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands 
* Return value : void
*****************************************************************************/
void LCD_write_command(u8 data){ // 0x53
	RS(0);
     e38:	9b b3       	in	r25, 0x1b	; 27
     e3a:	97 7f       	andi	r25, 0xF7	; 247
     e3c:	9b bb       	out	0x1b, r25	; 27
	D7(GET_BIT(data,7)); // Data bit7  = D7  
     e3e:	88 23       	and	r24, r24
     e40:	24 f4       	brge	.+8      	; 0xe4a <LCD_write_command+0x12>
     e42:	9b b3       	in	r25, 0x1b	; 27
     e44:	90 68       	ori	r25, 0x80	; 128
     e46:	9b bb       	out	0x1b, r25	; 27
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <LCD_write_command+0x18>
     e4a:	9b b3       	in	r25, 0x1b	; 27
     e4c:	9f 77       	andi	r25, 0x7F	; 127
     e4e:	9b bb       	out	0x1b, r25	; 27
	D6(GET_BIT(data,6)); // Data bit6  = D6  
     e50:	86 ff       	sbrs	r24, 6
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <LCD_write_command+0x24>
     e54:	9b b3       	in	r25, 0x1b	; 27
     e56:	90 64       	ori	r25, 0x40	; 64
     e58:	9b bb       	out	0x1b, r25	; 27
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <LCD_write_command+0x2a>
     e5c:	9b b3       	in	r25, 0x1b	; 27
     e5e:	9f 7b       	andi	r25, 0xBF	; 191
     e60:	9b bb       	out	0x1b, r25	; 27
	D5(GET_BIT(data,5)); // Data bit5  = D5  
     e62:	85 ff       	sbrs	r24, 5
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <LCD_write_command+0x36>
     e66:	9b b3       	in	r25, 0x1b	; 27
     e68:	90 62       	ori	r25, 0x20	; 32
     e6a:	9b bb       	out	0x1b, r25	; 27
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <LCD_write_command+0x3c>
     e6e:	9b b3       	in	r25, 0x1b	; 27
     e70:	9f 7d       	andi	r25, 0xDF	; 223
     e72:	9b bb       	out	0x1b, r25	; 27
	D4(GET_BIT(data,4)); // Data bit4  = D4
     e74:	84 ff       	sbrs	r24, 4
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <LCD_write_command+0x48>
     e78:	9b b3       	in	r25, 0x1b	; 27
     e7a:	90 61       	ori	r25, 0x10	; 16
     e7c:	9b bb       	out	0x1b, r25	; 27
     e7e:	03 c0       	rjmp	.+6      	; 0xe86 <LCD_write_command+0x4e>
     e80:	9b b3       	in	r25, 0x1b	; 27
     e82:	9f 7e       	andi	r25, 0xEF	; 239
     e84:	9b bb       	out	0x1b, r25	; 27
	EN(1);
     e86:	9b b3       	in	r25, 0x1b	; 27
     e88:	94 60       	ori	r25, 0x04	; 4
     e8a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e8c:	e9 ef       	ldi	r30, 0xF9	; 249
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCD_write_command+0x58>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <LCD_write_command+0x5e>
     e96:	00 00       	nop
	_delay_ms(1);
	EN(0);
     e98:	9b b3       	in	r25, 0x1b	; 27
     e9a:	9b 7f       	andi	r25, 0xFB	; 251
     e9c:	9b bb       	out	0x1b, r25	; 27
     e9e:	e9 ef       	ldi	r30, 0xF9	; 249
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <LCD_write_command+0x6a>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <LCD_write_command+0x70>
     ea8:	00 00       	nop
	_delay_ms(1);
	
	D7(GET_BIT(data,3)); // Data bit3  = D7
     eaa:	83 ff       	sbrs	r24, 3
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <LCD_write_command+0x7e>
     eae:	9b b3       	in	r25, 0x1b	; 27
     eb0:	90 68       	ori	r25, 0x80	; 128
     eb2:	9b bb       	out	0x1b, r25	; 27
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <LCD_write_command+0x84>
     eb6:	9b b3       	in	r25, 0x1b	; 27
     eb8:	9f 77       	andi	r25, 0x7F	; 127
     eba:	9b bb       	out	0x1b, r25	; 27
	D6(GET_BIT(data,2)); // Data bit2  = D6
     ebc:	82 ff       	sbrs	r24, 2
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <LCD_write_command+0x90>
     ec0:	9b b3       	in	r25, 0x1b	; 27
     ec2:	90 64       	ori	r25, 0x40	; 64
     ec4:	9b bb       	out	0x1b, r25	; 27
     ec6:	03 c0       	rjmp	.+6      	; 0xece <LCD_write_command+0x96>
     ec8:	9b b3       	in	r25, 0x1b	; 27
     eca:	9f 7b       	andi	r25, 0xBF	; 191
     ecc:	9b bb       	out	0x1b, r25	; 27
	D5(GET_BIT(data,1)); // Data bit1  = D5
     ece:	81 ff       	sbrs	r24, 1
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <LCD_write_command+0xa2>
     ed2:	9b b3       	in	r25, 0x1b	; 27
     ed4:	90 62       	ori	r25, 0x20	; 32
     ed6:	9b bb       	out	0x1b, r25	; 27
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <LCD_write_command+0xa8>
     eda:	9b b3       	in	r25, 0x1b	; 27
     edc:	9f 7d       	andi	r25, 0xDF	; 223
     ede:	9b bb       	out	0x1b, r25	; 27
	D4(GET_BIT(data,0)); // Data bit0  = D4
     ee0:	80 ff       	sbrs	r24, 0
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <LCD_write_command+0xb4>
     ee4:	8b b3       	in	r24, 0x1b	; 27
     ee6:	80 61       	ori	r24, 0x10	; 16
     ee8:	8b bb       	out	0x1b, r24	; 27
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <LCD_write_command+0xba>
     eec:	8b b3       	in	r24, 0x1b	; 27
     eee:	8f 7e       	andi	r24, 0xEF	; 239
     ef0:	8b bb       	out	0x1b, r24	; 27
	EN(1);
     ef2:	8b b3       	in	r24, 0x1b	; 27
     ef4:	84 60       	ori	r24, 0x04	; 4
     ef6:	8b bb       	out	0x1b, r24	; 27
     ef8:	89 ef       	ldi	r24, 0xF9	; 249
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <LCD_write_command+0xc4>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <LCD_write_command+0xca>
     f02:	00 00       	nop
	_delay_ms(1);
	EN(0);
     f04:	8b b3       	in	r24, 0x1b	; 27
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	8b bb       	out	0x1b, r24	; 27
     f0a:	e9 ef       	ldi	r30, 0xF9	; 249
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	31 97       	sbiw	r30, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <LCD_write_command+0xd6>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <LCD_write_command+0xdc>
     f14:	00 00       	nop
     f16:	08 95       	ret

00000f18 <LCD_init>:
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void 
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PIN;
     f18:	8a b3       	in	r24, 0x1a	; 26
     f1a:	8c 6f       	ori	r24, 0xFC	; 252
     f1c:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
     f24:	87 ee       	ldi	r24, 0xE7	; 231
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <LCD_init+0x10>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <LCD_init+0x16>
     f2e:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
     f36:	87 ee       	ldi	r24, 0xE7	; 231
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <LCD_init+0x22>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <LCD_init+0x28>
     f40:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
     f48:	87 ee       	ldi	r24, 0xE7	; 231
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <LCD_init+0x34>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <LCD_init+0x3a>
     f52:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
	LCD_write_command(0x28);
     f5a:	88 e2       	ldi	r24, 0x28	; 40
     f5c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
	LCD_write_command(0x08);
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
	LCD_write_command(0x1);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
	LCD_write_command(0x6);
     f6c:	86 e0       	ldi	r24, 0x06	; 6
     f6e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
	LCD_write_command(0xc);
     f72:	8c e0       	ldi	r24, 0x0C	; 12
     f74:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
     f78:	87 e8       	ldi	r24, 0x87	; 135
     f7a:	93 e1       	ldi	r25, 0x13	; 19
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <LCD_init+0x64>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <LCD_init+0x6a>
     f82:	00 00       	nop
     f84:	08 95       	ret

00000f86 <LCD_write_data>:
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(u8 data){ // 0x53
	RS(1);
     f86:	9b b3       	in	r25, 0x1b	; 27
     f88:	98 60       	ori	r25, 0x08	; 8
     f8a:	9b bb       	out	0x1b, r25	; 27
	D7(GET_BIT(data,7)); // Data bit7  = D7
     f8c:	88 23       	and	r24, r24
     f8e:	24 f4       	brge	.+8      	; 0xf98 <LCD_write_data+0x12>
     f90:	9b b3       	in	r25, 0x1b	; 27
     f92:	90 68       	ori	r25, 0x80	; 128
     f94:	9b bb       	out	0x1b, r25	; 27
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <LCD_write_data+0x18>
     f98:	9b b3       	in	r25, 0x1b	; 27
     f9a:	9f 77       	andi	r25, 0x7F	; 127
     f9c:	9b bb       	out	0x1b, r25	; 27
	D6(GET_BIT(data,6)); // Data bit6  = D6
     f9e:	86 ff       	sbrs	r24, 6
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <LCD_write_data+0x24>
     fa2:	9b b3       	in	r25, 0x1b	; 27
     fa4:	90 64       	ori	r25, 0x40	; 64
     fa6:	9b bb       	out	0x1b, r25	; 27
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <LCD_write_data+0x2a>
     faa:	9b b3       	in	r25, 0x1b	; 27
     fac:	9f 7b       	andi	r25, 0xBF	; 191
     fae:	9b bb       	out	0x1b, r25	; 27
	D5(GET_BIT(data,5)); // Data bit5  = D5
     fb0:	85 ff       	sbrs	r24, 5
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <LCD_write_data+0x36>
     fb4:	9b b3       	in	r25, 0x1b	; 27
     fb6:	90 62       	ori	r25, 0x20	; 32
     fb8:	9b bb       	out	0x1b, r25	; 27
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <LCD_write_data+0x3c>
     fbc:	9b b3       	in	r25, 0x1b	; 27
     fbe:	9f 7d       	andi	r25, 0xDF	; 223
     fc0:	9b bb       	out	0x1b, r25	; 27
	D4(GET_BIT(data,4)); // Data bit4  = D4
     fc2:	84 ff       	sbrs	r24, 4
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <LCD_write_data+0x48>
     fc6:	9b b3       	in	r25, 0x1b	; 27
     fc8:	90 61       	ori	r25, 0x10	; 16
     fca:	9b bb       	out	0x1b, r25	; 27
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <LCD_write_data+0x4e>
     fce:	9b b3       	in	r25, 0x1b	; 27
     fd0:	9f 7e       	andi	r25, 0xEF	; 239
     fd2:	9b bb       	out	0x1b, r25	; 27
	EN(1);
     fd4:	9b b3       	in	r25, 0x1b	; 27
     fd6:	94 60       	ori	r25, 0x04	; 4
     fd8:	9b bb       	out	0x1b, r25	; 27
     fda:	e9 ef       	ldi	r30, 0xF9	; 249
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <LCD_write_data+0x58>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <LCD_write_data+0x5e>
     fe4:	00 00       	nop
	_delay_ms(1);
	EN(0);
     fe6:	9b b3       	in	r25, 0x1b	; 27
     fe8:	9b 7f       	andi	r25, 0xFB	; 251
     fea:	9b bb       	out	0x1b, r25	; 27
     fec:	e9 ef       	ldi	r30, 0xF9	; 249
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <LCD_write_data+0x6a>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <LCD_write_data+0x70>
     ff6:	00 00       	nop
	_delay_ms(1);

	D7(GET_BIT(data,3)); // Data bit3  = D7
     ff8:	83 ff       	sbrs	r24, 3
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <LCD_write_data+0x7e>
     ffc:	9b b3       	in	r25, 0x1b	; 27
     ffe:	90 68       	ori	r25, 0x80	; 128
    1000:	9b bb       	out	0x1b, r25	; 27
    1002:	03 c0       	rjmp	.+6      	; 0x100a <LCD_write_data+0x84>
    1004:	9b b3       	in	r25, 0x1b	; 27
    1006:	9f 77       	andi	r25, 0x7F	; 127
    1008:	9b bb       	out	0x1b, r25	; 27
	D6(GET_BIT(data,2)); // Data bit2  = D6
    100a:	82 ff       	sbrs	r24, 2
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <LCD_write_data+0x90>
    100e:	9b b3       	in	r25, 0x1b	; 27
    1010:	90 64       	ori	r25, 0x40	; 64
    1012:	9b bb       	out	0x1b, r25	; 27
    1014:	03 c0       	rjmp	.+6      	; 0x101c <LCD_write_data+0x96>
    1016:	9b b3       	in	r25, 0x1b	; 27
    1018:	9f 7b       	andi	r25, 0xBF	; 191
    101a:	9b bb       	out	0x1b, r25	; 27
	D5(GET_BIT(data,1)); // Data bit1  = D5
    101c:	81 ff       	sbrs	r24, 1
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <LCD_write_data+0xa2>
    1020:	9b b3       	in	r25, 0x1b	; 27
    1022:	90 62       	ori	r25, 0x20	; 32
    1024:	9b bb       	out	0x1b, r25	; 27
    1026:	03 c0       	rjmp	.+6      	; 0x102e <LCD_write_data+0xa8>
    1028:	9b b3       	in	r25, 0x1b	; 27
    102a:	9f 7d       	andi	r25, 0xDF	; 223
    102c:	9b bb       	out	0x1b, r25	; 27
	D4(GET_BIT(data,0)); // Data bit0  = D4
    102e:	80 ff       	sbrs	r24, 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <LCD_write_data+0xb4>
    1032:	8b b3       	in	r24, 0x1b	; 27
    1034:	80 61       	ori	r24, 0x10	; 16
    1036:	8b bb       	out	0x1b, r24	; 27
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <LCD_write_data+0xba>
    103a:	8b b3       	in	r24, 0x1b	; 27
    103c:	8f 7e       	andi	r24, 0xEF	; 239
    103e:	8b bb       	out	0x1b, r24	; 27
	EN(1);
    1040:	8b b3       	in	r24, 0x1b	; 27
    1042:	84 60       	ori	r24, 0x04	; 4
    1044:	8b bb       	out	0x1b, r24	; 27
    1046:	89 ef       	ldi	r24, 0xF9	; 249
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <LCD_write_data+0xc4>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <LCD_write_data+0xca>
    1050:	00 00       	nop
	_delay_ms(1);
	EN(0);
    1052:	8b b3       	in	r24, 0x1b	; 27
    1054:	8b 7f       	andi	r24, 0xFB	; 251
    1056:	8b bb       	out	0x1b, r24	; 27
    1058:	e9 ef       	ldi	r30, 0xF9	; 249
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	31 97       	sbiw	r30, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <LCD_write_data+0xd6>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <LCD_write_data+0xdc>
    1062:	00 00       	nop
    1064:	08 95       	ret

00001066 <LCD_write_string>:
* Function Name: LCD_write_data
* Purpose      : write a string on lCD
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(u8 *data){
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	8c 01       	movw	r16, r24
	u8 i =0;
    106e:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0'){
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <LCD_write_string+0x12>
		LCD_write_data(data[i]);
    1072:	0e 94 c3 07 	call	0xf86	; 0xf86 <LCD_write_data>
		i++;
    1076:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(u8 *data){
	u8 i =0;
	while(data[i] != '\0'){
    1078:	f8 01       	movw	r30, r16
    107a:	ec 0f       	add	r30, r28
    107c:	f1 1d       	adc	r31, r1
    107e:	80 81       	ld	r24, Z
    1080:	81 11       	cpse	r24, r1
    1082:	f7 cf       	rjmp	.-18     	; 0x1072 <LCD_write_string+0xc>
		LCD_write_data(data[i]);
		i++;
	}
}
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <vTask1>:

void vTask1(void* pvParameters)       //called every 1 sec...through callback concept
{
	while(1)
	{
		LCD_write_string("Task one");
    108c:	86 e6       	ldi	r24, 0x66	; 102
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 33 08 	call	0x1066	; 0x1066 <LCD_write_string>
		vTaskDelay(100);
    1094:	84 e6       	ldi	r24, 0x64	; 100
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 b2 06 	call	0xd64	; 0xd64 <vTaskDelay>
    109c:	f7 cf       	rjmp	.-18     	; 0x108c <vTask1>

0000109e <vTask2>:
}
void vTask2(void* pvParameters)
{
	while(1)
	{
		LCD_write_string("Task two");
    109e:	8f e6       	ldi	r24, 0x6F	; 111
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 33 08 	call	0x1066	; 0x1066 <LCD_write_string>
		vTaskDelay(100);
    10a6:	84 e6       	ldi	r24, 0x64	; 100
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 b2 06 	call	0xd64	; 0xd64 <vTaskDelay>
    10ae:	f7 cf       	rjmp	.-18     	; 0x109e <vTask2>

000010b0 <main>:
	/*BaseType_t xError_Status;
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, 0xff);//Red
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN4, 0xff);
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN5, 0xff);
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN6, 0xff);*/
	LCD_init();
    10b0:	0e 94 8c 07 	call	0xf18	; 0xf18 <LCD_init>
    10b4:	87 ea       	ldi	r24, 0xA7	; 167
    10b6:	91 e6       	ldi	r25, 0x61	; 97
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <main+0x8>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <main+0xe>
    10be:	00 00       	nop
	_delay_ms(100);
	LCD_write_command(0x0C); // display on, cursor off
    10c0:	8c e0       	ldi	r24, 0x0C	; 12
    10c2:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_write_command>
	 SET_BIT(DDRB,7);//Red
	 SET_BIT(DDRA,4);//Green
	 SET_BIT(DDRA,5);
	 CLR_BIT(DDRA,6);*/

	 xTaskCreate(vTask1,(const char*)"RED",300,NULL,TASK2_PRIORITY,&xTask1_H);
    10c6:	0f 2e       	mov	r0, r31
    10c8:	f5 ed       	ldi	r31, 0xD5	; 213
    10ca:	ef 2e       	mov	r14, r31
    10cc:	f4 e0       	ldi	r31, 0x04	; 4
    10ce:	ff 2e       	mov	r15, r31
    10d0:	f0 2d       	mov	r31, r0
    10d2:	01 e0       	ldi	r16, 0x01	; 1
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	4c e2       	ldi	r20, 0x2C	; 44
    10da:	51 e0       	ldi	r21, 0x01	; 1
    10dc:	68 e7       	ldi	r22, 0x78	; 120
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	86 e4       	ldi	r24, 0x46	; 70
    10e2:	98 e0       	ldi	r25, 0x08	; 8
    10e4:	0e 94 3d 04 	call	0x87a	; 0x87a <xTaskCreate>
	 xTaskCreate(vTask2,(const char*)"GREEN",300,NULL,TASK2_PRIORITY,&xTask2_H);
    10e8:	0f 2e       	mov	r0, r31
    10ea:	f3 ed       	ldi	r31, 0xD3	; 211
    10ec:	ef 2e       	mov	r14, r31
    10ee:	f4 e0       	ldi	r31, 0x04	; 4
    10f0:	ff 2e       	mov	r15, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4c e2       	ldi	r20, 0x2C	; 44
    10fa:	51 e0       	ldi	r21, 0x01	; 1
    10fc:	6c e7       	ldi	r22, 0x7C	; 124
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	8f e4       	ldi	r24, 0x4F	; 79
    1102:	98 e0       	ldi	r25, 0x08	; 8
    1104:	0e 94 3d 04 	call	0x87a	; 0x87a <xTaskCreate>
	// xTaskCreate(vTask3,(const char*)"BLUE",75,NULL,TASK3_PRIORITY,&xTask3_H);
	// xTaskCreate(vTask4,(const char*)"YELL",75,NULL,TASK4_PRIORITY,&xTask4_H);

	 vTaskStartScheduler();
    1108:	0e 94 91 04 	call	0x922	; 0x922 <vTaskStartScheduler>
    110c:	ff cf       	rjmp	.-2      	; 0x110c <main+0x5c>

0000110e <__vector_4>:
}


void __vector_4(void) __attribute__ ((signal));
void __vector_4(void)
{
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
	if(private_pCallBackCTC != NULL)
    1130:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <private_pCallBackCTC>
    1134:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <private_pCallBackCTC+0x1>
    1138:	30 97       	sbiw	r30, 0x00	; 0
    113a:	09 f0       	breq	.+2      	; 0x113e <__vector_4+0x30>
	{
		private_pCallBackCTC();
    113c:	09 95       	icall
	}
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <_exit>:
    1160:	f8 94       	cli

00001162 <__stop_program>:
    1162:	ff cf       	rjmp	.-2      	; 0x1162 <__stop_program>
