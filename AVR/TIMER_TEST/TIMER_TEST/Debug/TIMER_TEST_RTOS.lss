
TIMER_TEST_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800060  00800060  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001073  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cb  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  000029d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000656  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000812  00000000  00000000  0000323a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 37       	cpi	r26, 0x78	; 120
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  74:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setupPinDirection>:
			}
			break;
		}
	return E_OK;
	}
}
  7c:	68 30       	cpi	r22, 0x08	; 8
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_setupPinDirection+0x6>
  80:	78 c0       	rjmp	.+240    	; 0x172 <DIO_setupPinDirection+0xf6>
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setupPinDirection+0xc>
  86:	77 c0       	rjmp	.+238    	; 0x176 <DIO_setupPinDirection+0xfa>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	11 f1       	breq	.+68     	; 0xd0 <DIO_setupPinDirection+0x54>
  8c:	30 f0       	brcs	.+12     	; 0x9a <DIO_setupPinDirection+0x1e>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	d1 f1       	breq	.+116    	; 0x106 <DIO_setupPinDirection+0x8a>
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_setupPinDirection+0x1c>
  96:	52 c0       	rjmp	.+164    	; 0x13c <DIO_setupPinDirection+0xc0>
  98:	70 c0       	rjmp	.+224    	; 0x17a <DIO_setupPinDirection+0xfe>
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	61 f4       	brne	.+24     	; 0xb6 <DIO_setupPinDirection+0x3a>
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_setupPinDirection+0x2e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_setupPinDirection+0x2a>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_setupPinDirection+0x46>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_setupPinDirection+0x42>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	41 30       	cpi	r20, 0x01	; 1
  d2:	61 f4       	brne	.+24     	; 0xec <DIO_setupPinDirection+0x70>
  d4:	27 b3       	in	r18, 0x17	; 23
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_setupPinDirection+0x64>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_setupPinDirection+0x60>
  e4:	82 2b       	or	r24, r18
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setupPinDirection+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setupPinDirection+0x78>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	61 f4       	brne	.+24     	; 0x122 <DIO_setupPinDirection+0xa6>
 10a:	24 b3       	in	r18, 0x14	; 20
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_setupPinDirection+0x9a>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_setupPinDirection+0x96>
 11a:	82 2b       	or	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	08 95       	ret
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_setupPinDirection+0xb2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_setupPinDirection+0xae>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	61 f4       	brne	.+24     	; 0x158 <DIO_setupPinDirection+0xdc>
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setupPinDirection+0xd0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setupPinDirection+0xcc>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_setupPinDirection+0xe8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_setupPinDirection+0xe4>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret

0000017e <DIO_togglePin>:
 * toggles the value of the required pin.
 * If the input port number is not correct, The function will return E_NOK.
 */
u8 DIO_togglePin(u8 port_num,u8 pin_num)
{
	if((port_num>=NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	d0 f5       	brcc	.+116    	; 0x1f6 <DIO_togglePin+0x78>
 182:	68 30       	cpi	r22, 0x08	; 8
 184:	d0 f5       	brcc	.+116    	; 0x1fa <DIO_togglePin+0x7c>
	{
		return E_NOK;
	}
	else
	{
		switch(port_num)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 f0       	breq	.+36     	; 0x1ae <DIO_togglePin+0x30>
 18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_togglePin+0x18>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	d9 f0       	breq	.+54     	; 0x1c6 <DIO_togglePin+0x48>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	29 f1       	breq	.+74     	; 0x1de <DIO_togglePin+0x60>
 194:	34 c0       	rjmp	.+104    	; 0x1fe <DIO_togglePin+0x80>
		{
		  case PORTA_ID:
			  TOGGLE_BIT(PORTA,pin_num);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_togglePin+0x24>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_togglePin+0x20>
 1a6:	82 27       	eor	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
			  break;
		  case PORTD_ID:
			  TOGGLE_BIT(PORTD,pin_num);
			  break;
		}
		return E_OK;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(port_num)
		{
		  case PORTA_ID:
			  TOGGLE_BIT(PORTA,pin_num);
			  break;
 1ac:	08 95       	ret
		  case PORTB_ID:
			  TOGGLE_BIT(PORTB,pin_num);
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_togglePin+0x3c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_togglePin+0x38>
 1be:	82 27       	eor	r24, r18
 1c0:	88 bb       	out	0x18, r24	; 24
			  break;
		  case PORTD_ID:
			  TOGGLE_BIT(PORTD,pin_num);
			  break;
		}
		return E_OK;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
		  case PORTA_ID:
			  TOGGLE_BIT(PORTA,pin_num);
			  break;
		  case PORTB_ID:
			  TOGGLE_BIT(PORTB,pin_num);
			  break;
 1c4:	08 95       	ret
		  case PORTC_ID:
			  TOGGLE_BIT(PORTC,pin_num);
 1c6:	25 b3       	in	r18, 0x15	; 21
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_togglePin+0x54>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_togglePin+0x50>
 1d6:	82 27       	eor	r24, r18
 1d8:	85 bb       	out	0x15, r24	; 21
			  break;
		  case PORTD_ID:
			  TOGGLE_BIT(PORTD,pin_num);
			  break;
		}
		return E_OK;
 1da:	81 e0       	ldi	r24, 0x01	; 1
		  case PORTB_ID:
			  TOGGLE_BIT(PORTB,pin_num);
			  break;
		  case PORTC_ID:
			  TOGGLE_BIT(PORTC,pin_num);
			  break;
 1dc:	08 95       	ret
		  case PORTD_ID:
			  TOGGLE_BIT(PORTD,pin_num);
 1de:	22 b3       	in	r18, 0x12	; 18
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_togglePin+0x6c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_togglePin+0x68>
 1ee:	82 27       	eor	r24, r18
 1f0:	82 bb       	out	0x12, r24	; 18
			  break;
		}
		return E_OK;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
		  case PORTC_ID:
			  TOGGLE_BIT(PORTC,pin_num);
			  break;
		  case PORTD_ID:
			  TOGGLE_BIT(PORTD,pin_num);
			  break;
 1f4:	08 95       	ret
 */
u8 DIO_togglePin(u8 port_num,u8 pin_num)
{
	if((port_num>=NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
	{
		return E_NOK;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
			  break;
		  case PORTD_ID:
			  TOGGLE_BIT(PORTD,pin_num);
			  break;
		}
		return E_OK;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 200:	08 95       	ret

00000202 <Global_InterruptEnable>:
#include "GIE.h"


void Global_InterruptEnable(void)
{
	SET_BIT(SREG,Ibit);
 202:	8f b7       	in	r24, 0x3f	; 63
 204:	80 68       	ori	r24, 0x80	; 128
 206:	8f bf       	out	0x3f, r24	; 63
 208:	08 95       	ret

0000020a <private_voidscheduler>:
	   Locale_ErrorState = fail;
   }
   return Locale_ErrorState;
}
static void private_voidscheduler(void)
{
 20a:	cf 93       	push	r28
   static u16 Locale_u16TickCount=0;
   Locale_u16TickCount++;
 20c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 210:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 21a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
   u8 i;
   for(i=0;i<RTOS_KERNEL_NUM_TASKS;i++)
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	21 c0       	rjmp	.+66     	; 0x264 <private_voidscheduler+0x5a>
   {
      if((Locale_u16TickCount % (private_arrayOfTasks[i].priodicity)==0)&&(private_arrayOfTasks[i].pTaskFun!= NULL))  //mn moda3afatha (baky el kesma b zero
 222:	2c 2f       	mov	r18, r28
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	f9 01       	movw	r30, r18
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	ee 59       	subi	r30, 0x9E	; 158
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	60 81       	ld	r22, Z
 236:	71 81       	ldd	r23, Z+1	; 0x01
 238:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 240:	0e 94 df 01 	call	0x3be	; 0x3be <__udivmodhi4>
 244:	89 2b       	or	r24, r25
 246:	69 f4       	brne	.+26     	; 0x262 <private_voidscheduler+0x58>
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	f9 01       	movw	r30, r18
 252:	ee 59       	subi	r30, 0x9E	; 158
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	02 80       	ldd	r0, Z+2	; 0x02
 258:	f3 81       	ldd	r31, Z+3	; 0x03
 25a:	e0 2d       	mov	r30, r0
 25c:	30 97       	sbiw	r30, 0x00	; 0
 25e:	09 f0       	breq	.+2      	; 0x262 <private_voidscheduler+0x58>
      {
           /*Call Task Func*/
    	  private_arrayOfTasks[i].pTaskFun();
 260:	09 95       	icall
static void private_voidscheduler(void)
{
   static u16 Locale_u16TickCount=0;
   Locale_u16TickCount++;
   u8 i;
   for(i=0;i<RTOS_KERNEL_NUM_TASKS;i++)
 262:	cf 5f       	subi	r28, 0xFF	; 255
 264:	c5 30       	cpi	r28, 0x05	; 5
 266:	e8 f2       	brcs	.-70     	; 0x222 <private_voidscheduler+0x18>
      }else
      {

      }
   }
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <RTOS_KERNEL_voidStartScheduling>:
#include "GIE.h"

static Task_t private_arrayOfTasks[RTOS_KERNEL_NUM_TASKS];

void RTOS_KERNEL_voidStartScheduling(void)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <RTOS_KERNEL_voidStartScheduling+0x6>
 272:	00 d0       	rcall	.+0      	; 0x274 <RTOS_KERNEL_voidStartScheduling+0x8>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	config_struc config ={compare_2,0,249,F_64};  //Rtos Tick 1ms
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	1a 82       	std	Y+2, r1	; 0x02
 27e:	89 ef       	ldi	r24, 0xF9	; 249
 280:	8b 83       	std	Y+3, r24	; 0x03
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	8c 83       	std	Y+4, r24	; 0x04
	Timer2_init_Async(&config);
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 ae 01 	call	0x35c	; 0x35c <Timer2_init_Async>
	Timer2_setCallBack(private_voidscheduler);
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Timer2_setCallBack>

	Global_InterruptEnable();
 296:	0e 94 01 01 	call	0x202	; 0x202 <Global_InterruptEnable>
}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <RTOS_KERNEL_voidCreateTask>:
u8 RTOS_KERNEL_voidCreateTask(u8 TaskPriority,u16 TaskPriodicity,void(*ptrToFun)(void))
{
	u8 Locale_ErrorState = pass;
   if((TaskPriority < RTOS_KERNEL_NUM_TASKS)&&(ptrToFun != NULL)&&(private_arrayOfTasks[TaskPriority].pTaskFun == NULL))
 2a8:	85 30       	cpi	r24, 0x05	; 5
 2aa:	e0 f4       	brcc	.+56     	; 0x2e4 <RTOS_KERNEL_voidCreateTask+0x3c>
 2ac:	41 15       	cp	r20, r1
 2ae:	51 05       	cpc	r21, r1
 2b0:	d9 f0       	breq	.+54     	; 0x2e8 <RTOS_KERNEL_voidCreateTask+0x40>
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ee 59       	subi	r30, 0x9E	; 158
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	22 81       	ldd	r18, Z+2	; 0x02
 2c4:	33 81       	ldd	r19, Z+3	; 0x03
 2c6:	23 2b       	or	r18, r19
 2c8:	89 f4       	brne	.+34     	; 0x2ec <RTOS_KERNEL_voidCreateTask+0x44>
   {
	   private_arrayOfTasks[TaskPriority].priodicity=TaskPriodicity;
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	fc 01       	movw	r30, r24
 2d4:	ee 59       	subi	r30, 0x9E	; 158
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	71 83       	std	Z+1, r23	; 0x01
 2da:	60 83       	st	Z, r22
	   private_arrayOfTasks[TaskPriority].pTaskFun = ptrToFun;
 2dc:	53 83       	std	Z+3, r21	; 0x03
 2de:	42 83       	std	Z+2, r20	; 0x02

	Global_InterruptEnable();
}
u8 RTOS_KERNEL_voidCreateTask(u8 TaskPriority,u16 TaskPriodicity,void(*ptrToFun)(void))
{
	u8 Locale_ErrorState = pass;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
   if((TaskPriority < RTOS_KERNEL_NUM_TASKS)&&(ptrToFun != NULL)&&(private_arrayOfTasks[TaskPriority].pTaskFun == NULL))
   {
	   private_arrayOfTasks[TaskPriority].priodicity=TaskPriodicity;
	   private_arrayOfTasks[TaskPriority].pTaskFun = ptrToFun;
 2e2:	08 95       	ret
   }
   else
   {
	   Locale_ErrorState = fail;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret
 2ec:	81 e0       	ldi	r24, 0x01	; 1
   }
   return Locale_ErrorState;
}
 2ee:	08 95       	ret

000002f0 <App1>:
	return 0;
}

void App1(void)       //called every 1 sec...through callback concept
{
	DIO_togglePin(PORTB_ID,PIN7_ID);
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_togglePin>
 2f8:	08 95       	ret

000002fa <App2>:
}
void App2(void)
{
	DIO_togglePin(PORTA_ID,PIN4_ID);
 2fa:	64 e0       	ldi	r22, 0x04	; 4
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_togglePin>
 302:	08 95       	ret

00000304 <App3>:
}
void App3(void)
{
	DIO_togglePin(PORTA_ID,PIN5_ID);
 304:	65 e0       	ldi	r22, 0x05	; 5
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_togglePin>
 30c:	08 95       	ret

0000030e <main>:
void App3(void);


int main(void)
{
	 DIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);//Red
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	67 e0       	ldi	r22, 0x07	; 7
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setupPinDirection>
	 DIO_setupPinDirection(PORTA_ID,PIN4_ID,PIN_OUTPUT);//Green
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setupPinDirection>
	 DIO_setupPinDirection(PORTA_ID,PIN5_ID,PIN_OUTPUT);//Blue
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	65 e0       	ldi	r22, 0x05	; 5
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setupPinDirection>

	 RTOS_KERNEL_voidCreateTask(0,500,App1);
 32c:	48 e7       	ldi	r20, 0x78	; 120
 32e:	51 e0       	ldi	r21, 0x01	; 1
 330:	64 ef       	ldi	r22, 0xF4	; 244
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 54 01 	call	0x2a8	; 0x2a8 <RTOS_KERNEL_voidCreateTask>
	 RTOS_KERNEL_voidCreateTask(1,1000,App2);
 33a:	4d e7       	ldi	r20, 0x7D	; 125
 33c:	51 e0       	ldi	r21, 0x01	; 1
 33e:	68 ee       	ldi	r22, 0xE8	; 232
 340:	73 e0       	ldi	r23, 0x03	; 3
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 54 01 	call	0x2a8	; 0x2a8 <RTOS_KERNEL_voidCreateTask>
	 RTOS_KERNEL_voidCreateTask(2,2000,App3);
 348:	42 e8       	ldi	r20, 0x82	; 130
 34a:	51 e0       	ldi	r21, 0x01	; 1
 34c:	60 ed       	ldi	r22, 0xD0	; 208
 34e:	77 e0       	ldi	r23, 0x07	; 7
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 54 01 	call	0x2a8	; 0x2a8 <RTOS_KERNEL_voidCreateTask>

//	 RTOS_KERNEL_voidDeleteTask(2);
	 RTOS_KERNEL_voidStartScheduling();
 356:	0e 94 36 01 	call	0x26c	; 0x26c <RTOS_KERNEL_voidStartScheduling>
 35a:	ff cf       	rjmp	.-2      	; 0x35a <main+0x4c>

0000035c <Timer2_init_Async>:
{

	TCCR2 = 0;
	TCNT2 =0;
	OCR2 = 0;
	TIMSK = 0;
 35c:	fc 01       	movw	r30, r24
 35e:	15 bc       	out	0x25, r1	; 37
 360:	85 b5       	in	r24, 0x25	; 37
 362:	80 68       	ori	r24, 0x80	; 128
 364:	85 bd       	out	0x25, r24	; 37
 366:	85 b5       	in	r24, 0x25	; 37
 368:	90 81       	ld	r25, Z
 36a:	29 2f       	mov	r18, r25
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	28 2b       	or	r18, r24
 37c:	25 bd       	out	0x25, r18	; 37
 37e:	80 81       	ld	r24, Z
 380:	81 11       	cpse	r24, r1
 382:	0b c0       	rjmp	.+22     	; 0x39a <Timer2_init_Async+0x3e>
 384:	81 81       	ldd	r24, Z+1	; 0x01
 386:	84 bd       	out	0x24, r24	; 36
 388:	19 be       	out	0x39, r1	; 57
 38a:	89 b7       	in	r24, 0x39	; 57
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	89 bf       	out	0x39, r24	; 57
 390:	95 b5       	in	r25, 0x25	; 37
 392:	83 81       	ldd	r24, Z+3	; 0x03
 394:	89 2b       	or	r24, r25
 396:	85 bd       	out	0x25, r24	; 37
 398:	08 95       	ret
 39a:	81 81       	ldd	r24, Z+1	; 0x01
 39c:	84 bd       	out	0x24, r24	; 36
 39e:	82 81       	ldd	r24, Z+2	; 0x02
 3a0:	83 bd       	out	0x23, r24	; 35
 3a2:	19 be       	out	0x39, r1	; 57
 3a4:	89 b7       	in	r24, 0x39	; 57
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	89 bf       	out	0x39, r24	; 57
 3aa:	95 b5       	in	r25, 0x25	; 37
 3ac:	83 81       	ldd	r24, Z+3	; 0x03
 3ae:	89 2b       	or	r24, r25
 3b0:	85 bd       	out	0x25, r24	; 37
 3b2:	08 95       	ret

000003b4 <Timer2_setCallBack>:
 *                                                              */

void Timer2_setCallBack(void(*ptr_func)(void))
{

	prv_CallBack_ptr = ptr_func;
 3b4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <prv_CallBack_ptr+0x1>
 3b8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <prv_CallBack_ptr>
 3bc:	08 95       	ret

000003be <__udivmodhi4>:
 3be:	aa 1b       	sub	r26, r26
 3c0:	bb 1b       	sub	r27, r27
 3c2:	51 e1       	ldi	r21, 0x11	; 17
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <__udivmodhi4_ep>

000003c6 <__udivmodhi4_loop>:
 3c6:	aa 1f       	adc	r26, r26
 3c8:	bb 1f       	adc	r27, r27
 3ca:	a6 17       	cp	r26, r22
 3cc:	b7 07       	cpc	r27, r23
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <__udivmodhi4_ep>
 3d0:	a6 1b       	sub	r26, r22
 3d2:	b7 0b       	sbc	r27, r23

000003d4 <__udivmodhi4_ep>:
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	5a 95       	dec	r21
 3da:	a9 f7       	brne	.-22     	; 0x3c6 <__udivmodhi4_loop>
 3dc:	80 95       	com	r24
 3de:	90 95       	com	r25
 3e0:	bc 01       	movw	r22, r24
 3e2:	cd 01       	movw	r24, r26
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
