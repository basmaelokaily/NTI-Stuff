
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000486  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000486  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f66  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088c  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f7  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044e  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000740  00000000  00000000  00002e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000356e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 41 02 	jmp	0x482	; 0x482 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "LCD.h"
#include "I2C.h"
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	uint8_t Return_Data = 0;
  8c:	19 82       	std	Y+1, r1	; 0x01
	I2C_master_init();
  8e:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_master_init>
	LCD_init();
  92:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_init>
	/*	In case using 8K Bits (1024 Byte) EEPROM		*/
	EEPROM_u8WriteByte(512 , 10);
  96:	6a e0       	ldi	r22, 0x0A	; 10
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	92 e0       	ldi	r25, 0x02	; 2
  9c:	0e 94 68 00 	call	0xd0	; 0xd0 <EEPROM_u8WriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	97 e2       	ldi	r25, 0x27	; 39
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x28>
  aa:	00 00       	nop
	_delay_ms(10);
	EEPROM_u8ReadByte(512 , &Return_Data);
  ac:	be 01       	movw	r22, r28
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <EEPROM_u8ReadByte>
	LCD_write_string("The Value = ");
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_write_string>
	LCD_write_num(Return_Data);
  c2:	69 81       	ldd	r22, Y+1	; 0x01
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_write_num>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x4c>

000000d0 <EEPROM_u8WriteByte>:
#include "EEPROM_interface.h"
#include "EEPROM_private.h"
#include "I2C.h"

void EEPROM_u8WriteByte(uint16_t Add , uint8_t Data)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	d8 2f       	mov	r29, r24
  d6:	c6 2f       	mov	r28, r22
	I2C_master_start();
  d8:	0e 94 98 00 	call	0x130	; 0x130 <I2C_master_start>
	I2C_slave_Init(0xA8);
  dc:	88 ea       	ldi	r24, 0xA8	; 168
  de:	0e 94 a8 00 	call	0x150	; 0x150 <I2C_slave_Init>
	I2C_master_write(Add);
  e2:	8d 2f       	mov	r24, r29
  e4:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_master_write>
	I2C_master_write(Data);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_master_write>
	I2C_master_stop();
  ee:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_master_stop>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <EEPROM_u8ReadByte>:

void EEPROM_u8ReadByte(uint16_t Add, uint8_t * Data)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	c8 2f       	mov	r28, r24
  fe:	d6 2f       	mov	r29, r22
	I2C_master_start();
 100:	0e 94 98 00 	call	0x130	; 0x130 <I2C_master_start>
	I2C_slave_Init(0xA8);
 104:	88 ea       	ldi	r24, 0xA8	; 168
 106:	0e 94 a8 00 	call	0x150	; 0x150 <I2C_slave_Init>
	I2C_master_write(Add);
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_master_write>
	I2C_master_start();
 110:	0e 94 98 00 	call	0x130	; 0x130 <I2C_master_start>
	I2C_master_write(Add);
 114:	8c 2f       	mov	r24, r28
 116:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_master_write>
	I2C_master_write(Data);
 11a:	8d 2f       	mov	r24, r29
 11c:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_master_write>
	I2C_master_stop();
 120:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_master_stop>
	
	
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <I2C_master_init>:
	}
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( READBIT(TWCR,TWINT) == 0);
}
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	80 b9       	out	0x00, r24	; 0
 12e:	08 95       	ret

00000130 <I2C_master_start>:
 130:	84 ea       	ldi	r24, 0xA4	; 164
 132:	86 bf       	out	0x36, r24	; 54
 134:	06 b6       	in	r0, 0x36	; 54
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <I2C_master_start+0x4>
 13a:	08 95       	ret

0000013c <I2C_master_write>:


void I2C_master_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 13c:	83 b9       	out	0x03, r24	; 3
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 13e:	84 e8       	ldi	r24, 0x84	; 132
 140:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( READBIT(TWCR,TWINT) == 0);
 142:	06 b6       	in	r0, 0x36	; 54
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <I2C_master_write+0x6>
}
 148:	08 95       	ret

0000014a <I2C_master_stop>:


void I2C_master_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | 1<<TWEN;
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	86 bf       	out	0x36, r24	; 54
 14e:	08 95       	ret

00000150 <I2C_slave_Init>:
}


void I2C_slave_Init(uint8_t My_Add){
	TWAR = My_Add<<1;
 150:	88 0f       	add	r24, r24
 152:	82 b9       	out	0x02, r24	; 2
 154:	08 95       	ret

00000156 <LCD_write_command>:
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands 
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data){ // 0x53
	RS(0);
 156:	9b b3       	in	r25, 0x1b	; 27
 158:	97 7f       	andi	r25, 0xF7	; 247
 15a:	9b bb       	out	0x1b, r25	; 27
	D7(READBIT(data,7)); // Data bit7  = D7  
 15c:	88 23       	and	r24, r24
 15e:	24 f4       	brge	.+8      	; 0x168 <LCD_write_command+0x12>
 160:	9b b3       	in	r25, 0x1b	; 27
 162:	90 68       	ori	r25, 0x80	; 128
 164:	9b bb       	out	0x1b, r25	; 27
 166:	03 c0       	rjmp	.+6      	; 0x16e <LCD_write_command+0x18>
 168:	9b b3       	in	r25, 0x1b	; 27
 16a:	9f 77       	andi	r25, 0x7F	; 127
 16c:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,6)); // Data bit6  = D6  
 16e:	86 ff       	sbrs	r24, 6
 170:	04 c0       	rjmp	.+8      	; 0x17a <LCD_write_command+0x24>
 172:	9b b3       	in	r25, 0x1b	; 27
 174:	90 64       	ori	r25, 0x40	; 64
 176:	9b bb       	out	0x1b, r25	; 27
 178:	03 c0       	rjmp	.+6      	; 0x180 <LCD_write_command+0x2a>
 17a:	9b b3       	in	r25, 0x1b	; 27
 17c:	9f 7b       	andi	r25, 0xBF	; 191
 17e:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,5)); // Data bit5  = D5  
 180:	85 ff       	sbrs	r24, 5
 182:	04 c0       	rjmp	.+8      	; 0x18c <LCD_write_command+0x36>
 184:	9b b3       	in	r25, 0x1b	; 27
 186:	90 62       	ori	r25, 0x20	; 32
 188:	9b bb       	out	0x1b, r25	; 27
 18a:	03 c0       	rjmp	.+6      	; 0x192 <LCD_write_command+0x3c>
 18c:	9b b3       	in	r25, 0x1b	; 27
 18e:	9f 7d       	andi	r25, 0xDF	; 223
 190:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,4)); // Data bit4  = D4
 192:	84 ff       	sbrs	r24, 4
 194:	04 c0       	rjmp	.+8      	; 0x19e <LCD_write_command+0x48>
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	90 61       	ori	r25, 0x10	; 16
 19a:	9b bb       	out	0x1b, r25	; 27
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <LCD_write_command+0x4e>
 19e:	9b b3       	in	r25, 0x1b	; 27
 1a0:	9f 7e       	andi	r25, 0xEF	; 239
 1a2:	9b bb       	out	0x1b, r25	; 27
	EN(1);
 1a4:	9b b3       	in	r25, 0x1b	; 27
 1a6:	94 60       	ori	r25, 0x04	; 4
 1a8:	9b bb       	out	0x1b, r25	; 27
 1aa:	e7 ee       	ldi	r30, 0xE7	; 231
 1ac:	f3 e0       	ldi	r31, 0x03	; 3
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_write_command+0x58>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD_write_command+0x5e>
 1b4:	00 00       	nop
	_delay_ms(1);
	EN(0);
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	9b 7f       	andi	r25, 0xFB	; 251
 1ba:	9b bb       	out	0x1b, r25	; 27
 1bc:	e7 ee       	ldi	r30, 0xE7	; 231
 1be:	f3 e0       	ldi	r31, 0x03	; 3
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_write_command+0x6a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_write_command+0x70>
 1c6:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(data,3)); // Data bit3  = D7
 1c8:	83 ff       	sbrs	r24, 3
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <LCD_write_command+0x7e>
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	90 68       	ori	r25, 0x80	; 128
 1d0:	9b bb       	out	0x1b, r25	; 27
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <LCD_write_command+0x84>
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	9f 77       	andi	r25, 0x7F	; 127
 1d8:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,2)); // Data bit2  = D6
 1da:	82 ff       	sbrs	r24, 2
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <LCD_write_command+0x90>
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	90 64       	ori	r25, 0x40	; 64
 1e2:	9b bb       	out	0x1b, r25	; 27
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <LCD_write_command+0x96>
 1e6:	9b b3       	in	r25, 0x1b	; 27
 1e8:	9f 7b       	andi	r25, 0xBF	; 191
 1ea:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,1)); // Data bit1  = D5
 1ec:	81 ff       	sbrs	r24, 1
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <LCD_write_command+0xa2>
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	90 62       	ori	r25, 0x20	; 32
 1f4:	9b bb       	out	0x1b, r25	; 27
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <LCD_write_command+0xa8>
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	9f 7d       	andi	r25, 0xDF	; 223
 1fc:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,0)); // Data bit0  = D4
 1fe:	80 ff       	sbrs	r24, 0
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCD_write_command+0xb4>
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	80 61       	ori	r24, 0x10	; 16
 206:	8b bb       	out	0x1b, r24	; 27
 208:	03 c0       	rjmp	.+6      	; 0x210 <LCD_write_command+0xba>
 20a:	8b b3       	in	r24, 0x1b	; 27
 20c:	8f 7e       	andi	r24, 0xEF	; 239
 20e:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 210:	8b b3       	in	r24, 0x1b	; 27
 212:	84 60       	ori	r24, 0x04	; 4
 214:	8b bb       	out	0x1b, r24	; 27
 216:	87 ee       	ldi	r24, 0xE7	; 231
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_write_command+0xc4>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_write_command+0xca>
 220:	00 00       	nop
	_delay_ms(1);
	EN(0);
 222:	8b b3       	in	r24, 0x1b	; 27
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	8b bb       	out	0x1b, r24	; 27
 228:	e7 ee       	ldi	r30, 0xE7	; 231
 22a:	f3 e0       	ldi	r31, 0x03	; 3
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_write_command+0xd6>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_write_command+0xdc>
 232:	00 00       	nop
 234:	08 95       	ret

00000236 <LCD_init>:
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void 
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PIN;
 236:	8a b3       	in	r24, 0x1a	; 26
 238:	8c 6f       	ori	r24, 0xFC	; 252
 23a:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_init+0x10>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_init+0x16>
 24c:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
 254:	8f e9       	ldi	r24, 0x9F	; 159
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_init+0x22>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_init+0x28>
 25e:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_init+0x34>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_init+0x3a>
 270:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
	LCD_write_command(0x28);
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
	LCD_write_command(0x08);
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
	LCD_write_command(0x1);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
	LCD_write_command(0x6);
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
	LCD_write_command(0xc);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_command>
 296:	8f e1       	ldi	r24, 0x1F	; 31
 298:	9e e4       	ldi	r25, 0x4E	; 78
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_init+0x64>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_init+0x6a>
 2a0:	00 00       	nop
 2a2:	08 95       	ret

000002a4 <LCD_write_data>:
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(uint8_t data){ // 0x53
	RS(1);
 2a4:	9b b3       	in	r25, 0x1b	; 27
 2a6:	98 60       	ori	r25, 0x08	; 8
 2a8:	9b bb       	out	0x1b, r25	; 27
	D7(READBIT(data,7)); // Data bit7  = D7
 2aa:	88 23       	and	r24, r24
 2ac:	24 f4       	brge	.+8      	; 0x2b6 <LCD_write_data+0x12>
 2ae:	9b b3       	in	r25, 0x1b	; 27
 2b0:	90 68       	ori	r25, 0x80	; 128
 2b2:	9b bb       	out	0x1b, r25	; 27
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <LCD_write_data+0x18>
 2b6:	9b b3       	in	r25, 0x1b	; 27
 2b8:	9f 77       	andi	r25, 0x7F	; 127
 2ba:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,6)); // Data bit6  = D6
 2bc:	86 ff       	sbrs	r24, 6
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <LCD_write_data+0x24>
 2c0:	9b b3       	in	r25, 0x1b	; 27
 2c2:	90 64       	ori	r25, 0x40	; 64
 2c4:	9b bb       	out	0x1b, r25	; 27
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <LCD_write_data+0x2a>
 2c8:	9b b3       	in	r25, 0x1b	; 27
 2ca:	9f 7b       	andi	r25, 0xBF	; 191
 2cc:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,5)); // Data bit5  = D5
 2ce:	85 ff       	sbrs	r24, 5
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <LCD_write_data+0x36>
 2d2:	9b b3       	in	r25, 0x1b	; 27
 2d4:	90 62       	ori	r25, 0x20	; 32
 2d6:	9b bb       	out	0x1b, r25	; 27
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <LCD_write_data+0x3c>
 2da:	9b b3       	in	r25, 0x1b	; 27
 2dc:	9f 7d       	andi	r25, 0xDF	; 223
 2de:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,4)); // Data bit4  = D4
 2e0:	84 ff       	sbrs	r24, 4
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <LCD_write_data+0x48>
 2e4:	9b b3       	in	r25, 0x1b	; 27
 2e6:	90 61       	ori	r25, 0x10	; 16
 2e8:	9b bb       	out	0x1b, r25	; 27
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <LCD_write_data+0x4e>
 2ec:	9b b3       	in	r25, 0x1b	; 27
 2ee:	9f 7e       	andi	r25, 0xEF	; 239
 2f0:	9b bb       	out	0x1b, r25	; 27
	EN(1);
 2f2:	9b b3       	in	r25, 0x1b	; 27
 2f4:	94 60       	ori	r25, 0x04	; 4
 2f6:	9b bb       	out	0x1b, r25	; 27
 2f8:	e7 ee       	ldi	r30, 0xE7	; 231
 2fa:	f3 e0       	ldi	r31, 0x03	; 3
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_write_data+0x58>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_write_data+0x5e>
 302:	00 00       	nop
	_delay_ms(1);
	EN(0);
 304:	9b b3       	in	r25, 0x1b	; 27
 306:	9b 7f       	andi	r25, 0xFB	; 251
 308:	9b bb       	out	0x1b, r25	; 27
 30a:	e7 ee       	ldi	r30, 0xE7	; 231
 30c:	f3 e0       	ldi	r31, 0x03	; 3
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_write_data+0x6a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_write_data+0x70>
 314:	00 00       	nop
	_delay_ms(1);

	D7(READBIT(data,3)); // Data bit3  = D7
 316:	83 ff       	sbrs	r24, 3
 318:	04 c0       	rjmp	.+8      	; 0x322 <LCD_write_data+0x7e>
 31a:	9b b3       	in	r25, 0x1b	; 27
 31c:	90 68       	ori	r25, 0x80	; 128
 31e:	9b bb       	out	0x1b, r25	; 27
 320:	03 c0       	rjmp	.+6      	; 0x328 <LCD_write_data+0x84>
 322:	9b b3       	in	r25, 0x1b	; 27
 324:	9f 77       	andi	r25, 0x7F	; 127
 326:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,2)); // Data bit2  = D6
 328:	82 ff       	sbrs	r24, 2
 32a:	04 c0       	rjmp	.+8      	; 0x334 <LCD_write_data+0x90>
 32c:	9b b3       	in	r25, 0x1b	; 27
 32e:	90 64       	ori	r25, 0x40	; 64
 330:	9b bb       	out	0x1b, r25	; 27
 332:	03 c0       	rjmp	.+6      	; 0x33a <LCD_write_data+0x96>
 334:	9b b3       	in	r25, 0x1b	; 27
 336:	9f 7b       	andi	r25, 0xBF	; 191
 338:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,1)); // Data bit1  = D5
 33a:	81 ff       	sbrs	r24, 1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <LCD_write_data+0xa2>
 33e:	9b b3       	in	r25, 0x1b	; 27
 340:	90 62       	ori	r25, 0x20	; 32
 342:	9b bb       	out	0x1b, r25	; 27
 344:	03 c0       	rjmp	.+6      	; 0x34c <LCD_write_data+0xa8>
 346:	9b b3       	in	r25, 0x1b	; 27
 348:	9f 7d       	andi	r25, 0xDF	; 223
 34a:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,0)); // Data bit0  = D4
 34c:	80 ff       	sbrs	r24, 0
 34e:	04 c0       	rjmp	.+8      	; 0x358 <LCD_write_data+0xb4>
 350:	8b b3       	in	r24, 0x1b	; 27
 352:	80 61       	ori	r24, 0x10	; 16
 354:	8b bb       	out	0x1b, r24	; 27
 356:	03 c0       	rjmp	.+6      	; 0x35e <LCD_write_data+0xba>
 358:	8b b3       	in	r24, 0x1b	; 27
 35a:	8f 7e       	andi	r24, 0xEF	; 239
 35c:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 35e:	8b b3       	in	r24, 0x1b	; 27
 360:	84 60       	ori	r24, 0x04	; 4
 362:	8b bb       	out	0x1b, r24	; 27
 364:	87 ee       	ldi	r24, 0xE7	; 231
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_write_data+0xc4>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_write_data+0xca>
 36e:	00 00       	nop
	_delay_ms(1);
	EN(0);
 370:	8b b3       	in	r24, 0x1b	; 27
 372:	8b 7f       	andi	r24, 0xFB	; 251
 374:	8b bb       	out	0x1b, r24	; 27
 376:	e7 ee       	ldi	r30, 0xE7	; 231
 378:	f3 e0       	ldi	r31, 0x03	; 3
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_write_data+0xd6>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_write_data+0xdc>
 380:	00 00       	nop
 382:	08 95       	ret

00000384 <LCD_write_string>:
* Function Name: LCD_write_data
* Purpose      : write a string on lCD
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t *data){
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	8c 01       	movw	r16, r24
	uint8_t i =0;
 38c:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0'){
 38e:	03 c0       	rjmp	.+6      	; 0x396 <LCD_write_string+0x12>
		LCD_write_data(data[i]);
 390:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_write_data>
		i++;
 394:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t *data){
	uint8_t i =0;
	while(data[i] != '\0'){
 396:	f8 01       	movw	r30, r16
 398:	ec 0f       	add	r30, r28
 39a:	f1 1d       	adc	r31, r1
 39c:	80 81       	ld	r24, Z
 39e:	81 11       	cpse	r24, r1
 3a0:	f7 cf       	rjmp	.-18     	; 0x390 <LCD_write_string+0xc>
		LCD_write_data(data[i]);
		i++;
	}
}
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <LCD_write_num>:
* Function Name: LCD_write_num
* Purpose      : write a number on lCD
* Parameters   : num: number to be written
* Return value : void
*****************************************************************************/
void LCD_write_num(uint32_t num){
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	2a 97       	sbiw	r28, 0x0a	; 10
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) {
 3c0:	61 15       	cp	r22, r1
 3c2:	71 05       	cpc	r23, r1
 3c4:	81 05       	cpc	r24, r1
 3c6:	91 05       	cpc	r25, r1
 3c8:	d1 f4       	brne	.+52     	; 0x3fe <LCD_write_num+0x54>
		LCD_write_data('0');
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_write_data>
 3d0:	2c c0       	rjmp	.+88     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
 3d2:	2a e0       	ldi	r18, 0x0A	; 10
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	0e 94 1f 02 	call	0x43e	; 0x43e <__udivmodsi4>
 3de:	e1 e0       	ldi	r30, 0x01	; 1
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ec 0f       	add	r30, r28
 3e4:	fd 1f       	adc	r31, r29
 3e6:	e1 0f       	add	r30, r17
 3e8:	f1 1d       	adc	r31, r1
 3ea:	17 fd       	sbrc	r17, 7
 3ec:	fa 95       	dec	r31
 3ee:	60 5d       	subi	r22, 0xD0	; 208
 3f0:	60 83       	st	Z, r22
		num /= 10;
 3f2:	62 2f       	mov	r22, r18
 3f4:	73 2f       	mov	r23, r19
 3f6:	84 2f       	mov	r24, r20
 3f8:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_data('0');
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
 3fa:	1f 5f       	subi	r17, 0xFF	; 255
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	61 15       	cp	r22, r1
 402:	71 05       	cpc	r23, r1
 404:	81 05       	cpc	r24, r1
 406:	91 05       	cpc	r25, r1
 408:	21 f7       	brne	.-56     	; 0x3d2 <LCD_write_num+0x28>
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
 40a:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0){
 40c:	0c c0       	rjmp	.+24     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		LCD_write_data(num_arr[i]);
 40e:	e1 e0       	ldi	r30, 0x01	; 1
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	ec 0f       	add	r30, r28
 414:	fd 1f       	adc	r31, r29
 416:	e1 0f       	add	r30, r17
 418:	f1 1d       	adc	r31, r1
 41a:	17 fd       	sbrc	r17, 7
 41c:	fa 95       	dec	r31
 41e:	80 81       	ld	r24, Z
 420:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_write_data>
		i--;
 424:	11 50       	subi	r17, 0x01	; 1
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while (i >= 0){
 426:	11 23       	and	r17, r17
 428:	94 f7       	brge	.-28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		LCD_write_data(num_arr[i]);
		i--;
	}
 42a:	2a 96       	adiw	r28, 0x0a	; 10
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	08 95       	ret

0000043e <__udivmodsi4>:
 43e:	a1 e2       	ldi	r26, 0x21	; 33
 440:	1a 2e       	mov	r1, r26
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	fd 01       	movw	r30, r26
 448:	0d c0       	rjmp	.+26     	; 0x464 <__udivmodsi4_ep>

0000044a <__udivmodsi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	ee 1f       	adc	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	a2 17       	cp	r26, r18
 454:	b3 07       	cpc	r27, r19
 456:	e4 07       	cpc	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	20 f0       	brcs	.+8      	; 0x464 <__udivmodsi4_ep>
 45c:	a2 1b       	sub	r26, r18
 45e:	b3 0b       	sbc	r27, r19
 460:	e4 0b       	sbc	r30, r20
 462:	f5 0b       	sbc	r31, r21

00000464 <__udivmodsi4_ep>:
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a 94       	dec	r1
 46e:	69 f7       	brne	.-38     	; 0x44a <__udivmodsi4_loop>
 470:	60 95       	com	r22
 472:	70 95       	com	r23
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	9b 01       	movw	r18, r22
 47a:	ac 01       	movw	r20, r24
 47c:	bd 01       	movw	r22, r26
 47e:	cf 01       	movw	r24, r30
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
